<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ES6的Class</title>
    <url>/2017/07/13/2017-07-13-ES6%E7%9A%84Class/</url>
    <content><![CDATA[<p>今日推荐歌曲 Winky 诗 <strong>不开口的花</strong></p>
<hr>
<p>类语法是 ES6 中新增的一个亮点特色。JavaScript 终于迎来了真正意义上的类。在之前，想要通过 javascript 来实现类，通常会采用如下构造函数的模式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.job = job;</span><br><span class="line">  <span class="keyword">this</span>.friends = [<span class="string">"Shelby"</span>, <span class="string">"Court"</span>];</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: Person,</span><br><span class="line">  sayName: function () &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>然后实例化调用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"lf"</span>, <span class="number">23</span>, <span class="string">"software engineer"</span>);</span><br><span class="line">person1.sayName();</span><br></pre></td></tr></table></figure>
<p>但是这样做未免也太麻烦了</p>
<h2 id="more"><a id="more"></a></h2>
<p>在 ES6 中可以直接声明 class</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明一个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"person constructor"</span>);</span><br><span class="line">    <span class="comment">//this指向类创建的实例对象</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//实例方法，对象方法</span></span><br><span class="line">  say() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`my name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.walk = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"walk...."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> zhangsan = <span class="keyword">new</span> Person(<span class="string">"张三"</span>);</span><br><span class="line"></span><br><span class="line">zhangsan.say();</span><br><span class="line"><span class="built_in">console</span>.log(zhangsan);</span><br><span class="line">Person.walk();</span><br></pre></td></tr></table></figure>
<p>class 是可以继承的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">//继承得到父类的所以属性和方法(类方法对象方法都可以继承)</span></span><br><span class="line">  <span class="comment">//默认指向父类的：</span></span><br><span class="line">  <span class="comment">// constructor(name)&#123;</span></span><br><span class="line">  <span class="comment">//     super(name);</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的一点就是，继承的原理还是在利用 prototype 这点没有变，只不过 extends 裹了一层语法糖而已。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> lisi = <span class="keyword">new</span> Man(<span class="string">"李四"</span>);</span><br><span class="line">lisi.say();</span><br><span class="line"><span class="built_in">console</span>.log(lisi);</span><br><span class="line">Man.walk();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Woman</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">//重写了构造函数，必须调用super</span></span><br><span class="line">  <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name); <span class="comment">//调用父类的构造函数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Woman constructor"</span>);</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 重写父类的方法</span></span><br><span class="line">  say() &#123;</span><br><span class="line">    <span class="keyword">super</span>.say(); <span class="comment">//调用父类相同的say方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`age: <span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"eat...."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继承的时候重写构造函数必须用 super()调用父类的构造函数<br>
如果重写了父类的方法，继承者与被继承者的方法就没有任何关系了<br>
如果既想使用父类的方法，又想在这个方法拓展自己的功能，就需要调用父类相同的方法 super.方法名()</p>
]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
      <tags>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>pormise的使用</title>
    <url>/2017/09/13/2017-09-13-pormise%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>最近在学 nodejs 时经常碰到关于异步的问题,在 es6 中定义了 promise 解决异步编程。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(成功)&#123;</span><br><span class="line">  resolve()  <span class="comment">//成功执行resolve()</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  reject()   <span class="comment">//失败或者函数错误就执行reject()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>promis 本身是一个构造函数，自己身上有<code>all，reject，resolve</code>等方法，原型链上有<code>then</code>和<code>catch</code>等方法<br>
Promise 的构造函数接收一个参数，是函数，并且传入两个参数：<code>resolve，reject</code>，分别表示异步操作执行成功后的回调函数和异步操作执行失败后的回调函数。<br>
其实这里用“成功”和“失败”来描述并不准确，按照标准来讲，<code>resolve</code>是将<code>Promise</code>的状态置为 fullfiled，<code>reject</code>是将<code>Promise</code>的状态置为<code>rejected</code>。<br>
<code>promise</code>可以进行链式调用，在函数执行执行成功的时候执行<code>then()</code>，失败或者函数内部错误就执行<code>catch()</code>就算有语法错误不会进行报错<br>
同时 promise 可以进行链式调用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;).catch(<span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="http://www.cc12210.xyz/usr/uploads/2018/10/2792309907.png" alt="promise执行流程"><br>
目前所理解的就是<code>Promise</code>的用处，实际上是在于多重异步操作相互依赖的情况下，对于逻辑流程的控制。<code>Promise</code>正是通过对两种状态的控制，以此来解决流程的控制。如果异步操作获得了我们想要的结果，那我们将调用<code>resolve</code>函数，在<code>then</code>的第一个作为参数的匿名函数中可以获取数据，如果我们得到了错误的结果，调用<code>reject</code>函数，在<code>then</code>函数的第二个作为参数的匿名函数中获取错误处理数据。 这样，一个次完整的<code>Promise</code>调用就结束了。对于<code>Promise</code>的<code>then()</code>方法，<code>then</code>总是会返回一个<code>Promise</code>实例，因此你可以一直调用<code>then</code>,也就是链式调用的原理</p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs的mongDB数据库操作</title>
    <url>/2017/11/16/2017-11-16-nodejs%E7%9A%84mongDB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>);</span><br></pre></td></tr></table></figure>
<p>首先是引入<code>express</code>框架模块,还有<strong>nodejs</strong>中操作数据库的<code>mongoose</code>模块</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mongoose.connect(</span><br><span class="line">  <span class="string">"mongodb://localhost:27018"</span>,</span><br><span class="line">  &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  (error) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"连接数据库失败"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"连接数据库成功"</span>);</span><br><span class="line">      <span class="comment">// 启动服务器</span></span><br><span class="line">      server.listen(<span class="number">8080</span>, <span class="string">"localhost"</span>, (error) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"服务器启动失败"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"服务器启动成功"</span>);</span><br><span class="line">          <span class="comment">// 操作数据库</span></span><br><span class="line">          handleDB();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>启动数据库成功之后再启动服务器,但是这样嵌套比较复杂，可以使用<code>promise</code>实现</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 启动数据库，执行命令：</span></span><br><span class="line">  <span class="comment">// &gt;mongod --dbptah=数据库数据的存放路径 --port=27017    //端口号自行设置</span></span><br><span class="line">  <span class="comment">// 连接数据库</span></span><br><span class="line">  mongoose.connect(</span><br><span class="line">    <span class="string">"mongodb://localhost:27019"</span>,</span><br><span class="line">    &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    (error) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"连接数据库失败"</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"连接数据库成功"</span>);</span><br><span class="line">        resolve();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 启动服务器</span></span><br><span class="line">  server.listen(<span class="number">8080</span>, <span class="string">"localhost"</span>, (error) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"服务器启动失败"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"服务器启动成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>操作数据库的增删改查</strong><br>
<strong>在 node 的模块化开发中,可以将操作某一类的操作单独抽出来作为一个模块，然后挂载在<code>module.exprots</code>使用，独立的模块中需要的依赖也得加上，不然会报错</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="comment">//创建表格</span></span><br><span class="line"><span class="keyword">const</span> schmea = <span class="keyword">new</span> mongoose.Schme(&#123;</span><br><span class="line">      <span class="comment">//声明表格字段，字段类型</span></span><br><span class="line">      键: 数据类型    string 或者number之类的</span><br><span class="line">&#125;)；</span><br><span class="line"><span class="comment">//创建操作数据库表格的模型</span></span><br><span class="line"><span class="keyword">const</span> Student = mongoose.model(<span class="string">'表格名'</span>,schema);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> studentInfo = <span class="keyword">new</span> Student(&#123;</span><br><span class="line">      键:值</span><br><span class="line">  &#125;);</span><br><span class="line">      <span class="comment">//增操作</span></span><br><span class="line">      studentInfo.save().then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'增加完成'</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">//查操作</span></span><br><span class="line">      Student.find(<span class="function">(<span class="params">error,result</span>)=&gt;</span>&#123;</span><br><span class="line">         <span class="comment">//这个是查询所有,一个是错误参数，一个是结果</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">//按条件查询1</span></span><br><span class="line">      Student.where(&#123;键:值&#125;).find(<span class="function">(<span class="params">error,result</span>)=&gt;</span>&#123;</span><br><span class="line">         <span class="comment">//按条件查找符合要求的</span></span><br><span class="line">      &#125;)</span><br><span class="line">      Student.where(&#123;键:值&#125;).countDocuments(<span class="function">(<span class="params">error,result</span>)=&gt;</span>&#123;</span><br><span class="line">         <span class="comment">//按条件查找符合要求的结果数量</span></span><br><span class="line">      &#125;)</span><br><span class="line">     <span class="comment">// 查找一个</span></span><br><span class="line">      Student.findOne(&#123;<span class="attr">name</span>: <span class="string">'张三'</span>&#125;)</span><br><span class="line">      Student.where(&#123;<span class="attr">name</span>: <span class="string">'张三'</span>&#125;).findOne(<span class="function">(<span class="params">error, result</span>)=&gt;</span>&#123;  还有一个findById()方法同理</span><br><span class="line">         <span class="built_in">console</span>.log(error);</span><br><span class="line">         <span class="built_in">console</span>.log(result);</span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="comment">//修改一个 updateOne()  findOneAndUpdate() update()也是修改一个,最初设计没有完成修改多个,后增加了一个</span></span><br><span class="line">               <span class="comment">//updateMany()就是修改多个     括号里面为筛选条件</span></span><br><span class="line">    <span class="comment">// 删除   remove()删除多个   findOneAndRemove() 删除一个  findByIdAndRemove()根据id删除</span></span><br><span class="line">    <span class="comment">// Student.findByIdAndDelete    后面基本同理</span></span><br><span class="line">    <span class="comment">// Student.findOneAndDelete</span></span><br><span class="line">    <span class="comment">// Student.deleteMany</span></span><br><span class="line">    <span class="comment">// Student.deleteOne</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案 MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>swiper动画的使用</title>
    <url>/2017/08/08/2017-08-08-swiper%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>推荐歌曲 <strong>When Can I See You Again?</strong> —owl city<br>
《无敌破坏王》主题曲</p>
<p>花了不少的时间做出来的效果，音乐控制还没加，先忙其他的，有时间再补上,手机端查看调成全屏效果最佳，因为是 app 的进入动画，电脑 f12 调成手机观察模式</p>
<a id="more"></a>
<p>!!!<br>
<a href="/slidephone">演示地址</a><br>
!!!<br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/10/236758341.png" alt="滑屏特效"></p>
<hr>
<p>使用 Swiper Animate 需要先加载<code>swiper.animate.min.js</code>和<code>animate.min.css</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"path/to/swiper.min.css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"path/to/animate.min.css"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/swiper.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/swiper.animate.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>swiper 动画使用时设置一下每次翻页都重新加载动画</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">//Swiper4.x</span></span><br><span class="line">  <span class="keyword">var</span> mySwiper = <span class="keyword">new</span> Swiper (<span class="string">'.swiper-container'</span>, &#123;</span><br><span class="line">    on:&#123;</span><br><span class="line">      init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        swiperAnimateCache(<span class="keyword">this</span>); <span class="comment">//隐藏动画元素</span></span><br><span class="line">        swiperAnimate(<span class="keyword">this</span>); <span class="comment">//初始化完成开始动画</span></span><br><span class="line">      &#125;,</span><br><span class="line">      slideChangeTransitionEnd: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        swiperAnimate(<span class="keyword">this</span>); <span class="comment">//每个slide切换结束时也运行当前slide动画</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>案例示范</strong><br>
在需要运动的元素上面增加类名 <code>ani</code> ，和其他的类似插件相同，<code>Swiper Animate</code>需要指定几个参数：<br>
<code>swiper-animate-effect</code>：切换效果，例如 <code>fadeInUp</code><br>
!!!javascript<br>
<a href="http://www.jq22.com/demo/Animate201707101048/?tdsourcetag=s_pcqq_aiomsg" target="_blank" rel="noopener">更多动画效果可以点击前往参考 animate.css</a><br>
!!!<br>
<code>swiper-animate-duration</code>：可选，动画持续时间（单位秒），例如 0.5s<br>
<code>swiper-animate-delay</code>：可选，动画延迟时间（单位秒），例如 0.3s</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"ani"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">swiper-animate-effect</span>=<span class="string">"fadeInUp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">swiper-animate-duration</span>=<span class="string">"0.5s"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">swiper-animate-delay</span>=<span class="string">"0.3s"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    内容</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>swiper</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs对mongDB的条件查找</title>
    <url>/2017/12/04/2017-12-04-nodejs%E5%AF%B9mongDB%E7%9A%84%E6%9D%A1%E4%BB%B6%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<p><strong>条件查询</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$gt  大于</span><br><span class="line">$lt  小于</span><br><span class="line">$gte 大于等于</span><br><span class="line">$lte 小于等于</span><br><span class="line">$ne  不等于</span><br><span class="line">$regex  正则</span><br><span class="line">$or  或</span><br></pre></td></tr></table></figure>
<p><strong>查询案例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找年满18周岁,低于60岁</span></span><br><span class="line">Student.find(&#123; <span class="attr">age</span>: &#123; <span class="attr">$gte</span>: <span class="number">18</span>, <span class="attr">$lt</span>: <span class="number">60</span> &#125; &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// console.log(result);</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 查找姓李</span></span><br><span class="line"><span class="keyword">let</span> reg2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/^李/</span>);</span><br><span class="line">Student.find(&#123; <span class="attr">name</span>: &#123; <span class="attr">$regex</span>: reg2 &#125; &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// console.log(result);</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 排序 -1降序   1升序</span></span><br><span class="line">Student.find()</span><br><span class="line">  .sort(&#123; <span class="attr">age</span>: <span class="number">-1</span> &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(result);</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>分页查询</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分页查询</span></span><br><span class="line"><span class="comment">// 1000</span></span><br><span class="line"><span class="comment">// page = 1  count = 5</span></span><br><span class="line"><span class="comment">// 0~4</span></span><br><span class="line"><span class="comment">// page=3  count=8</span></span><br><span class="line"><span class="comment">// 16~23</span></span><br><span class="line"><span class="comment">// page=4   count=6</span></span><br><span class="line"><span class="comment">// 18~23</span></span><br><span class="line"><span class="comment">// (page-1)*count ~ page*count-1</span></span><br><span class="line"><span class="comment">// page = 1  count = 3</span></span><br><span class="line"><span class="comment">// 0~2</span></span><br><span class="line"><span class="comment">// page =3 count=2</span></span><br><span class="line"><span class="comment">// skip(num)跳过前面多少条数据开始查询   (page-1)*count</span></span><br><span class="line"><span class="comment">// limit(num)需要多少条数据的长度        count</span></span><br><span class="line">Student.find()</span><br><span class="line">  .skip(<span class="number">4</span>)</span><br><span class="line">  .limit(<span class="number">2</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(result);</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>find()里面为一个对象，可以传多个条件进行精确筛选</p>
<hr>
<p>在创建表格的时候声明表格字段名称和类型 如果仅一个值可以缩写为<br>
<code>score: Number</code> 等价于 <code>type: Number</code> 也等价于 <code>type: mongoose.SchemaTypes.Number</code><br>
关联另一个表格数据，如要关联 id，需要用 mongoose 去获取<code>type: mongoose.SchemaTypes.ObjectId</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> schema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  studentID: &#123;</span><br><span class="line">    type: mongoose.SchemaTypes.ObjectId,</span><br><span class="line">    ref: <span class="string">"student"</span>, <span class="comment">//这个关联了哪一个表格的id值，如果用这个id去对应的表格中可以查询到数据</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  score: &#123;</span><br><span class="line">    type: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>WebSocket通讯</title>
    <url>/2017/12/29/2017-12-29-WebSocket%E9%80%9A%E8%AE%AF/</url>
    <content><![CDATA[<hr>
<p>在 websocket 出现之前，服务器与客户端的通信一般分为长连接和短连接<br>
长连接就是服务器和客户端一直保持通讯来实现消息的实时更新，但是这样做是十分的吃服务器资源的，用户一多就会特别卡<br>
短连接就是每次新建一个 socket，处理完了就关闭掉 socket，然后再次请求就再建一个 socket 连接，短连接很浪费带宽和时间<br>
两者互为优缺点，合理选择最重要。银行就一般采用短连接，为安全性考虑</p>
<hr>
<p><strong>长连接短连接操作过程</strong><br>
短连接的操作步骤是：<br>
建立连接——数据传输——关闭连接…建立连接——数据传输——关闭连接<br>
长连接的操作步骤是：<br>
建立连接——数据传输…（保持连接）…数据传输——关闭连接</p>
<h2 id="more"><a id="more"></a></h2>
<p>在 websocket 出现之前，想要实现在线聊天室需要使用到 ajax 轮询技术<br>
客户端：有消息没？<br>
服务器：没有<br>
客户端：有消息没？<br>
服务器：没有，滚<br>
客户端：怎么还没有消息吗？<br>
服务器：行吧，xxx 说了一句这个客户端真垃圾</p>
<h2 id="通信流程"><img src="http://www.cc12210.xyz/usr/uploads/2018/10/2019420270.png" alt="通信流程"></h2>
<p>websocket 是 HTML5 中一个非常重要的特性，他可以实现客户端服务器的双向通信。<br>
服务器发生了更新，不需要客户端主动去请求或者刷新页面去获得消息，服务器会主动将信息发送给客户端。</p>
<hr>
<p><img src="http://www.cc12210.xyz/usr/uploads/2018/10/3327238247.jpg" alt="u=3071664683,2322847154&amp;fm=26&amp;gp=0.jpg"><br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/10/3820947272.png" alt="9f43c6459d89706d3e7ccbc19f2bcbae.png"></p>
<p><strong>WebSocket 如何工作？</strong></p>
<p>Web 浏览器和服务器都必须实现 WebSockets 协议来建立和维护连接。由于 WebSockets 连接长期存在，与典型的 HTTP 连接不同，对服务器有重要的影响。</p>
<p>基于多线程或多进程的服务器无法适用于 WebSockets，因为它旨在打开连接，尽可能快地处理请求，然后关闭连接。任何实际的 WebSockets 服务器端实现都需要一个异步服务器。</p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
  </entry>
  <entry>
    <title>vue入门</title>
    <url>/2018/01/10/2018-01-10-vue%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>今日推荐歌曲 No Logic 歌手：ジミーサム P / ろん</p>
<p><img src="http://www.cc12210.xyz/usr/uploads/2018/11/2804013326.png" alt="vue"><br>
<strong>一个渐进式 javascript 框架</strong></p>
<hr>
<p>使用 vue 前先进行引用<br>
下载 vue.js 或者引用 CDN 地址</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<a id="more"></a>
<p>使用 vue 时先对 vue 进行实例创建</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建vue实例</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">//vue实例的配置项</span></span><br><span class="line">  <span class="comment">//vue实例作用在哪个dom结构中</span></span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  <span class="comment">//vue实例的属性</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">"hello world"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"create。。。。"</span>);</span><br><span class="line">    <span class="comment">//内部访问属性使用this访问</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.message);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内部访问方法，使用this访问</span></span><br><span class="line">    <span class="comment">// this.testFun();</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//配置实例的方法,通过实例对象直接访问</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    testFun: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 外部访问属性，使用实例对象访问</span></span><br><span class="line"><span class="built_in">console</span>.log(vm.message);</span><br><span class="line"><span class="comment">// 外部访问方法，使用实例访问</span></span><br><span class="line"><span class="comment">// vm.testFun();</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;testFun()&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>vue 指令</strong><br>
在 vue 中，指令都是以 v-开头的 后面的单词是指令的名字<br>
可以根据标签的不同添加不同的功能</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">"hello vue"</span>,</span><br><span class="line">    htmlStr: <span class="string">"&lt;mark&gt;非常重要&lt;/mark&gt;"</span>,</span><br><span class="line">    isShow: <span class="literal">false</span>,</span><br><span class="line">    id: <span class="string">"A"</span>,</span><br><span class="line">    count: <span class="number">10</span>,</span><br><span class="line">    arr: [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>],</span><br><span class="line">    obj: &#123; <span class="attr">name</span>: <span class="string">"张三"</span>, <span class="attr">age</span>: <span class="number">40</span>, <span class="attr">sex</span>: <span class="string">"男"</span> &#125;,</span><br><span class="line">    path: <span class="string">"http://baidu.com"</span>,</span><br><span class="line">    imgPath: <span class="string">"https://www.baidu.com/img/bd_logo1.png"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    clickAction: <span class="function"><span class="keyword">function</span> (<span class="params">...rest</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"box点击了:"</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(rest);</span><br><span class="line">    &#125;,</span><br><span class="line">    contextMenuAction() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"点击了右键"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    boxAction() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"box"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    wrapAction() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"wrap"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这是一个实例化的 vue 对象<br>
el 代表被挂载的 DOM 元素<br>
每一个 Vue 实例都会代理其 data 对象里的所有属性<br>
methods 就是为实例配置方法<br>
如果函数方法不写在 methods 中的话会会直接执行</p>
<hr>
<p>具体的指令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">v-text 相当于innerText的作用</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 简写方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">v-html 相当于innerHtml的作用</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-html</span>=<span class="string">"htmlStr"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">简写方式只有vue1.0有，不常用所以废弃了</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">v-show 通过控制标签的display来控制标签是否显示</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">通过判断isShow的布尔值决定是否显示,isShow的值从vue实例的data中取得，原理是控制display的值</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">v-if 通过控制标签的是否存在于文档中来控制是否显示</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">v-if</span>=<span class="string">"isShow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">if也是判断通过判断isShow的布尔值决定是否显示，但是与show不同的是if是完全删除节点，dom文档中不会出现该结构</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">v-if 可以和 v-else v-else-if搭配使用 v-if一定需要先写在前面</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">v-if</span>=<span class="string">"id=='A'"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">v-else-if</span>=<span class="string">"id=='B'"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">v-else-if</span>=<span class="string">"id=='C'"</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">v-else</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">v-for 循环遍历 可以遍历字符串，数字(正整数)，数组，对象</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(str, strIndex) in message"</span>&gt;</span></span><br><span class="line">    &#123;&#123;str&#125;&#125; ---- &#123;&#123;strIndex&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>v-for 后面是 键 in 对应的数组或者对象等 键值可以获取索引(str, strIndex)<br>
如果不需要索引值 只需写 str in message 即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">v-on  添加事件监听的指令</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">v-on:click</span>=<span class="string">"clickAction"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 简写方式 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> @<span class="attr">click</span>=<span class="string">"clickAction"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">v-on:动作   可以简写成@动作</span><br><span class="line"><span class="comment">&lt;!-- v-on的修饰符</span></span><br><span class="line"><span class="comment">      .prevent阻止浏览器默认事件</span></span><br><span class="line"><span class="comment">      .stop阻止事件冒泡</span></span><br><span class="line"><span class="comment">      .once 事件只执行一次</span></span><br><span class="line"><span class="comment"> &lt;div class="box" @click.stop.once="clickAction"&gt;test&lt;/div&gt;</span></span><br><span class="line"><span class="comment">修饰符直接接在后面就行</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">v-bind指令：绑定标签的属性 title src href id type name ...... style class</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:title</span>=<span class="string">"message"</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 简写方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"path"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imgPath"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">v-bind:属性 简写成 :属性即可</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6模块化</title>
    <url>/2017/11/20/2017-11-20-ES6%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
    <content><![CDATA[<p>es6 中的模块化的使用与 nodejs 有一定的差异<br>
main.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//es6引入模块</span></span><br><span class="line"><span class="comment">// 引入模块的默认输出:</span></span><br><span class="line"><span class="keyword">import</span> person <span class="keyword">from</span> <span class="string">"./person"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br></pre></td></tr></table></figure>
<p>person.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// es6向外输出内容</span></span><br><span class="line"><span class="comment">// 有default修饰，就是默认输出的内容</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">"张三"</span>,</span><br><span class="line">  age: <span class="number">40</span>,</span><br><span class="line">  height: <span class="number">190</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在 person.js 中导出了一个默认的对象,在 main.js 中就可以使用 import 变量 from '路径’获取到输出的对象<br>
然后打印就能看见导出的张三对象</p>
<h2 id="more"><a id="more"></a></h2>
<p><strong>输出内容的知识点</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定输出内容，可以输出多个</span></span><br><span class="line"><span class="comment">// 自己定名字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串，数字，布尔值，数组，对象。。。都以下面这种形式输出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"李四"</span>,</span><br><span class="line">  age: <span class="number">20</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> str = <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数以下面这种形式输出：</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">testAFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"a模块的函数调用了"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以像下面这种方式一样,将对象统一打包输出,输出的这个内容不是一个对象,不能随意添加参数,也可以在整体输之后再对某个零散的值进行输出,都是可以的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"李四"</span>,</span><br><span class="line">  age: <span class="number">20</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"hello"</span>;</span><br><span class="line"><span class="comment">// 函数以下面这种形式输出：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testBFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"b模块的函数调用了"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; obj, str, number, testBFunc, num &#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> boo = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>引入的知识点</strong><br>
可以引入指定内容,引入时也可以多个引用,用逗号隔开就可以 le</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入指定输出的内容</span></span><br><span class="line"><span class="keyword">import</span> &#123; obj &#125; <span class="keyword">from</span> <span class="string">"./a"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; str &#125; <span class="keyword">from</span> <span class="string">"./a"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; obj, str &#125; <span class="keyword">from</span> <span class="string">"./a"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure>
<p>当你使用 as 时,可以对输出的值的名字进行修改,修改之后使用修改后的名字即可<br>
<code>想要输出的内容 as 想改变的值</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改引入指定输出的内容的名字</span></span><br><span class="line"><span class="keyword">import</span> &#123; obj <span class="keyword">as</span> object, str <span class="keyword">as</span> string &#125; <span class="keyword">from</span> <span class="string">"./a"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(object);</span><br></pre></td></tr></table></figure>
<p>想要一次引入全部导出的内容,可以使用* as 名字 from ‘路径’ 取出</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入全部</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> cModule <span class="keyword">from</span> <span class="string">"./c"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(cModule);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>关于animate.css的使用</title>
    <url>/2018/01/09/2018-01-09-%E5%85%B3%E4%BA%8Eanimate.css%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><strong>amazarashi</strong>的<strong>僕が死のうと思ったのは</strong></p>
<hr>
<p><code>animate.css</code> 一个写好的动画库，动画种类比较多，但是有些想要的效果还是没有，得自己写<br>
先进行引用<br>
<code></p>
  <link rel="stylesheet" href="animate.min.css">
</code>
CDN地址是<code>https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.7.0/animate.min.css</code>
引用的时候写入对应的类名就可以,<code>animated</code>是一定要写的 <code>infinite</code>是无限循环 <code>bounce</code>是其中的一个效果,<code>delay-2s</code>是延迟执行
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;h1 <span class="class"><span class="keyword">class</span></span>=<span class="string">"animated infinite bounce delay-2s"</span>&gt;Example&lt;<span class="regexp">/h1&gt;</span></span><br></pre></td></tr></table></figure>
这里也可以对动画的持续时间进行更改
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.yourElement &#123;</span><br><span class="line">  animation-duration: <span class="number">3</span>s;</span><br><span class="line">  animation-delay: <span class="number">2</span>s;</span><br><span class="line">  animation-iteration-count: infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>随笔</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>dong&#39;hua</tag>
      </tags>
  </entry>
  <entry>
    <title>vue当前点击元素切换,并且点击的元素高亮</title>
    <url>/2018/01/10/2018-01-10-vue%E5%BD%93%E5%89%8D%E7%82%B9%E5%87%BB%E5%85%83%E7%B4%A0%E5%88%87%E6%8D%A2,%E5%B9%B6%E4%B8%94%E7%82%B9%E5%87%BB%E7%9A%84%E5%85%83%E7%B4%A0%E9%AB%98%E4%BA%AE/</url>
    <content><![CDATA[<p><a href="/VuePro">演示地址</a><br>
做的是手机端的切换，所以用手机模式查看<br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/11/3368808338.png" alt="演示1"><br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/11/3284236715.png" alt="演示2"></p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>手机页切换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"src/css/main.css"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &#123;&#123;zindex&#125;&#125; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main_1"</span> <span class="attr">v-if</span>=<span class="string">"zindex==0"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main_2"</span> <span class="attr">v-if</span>=<span class="string">"zindex==1"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main_3"</span> <span class="attr">v-if</span>=<span class="string">"zindex==2"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-for</span>=<span class="string">"(todo,index) in todos"</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">click</span>=<span class="string">"click_circle(index)"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:class</span>=<span class="string">"&#123;active:index==zindex&#125;"</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          &#123;&#123;todo.text&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"src/js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">"#container"</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        isShow: <span class="literal">false</span>,</span></span><br><span class="line">        zindex: 0,</span><br><span class="line">        todos: [</span><br><span class="line">          &#123;</span><br><span class="line"><span class="actionscript">            text: <span class="string">"首页"</span>,</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line"><span class="actionscript">            text: <span class="string">"朋友"</span>,</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line"><span class="actionscript">            text: <span class="string">"关于"</span>,</span></span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="actionscript">        click_circle: <span class="function"><span class="keyword">function</span> <span class="params">(index)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.zindex = index;</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>底部的选项卡就是通过 class 中的判断，点击之后改变 zindex 的值 对应的颜色的 css 只有 zinde==index 才能添加<br>
上面就是通过 v-if 进行判断，展现 zindex 对应的框</p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue自定义指令</title>
    <url>/2018/01/23/2018-01-23-Vue%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p>除了 Vue 给我们提供的默认指令之外,Vue 也允许我们注册自定义指令。就是自己定义一个指令,对这个指令赋予函数完成想要的功能,然后就可以跟默认指令一样使用<code>v-指令名</code>来调用这个自定义指令</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-color</span>=<span class="string">"myColor"</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-color</span>=<span class="string">"'blue'"</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h5</span> <span class="attr">v-text2</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义指令</span></span><br><span class="line"><span class="comment">// 参数1：指令名字</span></span><br><span class="line"><span class="comment">// 参数2：指令的实现函数</span></span><br><span class="line">Vue.directive(<span class="string">"color"</span>, (el, info) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"color指令调用了"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(el); <span class="comment">//使用指令的元素</span></span><br><span class="line">  <span class="built_in">console</span>.log(info); <span class="comment">//调用的指令信息</span></span><br><span class="line">  el.style.color = info.value;</span><br><span class="line">&#125;);</span><br><span class="line">Vue.directive(<span class="string">"text2"</span>, (el, info) =&gt; &#123;</span><br><span class="line">  el.innerText = info.value;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">"hello world"</span>,</span><br><span class="line">    myColor: <span class="string">"red"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>需要注意的是自定义指令需要在实例化对象之前,否则实例化对象无法找到自定义的指令</code></p>
<p>vue 的入门学习推荐 B 站的 UP 主 <strong>表严肃</strong></p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue的计算属性和侦听器</title>
    <url>/2018/01/15/2018-01-15-Vue%E7%9A%84%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BE%A6%E5%90%AC%E5%99%A8/</url>
    <content><![CDATA[<p><strong>计算属性</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    a:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model.number</span>=<span class="string">"a"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    b:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model.number</span>=<span class="string">"b"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  总价：&#123;&#123;count1&#125;&#125;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  总价：&#123;&#123;count1&#125;&#125;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  总价：&#123;&#123;count2()&#125;&#125;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  总价：&#123;&#123;count2()&#125;&#125;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  <span class="comment">//属性</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 计算属性</span></span><br><span class="line">  <span class="comment">// 也是属性的一种</span></span><br><span class="line">  <span class="comment">// 通过其他的属性，计算得到的属性结果</span></span><br><span class="line">  <span class="comment">// 计算属性，第一次调用会对结果进行缓存，下一次访问，直接使用缓存的结果</span></span><br><span class="line">  <span class="comment">// 如果相关联的属性发生变化，计算属性会重新计算并缓存。</span></span><br><span class="line">  computed: &#123;</span><br><span class="line">    count1() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"count1计算属性执行了"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//方法,调用多少次，就执行多少次</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    count2() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"count2方法执行了"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>计算属性中的值会进行缓存,且第一次调用时会对结果进行缓存,如果页面中有相同的引用就会使用缓存,而放在 methods 中的方法每次调用都会进行一次计算,这样对性能是有损耗的,引用多次会进行重复的计算,消耗计算性能</p>
<h2 id="more"><a id="more"></a></h2>
<p><strong>侦听器</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"obj.name"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model.number</span>=<span class="string">"obj.age"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>a: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model.number</span>=<span class="string">"a"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>b: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model.number</span>=<span class="string">"b"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"startListening()"</span>&gt;</span>开始监听<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">"hello world"</span>,</span><br><span class="line">    obj: &#123;</span><br><span class="line">      name: <span class="string">"张三"</span>,</span><br><span class="line">      age: <span class="number">40</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 监听方式1：实例创建后就执行监听</span></span><br><span class="line">  watch: &#123;</span><br><span class="line">    message(newVal, oldVal) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`1变化前：<span class="subst">$&#123;oldVal&#125;</span>,变化后：<span class="subst">$&#123;newVal&#125;</span>`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//对对象进行深度监听</span></span><br><span class="line">    obj: &#123;</span><br><span class="line">      handler() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"1监听到了obj发生了变化"</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      deep: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"obj.name"</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"1监听到了obj.name发生了变化"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    startListening() &#123;</span><br><span class="line">      <span class="comment">//监听方式2：调用$watch就执行监听</span></span><br><span class="line">      <span class="keyword">this</span>.$watch(<span class="string">"message"</span>, (newVal, oldVal) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`2变化前：<span class="subst">$&#123;oldVal&#125;</span>,变化后：<span class="subst">$&#123;newVal&#125;</span>`</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">this</span>.$watch(</span><br><span class="line">        <span class="string">"obj"</span>,</span><br><span class="line">        () =&gt; &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"2监听到了obj发生了变化"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          deep: <span class="literal">true</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">this</span>.$watch(<span class="string">"obj.name"</span>, () =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"2监听到了obj.name发生了变化"</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">//监听的值为一个函数，函数中涉及的属性发生变化，监听的回调函数就会执行</span></span><br><span class="line">      <span class="keyword">this</span>.$watch(</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b;</span><br><span class="line">        &#125;,</span><br><span class="line">        () =&gt; &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"监听的表达式发生了变化"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//外部调用就是使用实例去调用</span></span><br><span class="line"><span class="comment">//外部监听</span></span><br><span class="line"><span class="comment">//监听方式2：调用$watch就执行监听</span></span><br><span class="line"><span class="comment">// vm.$watch('message', (newVal, oldVal)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     console.log(`2变化前：$&#123;oldVal&#125;,变化后：$&#123;newVal&#125;`);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure>
<p>值得注意的是写在 watch 中的监听是实例创建就执行监听,写在 methods 中的监听是对$wathch 进行调用开始执行监听</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">            message(newVal, oldVal)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`变化前：<span class="subst">$&#123;oldVal&#125;</span>,变化后：<span class="subst">$&#123;newVal&#125;</span>`</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>监听时有两个参数,参数 1 是变换后的值,参数 2 是变化前的,这种是简写,监听对象需要进行深度监听</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj: &#123;</span><br><span class="line">         handler()&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'1监听到了obj发生了变化'</span>);</span><br><span class="line">         &#125;,</span><br><span class="line">         deep: <span class="literal">true</span>  <span class="comment">//代表深度监听</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="string">'obj.name'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'1监听到了obj.name发生了变化'</span>);</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure>
<p>如果要监听对象中某个具体的值,就用引号包起来进行监听</p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue生命周期</title>
    <url>/2018/01/16/2018-01-16-vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<p><img src="http://www.cc12210.xyz/usr/uploads/2018/11/2073613615.png" alt="1460000012510450.png"></p>
<a id="more"></a>
<p>生命周期：<br>
每个 Vue 实例在被创建时都要经过一系列的初始化过程——<br>
例如，需要设置数据监听、编译模板、将实例挂载到 DOM<br>
并在数据变化时更新 DOM 等。从初始化到销毁的过程就是生命周期</p>
<p>生命周期钩子/生命周期函数/钩子函数：<br>
在 vue 实例的生命周期中给了用户在不同阶段添加自己的代码的机会</p>
<hr>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">生命周期的各个阶段</span><br><span class="line">beforeCreate 创建前</span><br><span class="line">created 创建后</span><br><span class="line">beforeMount 挂载前</span><br><span class="line">mounted 挂载后</span><br><span class="line">beforeUpdate 更新前</span><br><span class="line">updated 更新后</span><br><span class="line">beforeDestroy 销毁前</span><br><span class="line">destroyed 销毁后</span><br></pre></td></tr></table></figure>
<p><strong>执行的过程</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建的过程：</span></span><br><span class="line"><span class="number">1.n</span>ew Vue()</span><br><span class="line"><span class="number">2.</span>加载所有的生命周期方法（没有调用）</span><br><span class="line"><span class="number">3.</span>执行beforeCreate生命周期钩子函数</span><br><span class="line">    在这个函数中，vue实例的数据观测，监听，事件。。等都没有加载</span><br><span class="line"><span class="number">4.</span>加载vue实例的data,methods,computed,watch...</span><br><span class="line"><span class="number">5.</span>执行created生命周期钩子函数</span><br><span class="line">    可以访问数据，事件等。。。</span><br><span class="line">    请求后台数据。。。</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>判断是否有el配置项，如果没有判断$mount()是否会执行，如果执行，就走下一步。</span><br><span class="line"><span class="number">7.</span>判断是否有template（对应的dom结构）</span><br><span class="line"><span class="number">8.</span>取得实例对应的dom结构，渲染dom结构</span><br><span class="line"><span class="number">9.</span>执行beforeMount生命周期钩子函数</span><br><span class="line"><span class="number">10.</span>将渲染好的dom替换在el作用的dom中</span><br><span class="line"><span class="number">11.</span>执行mounted生命周期钩子函数</span><br><span class="line">    可以操作dom了。。。。</span><br><span class="line">    不建议使用<span class="built_in">document</span>操作。</span><br><span class="line">    使用$refs操作dom结构</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新的过程：由于数据的变化导致dom的更新</span></span><br><span class="line"><span class="number">12.</span>数据发生变化</span><br><span class="line"><span class="number">13.</span>执行beforeUpdate生命周期钩子函数</span><br><span class="line"><span class="number">14.</span>重新渲染dom结构</span><br><span class="line"><span class="number">15.</span>执行updated生命周期钩子函数</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁的过程:</span></span><br><span class="line"><span class="number">16.</span>执行beforeDestory生命周期钩子函数</span><br><span class="line"><span class="number">17.</span>移除监听</span><br><span class="line"><span class="number">18.</span>执行destroy生命周期钩子函数</span><br><span class="line">    销毁后不建议做任何操作</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">ref</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span>&gt;</span></span><br><span class="line">      &#123;&#123;item&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box2"</span> <span class="attr">ref</span>=<span class="string">"myBox"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;keyword&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"change()"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">"hello vue"</span>,</span><br><span class="line">    list: [],</span><br><span class="line">    keyword: <span class="string">"vue"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;&#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    message() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"监听到了message的变化"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    testFunc() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"函数调用了"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    change() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"按钮点击了"</span>);</span><br><span class="line">      <span class="keyword">this</span>.keyword = <span class="string">"react"</span>;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">            指定属性发生变化，导致dom的更新。</span></span><br><span class="line"><span class="comment">            需要操作更新后的dom结构</span></span><br><span class="line"><span class="comment">            就在这个属性修改的代码后，紧接着写$nextTick监听dom的变化</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"$nextTick调用了"</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeCreate() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"beforeCreate....创建前...."</span>);</span><br><span class="line">    <span class="comment">// console.log(this.message);</span></span><br><span class="line">    <span class="comment">// this.testFunc();</span></span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"created...创建后...."</span>);</span><br><span class="line">    <span class="comment">// console.log(this.message);</span></span><br><span class="line">    <span class="comment">// this.testFunc();</span></span><br><span class="line">    <span class="comment">// console.log(this.$el);</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeMount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"beforeMount....挂载前...."</span>);</span><br><span class="line">    <span class="comment">// console.log(this.$el);</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">"h1"</span>).innerText);</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"mounted....挂载后...."</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">"h1"</span>).innerText);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.myBox);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUpdate() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"beforeUpdate....更新前..."</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.keyword);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">"p"</span>).innerText);</span><br><span class="line">  &#125;,</span><br><span class="line">  updated() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"updated....更新后..."</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.keyword);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">"p"</span>).innerText);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"beforeDestroy...销毁前。。。。"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"destoryed...销毁后。。。。"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>值得注意的是 beforeUpdate 所提到的更新是在 dom 结构发生的更新,当数据变动时,在 watch 阶段就已经完成了数据的改变,<br>
所以在 beforeUpdate 阶段打印绑定的值其实已经更改了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 动态挂载</span></span><br><span class="line"><span class="comment">// vm.$mount('#app');//等价于el的作用</span></span><br><span class="line"><span class="comment">// 刷新dom</span></span><br><span class="line"><span class="comment">// vm.$forceUpdate();//会重走更新函数，并重新渲染dom结构</span></span><br><span class="line"><span class="comment">// 销毁实例</span></span><br><span class="line"><span class="comment">// vm.$destroy()</span></span><br></pre></td></tr></table></figure>
<p>在 vue 实例进行创建的时候如果没有挂载 dom 结构,可以使用实例对象的 vm.$mount(‘dom 节点’)进行动态挂载,效果是一样的<br>
在实例执行了 beforeDestroy 时还是处于可用的状态,只是移除了监听<br>
最后执行了 destroyed 销毁后建议不再进行任何的操作</p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器视频资源的存放</title>
    <url>/2018/02/02/2018-02-02-%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%86%E9%A2%91%E8%B5%84%E6%BA%90%E7%9A%84%E5%AD%98%E6%94%BE/</url>
    <content><![CDATA[<p>视频资源本来也是想交给百度云的,但是百度云比较过分的将视频资源的真实地址隐藏了<br>
!!!<br>
<img src="../../../blogImg/dizhi.png" alt="被隐藏的资源地址"><br>
!!!<br>
由于短视频比较火爆,所以注册了一个秒拍，将视频资源上传到秒拍之后<br>
截取视频的地址，因为这个小服务器资源请求速度比较慢，部分视频放在秒拍，部分放在本地解析<br>
再试试其他云盘的视频资源路径,找找有没有没加密的<br>
放置了两个小游戏的链接,推荐手机端玩耍,有时间就再加一个 pc 的 html5 游戏放上来</p>
<hr>
<p>2018.6.27 补充</p>
<p>微博的视频也是可以直接拉资源地址下来的，暂不知道会不会过期</p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>网站服务</tag>
      </tags>
  </entry>
  <entry>
    <title>vue自定义组件</title>
    <url>/2018/02/01/2018-02-01-vue%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p>vue 中可以自定义组件,定义了之后就可以在 html 中使用了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hello-world</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-world</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hello-world</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-world</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hello-world</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-world</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 声明组件 // 参数1：组件的名字(不能跟已有的标签名字重复,</span><br><span class="line">dom中标签名字不能用大写字符) // 参数2：组件的内容 // Vue.component('HelloWorld',</span><br><span class="line">&#123; // Vue.component('helloWorld', &#123; Vue.component('hello-world', &#123;</span><br><span class="line">//声明组件的dom结构，必须有一个根节点 template: `</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>test component<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>test div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">`, //可以把组件理解成是一个小的vue实例 // 一个vue实例由多个组件组合而成 data:</span><br><span class="line">function () &#123; //在data函数中return得到的值就是组件的属性 return &#123; title:</span><br><span class="line">'这是我的第一个组件' &#125; &#125; //其他的配置项跟vue实例是一样的： // computed: //</span><br><span class="line">methods: // watch: //生命周期方法 &#125;); var vm = new Vue(&#123; el: '#app', data: &#123; &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>值得注意的是在组件中组件也可以当作一个 vue 实例去对待,在组件中也可以创建组件,但是每个组件只能在创建组件的地方使用,还有一点是组件中的 data 和 vue 实例中的 data 不一样</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//在data函数中return得到的值就是组件的属性</span></span><br><span class="line">       <span class="keyword">return</span> &#123;</span><br><span class="line">            title: <span class="string">'这是我的第一个组件'</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<p>组件中的 data 需要 return 出去,<code>对应的不是对象,是一个函数</code></p>
<hr>
<p><strong>全局组件和局部组件</strong><br>
<code>全局组件只要在 vue 作用范围就可以用</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局组件的声明方式,只要是vue的作用范围内，都能使用</span></span><br><span class="line">Vue.component(<span class="string">"hello"</span>, &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;h1&gt;这是hello组件&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app1"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    title: <span class="string">"第一个实例对象"</span>,</span><br><span class="line">    message: <span class="string">"test"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//声明局部组件，可以声明多个,声明在哪里就只可以在哪个位置使用。</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="comment">// key值为组件的标签名字</span></span><br><span class="line">    <span class="comment">// value值为组件的内容</span></span><br><span class="line">    <span class="string">"com-a"</span>: &#123;</span><br><span class="line">      template: <span class="string">`</span></span><br><span class="line"><span class="string">                    &lt;div class="a"&gt;</span></span><br><span class="line"><span class="string">                        &lt;h3&gt;这是a组件&lt;/h3&gt;</span></span><br><span class="line"><span class="string">                        &lt;hello&gt;&lt;/hello&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                `</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"com-b"</span>: &#123;</span><br><span class="line">      template: <span class="string">`</span></span><br><span class="line"><span class="string">                    &lt;div class="b"&gt;</span></span><br><span class="line"><span class="string">                        &lt;h3&gt;这是b组件&lt;/h3&gt;</span></span><br><span class="line"><span class="string">                        &lt;hello&gt;&lt;/hello&gt;</span></span><br><span class="line"><span class="string">                        &lt;b-b&gt;&lt;/b-b&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                `</span>,</span><br><span class="line">      components: &#123;</span><br><span class="line">        <span class="string">"b-b"</span>: &#123;</span><br><span class="line">          template: <span class="string">"&lt;mark&gt;b-b组件&lt;/mark&gt;"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>组件中的组件,组中组，跟俄罗斯套娃一样</p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue非父子组件传值</title>
    <url>/2018/02/09/2018-02-09-vue%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</url>
    <content><![CDATA[<p>非父子组件传值主要有两种方法</p>
<hr>
<h1>方法一</h1>
<p>利用一个中间的文件进行传值<br>
<code>center.js</code><br>
主要的实现思想是需要传值的组件将值传给 center.js 再由 center 转发给需要值的组件<br>
使用到的主要是$emit()和$on()事件<br>
新 new 一个 vue 实例对象,然后将这两个方法挂载到这个对象,两个组件都引用这个实例对象的文件就可以通信了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> vm;</span><br><span class="line"><span class="comment">//发布订阅模式：</span></span><br><span class="line"><span class="comment">// 多对多</span></span><br><span class="line"><span class="comment">// 先订阅后发布才有效</span></span><br><span class="line"><span class="comment">// 先监听，后触发，监听的回调函数才会执行。</span></span><br><span class="line"><span class="comment">// 监听自定义事件</span></span><br><span class="line"><span class="comment">// 参数1：事件名字</span></span><br><span class="line"><span class="comment">// 参数2：回调函数，事件触发后就执行</span></span><br><span class="line">vm.$on(<span class="string">"my-event"</span>, (params) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"监听到了事件执行了1"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发事件，自定义事件</span></span><br><span class="line"><span class="comment">// 参数1：事件名字</span></span><br><span class="line"><span class="comment">// 参数2：执行事件的参数</span></span><br><span class="line">vm.$emit(<span class="string">"my-event"</span>, <span class="string">"参数"</span>);</span><br></pre></td></tr></table></figure>
<p>需要传值的 add.vue 通过点击事件手动触发$emit()方法,将值挂载在后面传过去</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"add"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"value"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"addAction()"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> center <span class="keyword">from</span> <span class="string">"./center"</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        value: <span class="string">""</span>,</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      addAction() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"点击了新增按钮"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span></span><br><span class="line"><span class="handlebars"><span class="xml">        //触发自定义的事件   随意取名  我这里为<span class="tag">&lt;<span class="name">code</span>&gt;</span>add-event<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span></span></span><br><span class="line"><span class="actionscript">        center.$emit(<span class="string">"add-event"</span>, <span class="keyword">this</span>.value);</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在生命周期的 created 中监听这个$on()事件,监听到了新增的值然后将这个值存起来就行了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> center <span class="keyword">from</span> <span class="string">'./center'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line"><span class="javascript">        data: <span class="built_in">String</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">            arr: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">        //监听这个<span class="tag">&lt;<span class="name">code</span>&gt;</span>add-event<span class="tag">&lt;/<span class="name">code</span>&gt;</span>的自定义事件</span></span></span><br><span class="line"><span class="actionscript">        center.$on(<span class="string">'add-event'</span>,(value)=&gt;&#123;</span></span><br><span class="line"><span class="javascript">           <span class="built_in">console</span>.log(value) <span class="comment">//这样就监听到了发送过来的数据了</span></span></span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h1>方法二</h1>
<p>组件可以看作一个小的 vue 实例,除了 data 是个函数,没有 el 元素挂载一些特殊的之外,其他都是继承自 vue 实例的,所以可以在 vue 实例的 prototype 上绑定一个 new vue()的实例,这样两边就都能使用到这个实例<br>
<code>main.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.prototype.$center = <span class="keyword">new</span> Vue();</span><br></pre></td></tr></table></figure>
<p>然后在需要传值的组件上就可以使用$emit()和$on(),并且不需要引用中间件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 触发自定义事件</span></span><br><span class="line"><span class="keyword">this</span>.$center.$emit(<span class="string">"add-event"</span>, <span class="keyword">this</span>.value);</span><br></pre></td></tr></table></figure>
<p>接收的话在 mounted 中接收,保存值即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">        <span class="comment">// 监听自定义事件</span></span><br><span class="line">        <span class="keyword">this</span>.$center.$on(<span class="string">'add-event'</span>, (value)=&gt;&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'监听到了新增事件'</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(value);</span><br><span class="line">            <span class="keyword">this</span>.listData.push(value);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue父子组件之间的传值</title>
    <url>/2018/02/06/2018-02-06-vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BC%A0%E5%80%BC/</url>
    <content><![CDATA[<p><strong>组件之间的相互传值</strong></p>
<hr>
<p><strong>父组件向子组件传值</strong><br>
父组件在想要传值的子组件添加自定义属性 <code>:属性名=“值”</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是父组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">son</span> <span class="attr">:newInfo</span>=<span class="string">"Maininfo"</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>子组件通过 props 接收对应的属性名来获取到传过来的值,如果 props 写成对象的形式,可以在后面写上对应的数据类型进行属性校验,主要是为了团队开发方便查看传值的类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 接收标签中的属性。接收父组件传的值</span></span><br><span class="line">  <span class="comment">//外部属性</span></span><br><span class="line">  <span class="comment">// props: ['newInfo'],</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">//属性校验</span></span><br><span class="line">    newInfo: <span class="built_in">String</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="more"><a id="more"></a></h2>
<p><strong>子组件向父组件传值</strong><br>
子组件想要传值给父组件需要子组件触发自定义事件,通过自定义事件将值传递给父组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      city: <span class="string">""</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    submitAction() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"点击了提交"</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.city);</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">"getData"</span>, <span class="keyword">this</span>.city, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br><span class="line">      <span class="keyword">this</span>.city = <span class="string">""</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>通过 this.$emit(‘函数名’,传过去的值)<br>
传过去的实参的数量不限,只要在形参一一对应接收就可以了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是父组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">son</span> @<span class="attr">getData</span>=<span class="string">"getInfoAll"</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>父组件通过对应的自定义事件触发一个自己的函数,在 methods 中配置<br>
在上面触发函数时不能加括号,否则下面将无法接收到值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    getInfoAll(info) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(info);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="单向数据流">单向数据流</h2>
<p>来看看 vue 给出的定义:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：</span><br><span class="line">父级 prop 的更新会向下流动到子组件中，</span><br><span class="line">但是反过来则不行。</span><br><span class="line">这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</span><br><span class="line"></span><br><span class="line">额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。</span><br><span class="line">这意味着你不应该在一个子组件内部改变 prop。</span><br><span class="line">如果你这样做了，Vue 会在浏览器的控制台中发出警告。</span><br></pre></td></tr></table></figure>
<p>简单理解就是,父组件传给子组件的值不能被子组件修改,谁给的数据,就由谁来修改<br>
所以在你想要修改数据时可以自定义一个自定义事件,在要修改的时候将要修改的值的索引告诉数据的拥有者,让他来执行修改或是删除的操作<br>
如果只想要需要改自己的值而不是数据发送者的,那自己组件下定义一个值,初始值为它的值,然后你修改就改自己当前组件定义的值就行,跟父组件传下来的值就没有关联了,只是把传过来的值作为一个初始值而已</p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue脚手架Vue CLI3</title>
    <url>/2018/02/11/2018-02-11-vue%E8%84%9A%E6%89%8B%E6%9E%B6Vue_CLI3/</url>
    <content><![CDATA[<h1>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统</h1>
<p>先进行全局的安装</p>
<blockquote>
<p>npm install -g @vue/cli<br>
或者<br>
yarn global add @vue/cli<br>
推荐直接复制,手敲可能敲错<br>
<img src="https://i.loli.net/2018/11/09/5be53755ea25c.bmp" alt="错误.bmp"><br>
如果出现了安装失败的提示的话可以切换一下国内镜像<br>
npm config set registry <a href="http://registry.cnpmjs.org" target="_blank" rel="noopener">http://registry.cnpmjs.org</a></p>
</blockquote>
<h2 id="错误-png"><img src="http://www.cc12210.xyz/usr/uploads/2018/11/258540437.png" alt="错误.png"></h2>
<p>安装完毕之后可以对脚手架的版本进行检查</p>
<blockquote>
<p>vue --version</p>
</blockquote>
<h2 id="more"><a id="more"></a></h2>
<h2 id="创建项目">创建项目</h2>
<blockquote>
<p>vue create hello-world 后面的 hello-world 是项目名称,可以自行定义<br>
安装中的选项：<br>
新手先选择最后一个选项<br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/11/1139446198.png" alt="QQ截图20181107224457.png"><br>
Liner 是语法检查,特别的严格,只要有多点空格回车就会报警告,如果不需要就取消掉<br>
上下键控制选择 Liner 的选项,按空格是取消,回车是执行下一步,如果出错了连续按两次 ctrl 加 c 退出重新来一遍就好<br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/11/1916656905.png" alt="QQ截图20181107224553.png"><br>
然后后面碰到的一路 y 就可以了,取名字也是随意<br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/11/2646669564.png" alt="QQ截图20181107224641.png"><br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/11/1413786429.png" alt="QQ截图20181107224717.png"><br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/11/4066170144.png" alt="QQ截图20181107224758.png"><br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/11/2807254052.png" alt="QQ截图20181107224814.png"></p>
</blockquote>
<hr>
<p>安装完毕之后可以打开 <a href="http://ReadMe.md" target="_blank" rel="noopener">ReadMe.md</a> 文件查看<br>
在项目路径打开命令行工具 输入 npm run serve 即可开启服务器 输入 localhost:8080 就能看到你的第一个 vue 项目了<br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/11/1076575047.png" alt="QQ截图20181107225434.png"></p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>keep-alive的使用方法(errorCaptured拓展)</title>
    <url>/2018/02/17/2018-02-17-keep-alive%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95(errorCaptured%E6%8B%93%E5%B1%95)/</url>
    <content><![CDATA[<p>在单页面应用(Single Page Application)中,我们需要多个 tab 页中不断切换。同时,用户在某个页面中输入了数据,在提交前切换到了另一个页面,但是他的数据必须要保留,我们使用的 v-if 作为判断时,每次切换都会重新走一遍实例的生命周期,所以我们不能让页面进行销毁,这样用户的之前的数据丢失会很没有用户体验<br>
这时候需要用到<code>keep-alive</code>来缓存数据,阻止生命周期销毁</p>
<hr>
<p>在下面这个实例中,三个按钮分别切换三个页面,用 keep-alive 标签包裹即可使得页面不进行销毁</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"aAction()"</span>&gt;</span>a<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"bAction()"</span>&gt;</span>b<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"cAction()"</span>&gt;</span>c<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- keep-alive缓存包裹的组件：</span></span><br><span class="line"><span class="comment">        在组件将要销毁时，将组件对象读取到缓存中，就不会执行销毁。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-com</span> <span class="attr">v-if</span>=<span class="string">"comName=='a-com'"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">b-com</span> <span class="attr">v-if</span>=<span class="string">"comName=='b-com'"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">c-com</span> <span class="attr">v-if</span>=<span class="string">"comName=='c-com'"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> A <span class="keyword">from</span> <span class="string">"./coms/A"</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> B <span class="keyword">from</span> <span class="string">"./coms/B"</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> C <span class="keyword">from</span> <span class="string">"./coms/C"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="actionscript">      <span class="string">"a-com"</span>: A,</span></span><br><span class="line"><span class="actionscript">      <span class="string">"b-com"</span>: B,</span></span><br><span class="line"><span class="actionscript">      <span class="string">"c-com"</span>: C,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        comName: <span class="string">"a-com"</span>,</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      aAction() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.comName = <span class="string">"a-com"</span>;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      bAction() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.comName = <span class="string">"b-com"</span>;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      cAction() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.comName = <span class="string">"c-com"</span>;</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>A 组件</code><br>
deactivated 是在 A 组件隐藏时触发的,可以自定义一些事件<br>
比如银行安全性要求比较高的,当组件失去活跃状态超过固定时间时让用户重新登陆<br>
activated 是组件重新成为活跃状态,只要当组件在 <keep-alive> 内被切换，<br>
它的 activated 和 deactivated 这两个生命周期钩子函数将会被对应执行。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box a"</span>&gt;</span></span><br><span class="line">    A组件</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        message: <span class="string">""</span>,</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    activated() &#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">//组件成为活跃状态,组件从缓存中读取出来</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"activated"</span>);</span></span><br><span class="line">    &#125;,</span><br><span class="line">    deactivated() &#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">//组件失去活跃状态，组件从dom中删除。组件不会销毁，而进行缓存</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"deactivated"</span>);</span></span><br><span class="line">    &#125;,</span><br><span class="line">    errorCaptured() &#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">//捕获异常</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"A errorCaptured"</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>errorCaptured 是对子孙组件进行捕获异常<br>
当捕获一个来自子孙组件的错误时被调用。<br>
此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。<br>
此钩子可以<code>return false</code> 以阻止该错误继续向上传播。<br>
<code>简单的说就是它看不见自己的错误,他只会去批评比它更小一级的组件</code></p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>$ref的使用</title>
    <url>/2018/02/12/2018-02-12-$ref%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>ref 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 $refs 对象上。<br>
如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例</p>
<hr>
<p>这里需要注意的是 ref 绑定的值不要取名为一样的，给多个元素绑定的 ref 名字相同的话,只会找到最后一个 dom 对象,后面会覆盖前面的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>根组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">"h1"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">"h2"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">"h3"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">"h4"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    mounted() &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.h1);</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://www.cc12210.xyz/usr/uploads/2018/11/2073000328.png" alt="测试1"></p>
<a id="more"></a>
<p>有一个例外是如果使用 v-for 的话,添加的 ref 会成为一个数组</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"num in 5"</span> <span class="attr">:key</span>=<span class="string">"num"</span> <span class="attr">ref</span>=<span class="string">"plist"</span>&gt;</span></span><br><span class="line">  &#123;&#123;num&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://www.cc12210.xyz/usr/uploads/2018/11/1553811480.png" alt="测试2"></p>
<hr>
<p>ref 也可以加载组件上<br>
首先引入一个 Com.vue 组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"com"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        message: <span class="string">"这是com组件"</span>,</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com</span> <span class="attr">ref</span>=<span class="string">"com"</span>&gt;</span><span class="tag">&lt;/<span class="name">com</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://www.cc12210.xyz/usr/uploads/2018/11/213095723.png" alt="QQ截图20181108152131.png"><br>
然后根组件就可以访问这个子组件对象了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 访问子组件对象</span></span><br><span class="line"><span class="keyword">var</span> com = <span class="keyword">this</span>.$refs.com;</span><br><span class="line"><span class="comment">//对子组件属性进行访问</span></span><br><span class="line"><span class="built_in">console</span>.log(com.message);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>slot插槽的使用</title>
    <url>/2018/02/15/2018-02-15-slot%E6%8F%92%E6%A7%BD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>当我们在一个根组件中引入了子组件,然后子组件中的内容是由子组件进行渲染的,往子组件的标签中插入内容是无效的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">比如本次例子中引入了一个wrap组件</span><br><span class="line"><span class="tag">&lt;<span class="name">wrap</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>新增的内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  //自行添加进组件的内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">wrap</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在页面进行渲染的时候,这个 h1 并不会出现,因为它会被 wrap 组件中的内容给覆盖掉</p>
<a id="more"></a>
<hr>
<p>那么我们如果又想引入 wrap 组件的内容,又想保留自己添加进去的内容怎么办呢？<br>
这个时候就需要用到<code><slot/></code>了<br>
<code>wrap 中的内容</code><br>
只需在 wrap 组件中加一个 slot 即可,值得注意的是这个 slot 类似于模板一样,可以将根组件中的<code><wrap></wrap></code>标签中的新的内容看作为一个模板,在 wrap 组件中每多写一个 slot 标签,就会多生成一次模板中的内容,位置的先后也是根据 slot 标签的位置所呈现</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> /&gt;</span> //内容的位置根据slot的位置决定</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>wrap的h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> /&gt;</span> //多次写会多次呈现wrap标签中新增的内容 上面案例就是那个新增的h1标签</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>slot 中的内容也可以是组件,效果是一样的<br>
<code>slot 可以添加 name 属性</code><br>
继续上面的例子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">wrap</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">slot</span>=<span class="string">"newInfo"</span>&gt;</span>新增的内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">wrap</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>wrap的h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"newInfo"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们可以看到在 wrap 标签中的 h1 加了一个<code>slot=“newInfo”</code><br>
对应的 wrap 组件中的 slot 也加了一个<code>name=“newInfo”</code><br>
如果在新增的内容中添加了一个<code>slot=“值”</code><br>
如果你想呈现他,就必须在使用 slot 时给 slot 加一个<code>name=“一样的名字”</code>,如果不加就无法呈现</p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue路由基础</title>
    <url>/2018/02/19/2018-02-19-vue%E8%B7%AF%E7%94%B1%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1>介绍</h1>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vue-router 就是路由，地址栏输什么，到什么页面</span><br><span class="line">可以理解为通过地址栏的url来实现组件的切换</span><br><span class="line">而且vue-router可以通过html5的history实现单页面应用</span><br><span class="line">不刷新跳转，你切地址，只是页面上的组件的切换。</span><br><span class="line">另外vue-router还可以实现页面间传参等其他功能。</span><br></pre></td></tr></table></figure>
<h1>安装</h1>
<p>使用脚手架创建项目的时候,需要配置一下选项,勾选路由<br>
<code>自定义配置</code><br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/11/2829399723.png" alt="自定义配置"><br>
<code>勾选路由</code><br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/11/888195747.png" alt="勾选路由"><br>
后续操作和之前一样,就可以完成创建了</p>
<h2 id="more"><a id="more"></a></h2>
<p>之前我们在进行组件切换的时候是将组件引入至根组件 App.vue 中<br>
而我们现在可以将子组件放置到路由中,就是项目中新增的 router.js<br>
至于实现,我们的 main.js 已经帮我们配置好了<br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/11/1175876482.png" alt="路由配置"><br>
项目结构<br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/11/1703102405.png" alt="项目结构"></p>
<hr>
<p>我们将 views 目录下的三个组件引入至路由中<br>
<coed>router.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="comment">//引入三个组件</span></span><br><span class="line"><span class="keyword">import</span> Acom <span class="keyword">from</span> <span class="string">'./views/Acom.vue'</span></span><br><span class="line"><span class="keyword">import</span> Bcom <span class="keyword">from</span> <span class="string">'./views/Bvom.vue'</span></span><br><span class="line"><span class="keyword">import</span> Ccom <span class="keyword">from</span> <span class="string">'./views/Cvom.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用路由插件</span></span><br><span class="line">Vue.use(Router)</span><br><span class="line"><span class="comment">//向外输出路由对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="comment">// 配置路由</span></span><br><span class="line">  routes: [&#123;</span><br><span class="line">      <span class="comment">//配置这项路由显示的组件</span></span><br><span class="line">      component: Acom,  <span class="comment">//组件名</span></span><br><span class="line">      path: <span class="string">'/path-a'</span>   <span class="comment">//path的设置为url的地址,其中/为根路径的意思</span></span><br><span class="line">      alias:<span class="string">'other-a'</span>   <span class="comment">//alias是别名  类似于小名,进入这两个url是等价的</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      component:Bcom,</span><br><span class="line">      path:<span class="string">'/path-b'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      component:Ccom,</span><br><span class="line">      path:<span class="string">'/path-c'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path:<span class="string">'**'</span>,  <span class="comment">//地址重定向</span></span><br><span class="line">      redirect:<span class="string">'/path-a'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alias:<span class="string">'other-a'</span>   <span class="comment">//alias是别名  类似于小名,进入这两个url是等价的</span></span><br><span class="line">在有path的情况下你也可以再写一个别名,效果等价</span><br><span class="line">&#123;</span><br><span class="line">      path:<span class="string">'**'</span>,  <span class="comment">//地址重定向</span></span><br><span class="line">      redirect:<span class="string">'/path-a'</span></span><br><span class="line">&#125;</span><br><span class="line">有点类似与<span class="keyword">switch</span>语句一样,从上而下进行判断,如果上面都不符合就走最后的默认</span><br><span class="line">所以地址的重定向和别名不同,重定向必须写最下面</span><br></pre></td></tr></table></figure>
<p>ABC 三个子组件只有颜色和名字不同</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>a组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.a</span> &#123;</span></span><br><span class="line">    background: skyblue;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后在 App.vue 中就可以使用<router-view/>占位符进行显示了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/path-a"</span>&gt;</span>a<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/path-b"</span>&gt;</span>b<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/path-c"</span>&gt;</span>c<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/path-a"</span>&gt;</span>a<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/path-b"</span>&gt;</span>b<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/path-c"</span>&gt;</span>c<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用router-view标签占位符显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  a &#123;</span><br><span class="line">    padding: 10px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.router-link-active</span> &#123;</span></span><br><span class="line">    background: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面我们可以注意到的是有三个 a 标签和三个 router-link 标签,他们在页面上的显示效果是一样的<br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/11/3331021678.png" alt="演示"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">不同的地方在于,router-link解析出来的标签会在你点击的时候帮你添加两个属性</span><br><span class="line">a标签中需要填写的路径需要多一个#，而router-link只需要斜杠</span><br><span class="line">那么我们给点击添加后的属性加点背景颜色不就可以提醒用户他们点击的是哪一个了嘛</span><br><span class="line">推荐使用第二个router-link-active来使用css</span><br><span class="line">因为router-link-exact-active是进行精确匹配,路径不完全匹配可能不会生效</span><br></pre></td></tr></table></figure>
<h2 id="实现"><img src="http://www.cc12210.xyz/usr/uploads/2018/11/2987796449.png" alt="实现"></h2>
<h1>配置路由需要注意的点</h1>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">如果子组件下还有子组件进行链接跳转的话;</span><br><span class="line">在a组件的配置内加入children为一个数组, 数组中继续配置component和path;</span><br><span class="line">但是这个path不需要加斜杠, 斜杠 / 代表的是根路径的意思;</span><br><span class="line">然后我们router - link中的链接就为 / path - a / XXX组件;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="comment">// 配置路由</span></span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//配置这项路由显示的组件</span></span><br><span class="line">      component: Acom,</span><br><span class="line">      path: <span class="string">"/path-a"</span>,</span><br><span class="line">      children: [(component: XXX组件), (path: <span class="string">"xxx"</span>)],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue路由$route的传参</title>
    <url>/2018/02/21/2018-02-21-vue%E8%B7%AF%E7%94%B1$route%E7%9A%84%E4%BC%A0%E5%8F%82/</url>
    <content><![CDATA[<h1>路由的传参方式有很多种</h1>
<h2 id="这里先介绍一下通过-route-传参">这里先介绍一下通过$route 传参</h2>
<hr>
<h1>使用$route，注意：这个是$route 不是$router</h1>
<h3 id="route是路由的数据-router为VueRouter的实例，相当于一个全局的路由器对象，里面含有很多属性和子对象，例如history对象。。。经常用的跳转链接就可以用this-router-push，和-router-link-跳转一样。route-相当于当前正在跳转的路由对象。。可以从里面获取-name-path-params-query-等。">$route是路由的数据,router为VueRouter的实例，相当于一个全局的路由器对象，里面含有很多属性和子对象，例如history对象。。。经常用的跳转链接就可以用this.$router.push，和 router-link 跳转一样。route 相当于当前正在跳转的路由对象。。可以从里面获取 name,path,params,query 等。</h3>
<p>首先你需要在对路由的 path 配置进行更改<br>
在 path 的配置中你需要在 path 后面配置好,若设置了一个那就传一个</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">routes: [</span><br><span class="line">  &#123;</span><br><span class="line">    component: Home,</span><br><span class="line">    path: <span class="string">"/home"</span>,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">"detail/:name"</span>, <span class="comment">//在配置路径时后面加/:想要传递的字段,可以添加任意个数</span></span><br><span class="line">        component: Detail,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<h2 id="Home-vue-这个是需要传递参数的组件">Home.vue 这个是需要传递参数的组件</h2>
<p>使用 router-link 的 to 属性传值,这个 good。title 是下面的商品名称,需要进行一下字符串拼接</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">:to=<span class="string">"'/home/detail/'+good.title"</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span> <span class="attr">id</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">app-header</span> <span class="attr">title</span>=<span class="string">"首页"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content hasTitle"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"item"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:to</span>=<span class="string">"'/home/detail/'+good.title"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-for</span>=<span class="string">"good in goodList"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:key</span>=<span class="string">"good.id"</span></span></span><br><span class="line"><span class="tag">          &gt;</span></span><br><span class="line">            &#123;&#123;good.title&#125;&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        goodList: [</span><br><span class="line"><span class="actionscript">          &#123; title: <span class="string">"鞋子"</span>, id: <span class="string">"9981"</span>, price: <span class="string">"98"</span> &#125;,</span></span><br><span class="line"><span class="actionscript">          &#123; title: <span class="string">"袜子"</span>, id: <span class="string">"23181"</span>, price: <span class="string">"15"</span> &#125;,</span></span><br><span class="line"><span class="actionscript">          &#123; title: <span class="string">"牙膏"</span>, id: <span class="string">"0121"</span>, price: <span class="string">"20"</span> &#125;,</span></span><br><span class="line"><span class="actionscript">          &#123; title: <span class="string">"毛巾"</span>, id: <span class="string">"20001"</span>, price: <span class="string">"30"</span> &#125;,</span></span><br><span class="line"><span class="actionscript">          &#123; title: <span class="string">"运动鞋"</span>, id: <span class="string">"71777"</span>, price: <span class="string">"398"</span> &#125;,</span></span><br><span class="line">        ],</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Detail-vue-接收参数的组件">Detail.vue 接收参数的组件</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page subpage"</span> <span class="attr">id</span>=<span class="string">"detail"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app-header</span> <span class="attr">:title</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content hasTitle"</span>&gt;</span></span><br><span class="line">      详情</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        title: <span class="keyword">this</span>.$route.params.name,</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$route);</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>接收就只需要使用 <a href="http://this.params.name" target="_blank" rel="noopener">this.params.name</a> 就可以获取到这个值了<br>
我们可以对这个 this.$route 进行打印,看看它到底是什么<br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/11/1697960622.png" alt="演示1"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">这个<span class="keyword">this</span>.$route打印出来了很多对象, 有一个params对象中存了一个name;</span><br><span class="line">这个就是我们在path中设定好的值, 如果配置了多个值都会在这个params对象中;</span><br></pre></td></tr></table></figure>
<p><img src="http://www.cc12210.xyz/usr/uploads/2018/11/2621398748.png" alt="演示2"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">再掉头来看看我们的浏览器的url;</span><br><span class="line">我们会发现这个$route其实就是帮我们解析了url从而获取到了参数;</span><br></pre></td></tr></table></figure>
<p>如果我们在传参的时候添加了问号和后面的值呢?</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">:to=<span class="string">"'/home/detail/'+good.title+'?name=cc&amp;password=123'"</span></span><br></pre></td></tr></table></figure>
<p>那么我们就会看到它帮我们存在了 query 对象中,依然是通过 this.$route 对象就能获取的到<br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/11/4035476731.png" alt="演示3"><br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/11/3058607013.png" alt="演示4"></p>
<h1>值得注意的是：</h1>
<h2 id="如果在路由中配置了-参数-那么这个参数是必传的-如果不传或多传将无法进入对应组件-query-则是可选">如果在路由中配置了 /:参数 那么这个参数是必传的,如果不传或多传将无法进入对应组件,query 则是可选</h2>
<hr>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>transition vue动画</title>
    <url>/2018/03/01/2018-03-01-transition_vue%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h1>transition 的用法</h1>
<p>对于某些组件或者元素,我们希望出现一些动画效果<br>
只需要用 transition 将需要有动画效果的元素包裹起来即可。<br>
如果一个页面有多个元素需要动画效果,则使用 transition-group</p>
<hr>
<p>需要注意的是这里的 name 值是自定义的<br>
例如：name: ‘ani’ 将自动拓展为.ani-enter，.ani-enter-active 等</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- transition组件包裹会显示以及隐藏的标签,并且设置name值</span></span><br><span class="line"><span class="comment">       在标签显示时,会添加class</span></span><br><span class="line"><span class="comment">       [name]-enter</span></span><br><span class="line"><span class="comment">       [name]-enter-to</span></span><br><span class="line"><span class="comment">       [name]-enter-active</span></span><br><span class="line"><span class="comment">       [name]-leave</span></span><br><span class="line"><span class="comment">       [name]-leave-to</span></span><br><span class="line"><span class="comment">       [name]-leave-active</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"ani"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">v-if</span>=<span class="string">"isShow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后你就可以在 css 中定义相对应的动画了</p>
<a id="more"></a>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.ani-enter</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ani-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ani-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>图解一下这几个自动的 class 类名<br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/11/3981776621.png" alt="20170120225015197.png"><br>
enter 和 leave 都只有一瞬间,enter-to 和 leave-to 是过程,<br>
而 enter-active 和 leave-active 是全部过程</p>
<hr>
<p>#自定义动画<br>
vue 中式允许我们自定义动画的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自定义class名字</span></span><br><span class="line"><span class="comment">        [name]-enter ===test</span></span><br><span class="line"><span class="comment">        enter-to-class="rotateIn animated"</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">"ani"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">enter-class</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">  <span class="attr">enter-to-class</span>=<span class="string">"slideInLeft animated"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">enter-active-class</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">  <span class="attr">leave-class</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">  <span class="attr">leave-to-class</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">  <span class="attr">leave-active-class</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">v-if</span>=<span class="string">"isShow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们可以引入 animated.css 的文件,使用动画库的动画,自定义属性上加入对应的名字即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">同时我们可以注意到的一点是animat.css给我们封装好的animated属性的动画事件是<span class="number">1</span>s</span><br><span class="line">但是在移动端上苹果的动画时间为<span class="number">300</span>ms  安卓为<span class="number">200</span>ms</span><br></pre></td></tr></table></figure>
<p>所以我们可以在 css 中进行动画时间的修改,当然 css 设置了动画时间之后自定义类名中就不需要添加 animated 的类名了</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//在css中设置更改</span><br><span class="line"><span class="selector-class">.slideInLeft</span> &#123;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">300ms</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>$slots获取插槽节点</title>
    <url>/2018/02/26/2018-02-26-$slots%E8%8E%B7%E5%8F%96%E6%8F%92%E6%A7%BD%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<p>这是一个 tab 标签组件,里面写了四个 tab-item 组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tabs</span> @<span class="attr">tabChange</span>=<span class="string">"handleTabChange"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tab-item</span> <span class="attr">name</span>=<span class="string">"首页"</span>&gt;</span><span class="tag">&lt;/<span class="name">tab-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tab-item</span> <span class="attr">name</span>=<span class="string">"热门"</span>&gt;</span><span class="tag">&lt;/<span class="name">tab-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tab-item</span> <span class="attr">name</span>=<span class="string">"表现"</span>&gt;</span><span class="tag">&lt;/<span class="name">tab-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tab-item</span> <span class="attr">name</span>=<span class="string">"设置"</span>&gt;</span><span class="tag">&lt;/<span class="name">tab-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tabs</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>tab 组件的内容,打印一下这个$slots</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"tabs"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  mounted() &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$slots)  <span class="comment">//在生命周期的mounted中打印一下这个$slots</span></span></span><br><span class="line"><span class="actionscript">     <span class="keyword">this</span>.$slots.default[<span class="number">0</span>].componentInstance.isActive = <span class="literal">true</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>我们可以看到 default 为一个数组对象,并且将四个 tab-item 的虚拟 dom 节点打印了出来<br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/11/129165619.png" alt="数组对象"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">我们需要注意的是两个值</span><br><span class="line">componentInstance和elm</span><br><span class="line">我们可以通过<span class="keyword">this</span>.$slots.default[<span class="number">0</span>].componentInstance获取</span><br><span class="line">componentInstance是可以获取到的tab-item组件上挂载的data属性 比如tab-item上的isActive</span><br><span class="line">而<span class="keyword">this</span>.$slots.default[<span class="number">0</span>].elm是可以获取到这个元素节点的</span><br></pre></td></tr></table></figure>
<p><img src="http://www.cc12210.xyz/usr/uploads/2018/11/1468732886.png" alt="演示1"><br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/11/2698897389.png" alt="演示2"><br>
tab-item 中的内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"tab"</span> <span class="attr">:class</span>=<span class="string">"&#123;active:isActive&#125;"</span> @<span class="attr">click</span>=<span class="string">"clickActive"</span>&gt;</span></span><br><span class="line">    &#123;&#123;name&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">"tab-item"</span>,</span></span><br><span class="line">    props: &#123;</span><br><span class="line"><span class="javascript">      name: <span class="built_in">String</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        isActive: <span class="literal">false</span>,</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      clickActive() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$parent.cancelTabActive(<span class="keyword">this</span>.name);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.isActive = <span class="literal">true</span>;</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.active</span> &#123;</span></span><br><span class="line">    background: dodgerblue;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.tabs</span> <span class="selector-class">.tab</span> &#123;</span></span><br><span class="line">    flex: 1;</span><br><span class="line">    line-height: 49px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">值得注意的是：</span><br><span class="line">如果两者为父子组件关系,子组件想使用父组件的方法可以直接</span><br><span class="line"><span class="keyword">this</span>.$parent.对应的方法名(可以传递值过去);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>解忧杂货店</title>
    <url>/2018/03/02/2018-03-02-%E8%A7%A3%E5%BF%A7%E6%9D%82%E8%B4%A7%E5%BA%97/</url>
    <content><![CDATA[<p><strong>摘自简书</strong><br>
你心里也有一个解忧杂货店</p>
<hr>
<p>合上这本书，故事的情节很快就淡去了，像被风吹散了似的。只有一句话久久忘不掉。</p>
<a id="more"></a>
<p>每个人心里都有一个解忧杂货店，助己<br>
浪矢爷爷说：</p>
<p>我谘商多年，终于了解到一件事。通常谘商者心里已经有了答案，找人谘商的目的，只是为了确认这个答案是正确的。</p>
<p>这句话像不像常听到的一句话？</p>
<p>“当你拿不定注意的时候可以扔硬币。倒不是说扔硬币真的可以给你指条明路，而是说当你把这枚硬币抛起来的时候，选择的答案已经浮现在心里。”</p>
<p>这是一间神奇的杂货店，从前门投信，马上就从后门的牛奶箱里收到回信。</p>
<p>在我看来，杂货店的神奇回信速度可以有这样一种解释。</p>
<p>解忧杂货店不在别处，它就是你自己的心房中的小小的一间。所以当你提笔写信的时候，答案自然很快就浮现在眼前了。</p>
<p>《解忧杂货店》真的是治愈系的。</p>
<p>平日里一肚子令人惊叹的悬疑故事构思的大叔，偶尔暖起来，还真让人甜的受不了。</p>
<p>每个人都是解忧杂货店的店主，助人<br>
在写这篇小文的时候，我和妈妈正坐着专车打算去转乘轻轨。</p>
<p>上车之前妈妈便和我唠叨这个司机是个新手，这是他的第一单。</p>
<p>上车以后，司机不好意思地说“我第一次开这个车，不知道怎么弄，你们久等了”。妈妈不但没有出言埋怨，反而以超乎想象的热情告诉司机怎么样操作。“先确认到达，再确认出发，等送到啦一定要确认乘客到达，不然收不到车费，接不到下一单的哦。”司机听一遍好像还不是很懂，妈妈又不厌其烦地讲了第二遍和第三遍直到我们下车。</p>
<p>妈妈把她的耐心和善心给了一位陌生的司机，这种感觉让我无比熟悉。</p>
<p>对，浪矢爷爷不是也是这样的吗？</p>
<p>最开始他接到的信，更多的是小孩子的玩笑。比如“不想复习，也不像作弊，怎么样才能考一百分”之类的。不管对方的问题是认真，还是看上去“无聊”，浪矢爷爷都以最善良的心给出最真诚的答案。</p>
<p>每个人心里都有一个解忧杂货店，每个人都可以是最善良的店主，在助己的同时助人。</p>
<p>当初，莫名想要走近大名鼎鼎的东野圭吾。当我把他的三部畅销作品《白夜行》、《嫌疑人 X 的献身》和《解忧杂货店》摆在眼前的时候，我纠结的是从哪一本下手比较好。</p>
<p>事实证明，我选择的顺序不错。</p>
<p>先读《白夜行》佩服东野圭吾的小说构思推理奇特，感叹“孩子的错都是大人的错”，郁闷了一晚上。</p>
<p>再读《嫌疑人 X 的献身》，觉得这样的爱情有些可怕，恐惧了一个晚上。</p>
<p>这两本书观照现实，可现实冷酷，好像有点将人打倒在地站不起来。最后读的这本，让我知道现实中虽然有很多烦恼，但好在解决的了。人可以自助，解自己的心结。人也可以助人，以善待人，以诚观人。</p>
<p>心心相连，暖心之网<br>
《解忧杂货店》身上有东野圭吾其它作品的影子，非常注重小故事与小故事之间，以及人物与人物之间的关联。作者的这种全局观，让人时常有啧啧称奇的感觉。不管是《嫌疑人 X 的献身》的螺旋结构，还是《白夜行》的平行结构，或者是《解忧杂货店》的网状结构，都让读者觉得故事是立体的，有厚度的。</p>
<p>说来也很巧，既然解忧杂货店在每个人的心里，人与人的心相连，不正好是一张网吗？</p>
<p>作者：小雨向着幸福跑<br>
链接：<a href="https://www.jianshu.com/p/e5c8513f7157" target="_blank" rel="noopener">https://www.jianshu.com/p/e5c8513f7157</a><br>
來源：简书<br>
简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>iScroll.js的简单使用</title>
    <url>/2018/03/05/2018-03-05-iScroll.js%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1>安装</h1>
<h3 id="进入-iscroll-的-GitHub-下载文件-a-href-https-github-com-cubiq-iscroll-iScroll-a">进入 iscroll 的 GitHub 下载文件<a href="https://github.com/cubiq/iscroll/" target="_blank" rel="noopener">iScroll</a></h3>
<p>下载完成之后进入文件夹下的 build 文件夹<br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/11/3724108514.png" alt="演示1"><br>
里面这五个文件都是有着不同的用处的</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">iscroll.js，这个版本是常规应用的脚本。它包含大多数常用的功能，有很高的性能和很小的体积。</span><br><span class="line">iscroll-lite.js，精简版本。它不支持快速跳跃，滚动条，鼠标滚轮，快捷键绑定。但如果你所需要的是滚动(特别是在移动平台) iScroll 精简版 是又小又快的解决方案。</span><br><span class="line">iscroll-probe.js，探查当前滚动位置是一个要求很高的任务,这就是为什么我决定建立一个专门的版本。如果你需要知道滚动位置在任何给定的时间,这是iScroll给你的。（我正在做更多的测试,这可能最终在常规iscroll.js脚本，请留意）。</span><br><span class="line">iscroll-zoom.js，在标准滚动功能上增加缩放功能。</span><br><span class="line">iscroll-infinite.js，可以做无限缓存的滚动。处理很长的列表的元素为移动设备并非易事。 iScroll infinite版本使用缓存机制,允许你滚动一个潜在的无限数量的元素。</span><br></pre></td></tr></table></figure>
<h3 id="我们目前先用最常规的脚本">我们目前先用最常规的脚本</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./style.css"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 滚动视图,大小固定，overflow:hidden --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 滚动容器包裹滚动内容,高度被内容撑开的，宽度需要设置，不设置就是100% --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 滚动容器需要放置在滚动视图的第一个子元素中 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 需要滚动的内容 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"banner"</span>&gt;</span>banner<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"category"</span>&gt;</span>category<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hot"</span>&gt;</span>hot<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">onclick</span>=<span class="string">"testFunc()"</span>&gt;</span>list<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"activity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"tabs"</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src="build/iscroll-probe.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"build/iscroll.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 创建滚动视图</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 参数1：选择器，dom对象</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 参数2：滚动视图的配置项</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> myScroll = <span class="keyword">new</span> IScroll(<span class="string">".content"</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        bounce: <span class="literal">true</span>, <span class="comment">//弹簧效果，默认为true</span></span></span><br><span class="line"><span class="actionscript">        click: <span class="literal">true</span>, <span class="comment">//默认为false, 识别滚动视图内部的点击事件</span></span></span><br><span class="line"><span class="actionscript">        tap: <span class="literal">true</span>, <span class="comment">//默认为false, 识别滚动视图内部的移动端点击事件</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//scrollbars: true, //是否出现滑动条</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//fadeScrollbars: true, //与scrollbars搭配使用,在没有滑动的时候滑动条隐藏</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// interactiveScrollbars: true,//是否通过滑动条滑动页面</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//x，y轴初始位置</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//startX: 0,</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//startY: -200,</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//x，y轴是否可以滚动，x轴默认false，y轴默认true</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//scrollX: true,</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//scrollY: true,</span></span></span><br><span class="line"><span class="actionscript">        probeType: <span class="number">3</span>, <span class="comment">//1,2,3</span></span></span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">44px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tabs</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">49px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">44px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">49px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.banner</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">160px</span>;</span><br><span class="line">  <span class="attribute">background</span>: palegoldenrod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.category</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">background</span>: palegreen;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.hot</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">background</span>: paleturquoise;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.list</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">background</span>: palevioletred;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.activity</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">background</span>: papayawhip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="上面是一个简单的-demo-页面-引入了-iscroll-结构-使用的时候注意你的-iscroll-插件的引入路径">上面是一个简单的 demo 页面,引入了 iscroll 结构,使用的时候注意你的 iscroll 插件的引入路径</h3>
<h4 id="content-的-div-需要设置为-overflow-hidden">content 的 div 需要设置为 overflow:hidden</h4>
<h4 id="iscroll-是通过-translate-的-Y-轴移动来实现无滑动条滚动的">iscroll 是通过 translate 的 Y 轴移动来实现无滑动条滚动的</h4>
<h2 id="slide-gif"><img src="http://www.cc12210.xyz/usr/uploads/2018/11/2131624701.gif" alt="slide.gif"></h2>
<h3 id="使用介绍">使用介绍</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">使用方法和swiper.js有点类似,首先先进行实例化</span><br><span class="line"><span class="keyword">var</span> myScroll = <span class="keyword">new</span> IScroll(<span class="string">'.content'</span>, &#123;</span><br><span class="line">     <span class="comment">//这样你就已经完成了回弹的效果了</span></span><br><span class="line">)&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="剩下的就是在里面写配置项就-OK-了-基础的功能还是比较方便使用的">剩下的就是在里面写配置项就 OK 了,基础的功能还是比较方便使用的</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">bounce: <span class="literal">true</span>,<span class="comment">//弹簧效果，默认为true</span></span><br><span class="line">click: <span class="literal">true</span>,<span class="comment">//默认为false, 识别滚动视图内部的点击事件</span></span><br><span class="line">tap: <span class="literal">true</span>,<span class="comment">//默认为false, 识别滚动视图内部的移动端点击事件</span></span><br><span class="line">scrollbars: <span class="literal">true</span>,<span class="comment">//是否出现滚动条</span></span><br><span class="line">fadeScrollbars: <span class="literal">true</span>,<span class="comment">//与scrollbars配合使用,不滑动时隐藏滚动条</span></span><br><span class="line"><span class="comment">// interactiveScrollbars: true,//是否可以通过滑动滚动条来滑动页面</span></span><br><span class="line"><span class="comment">//x，y轴初始位置</span></span><br><span class="line"><span class="comment">//startX: 0,</span></span><br><span class="line"><span class="comment">//startY: -200,</span></span><br><span class="line"><span class="comment">//x，y轴是否可以滚动，x轴默认false，y轴默认true</span></span><br><span class="line"><span class="comment">//scrollX: true,</span></span><br><span class="line"><span class="comment">//scrollY: true,</span></span><br></pre></td></tr></table></figure>
<h2 id="需要单独说明的是四个配置项">需要单独说明的是四个配置项</h2>
<h3 id="scrollbars-可以配合-fadeScrollbars-使用-否则滚动条一直存在很影响用户体验">scrollbars 可以配合 fadeScrollbars 使用,否则滚动条一直存在很影响用户体验</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">scrollbars: <span class="literal">true</span>,<span class="comment">//是否出现滚动条</span></span><br><span class="line">fadeScrollbars: <span class="literal">true</span>,<span class="comment">//与scrollbars配合使用,不滑动时隐藏滚动条</span></span><br></pre></td></tr></table></figure>
<h2 id="在移动端你需要将两个配置项设置为-true">在移动端你需要将两个配置项设置为 true</h2>
<h3 id="如果没有设置的话在移动设备上的-click-事件会失效">如果没有设置的话在移动设备上的 click 事件会失效</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">click: <span class="literal">true</span>,<span class="comment">//默认为false, 识别滚动视图内部的点击事件</span></span><br><span class="line">tap: <span class="literal">true</span>,<span class="comment">//默认为false, 识别滚动视图内部的移动端点击事件</span></span><br></pre></td></tr></table></figure>
<h3 id="滑动的状态-在不同状态实现不同的代码">滑动的状态,在不同状态实现不同的代码</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.contetnScroll = <span class="keyword">new</span> IScroll(<span class="keyword">this</span>.$refs.content, &#123;</span><br><span class="line">  <span class="comment">//滑动进行中可以配置</span></span><br><span class="line">  probeType: <span class="number">3</span>, <span class="comment">//1,2,3  三个等级,等级越高灵敏度越高,越消耗性能</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">this</span>.contetnScroll.on(<span class="string">"beforeScrollStart"</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"滑动刚开始"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">this</span>.contetnScroll.on(<span class="string">"scroll"</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"滑动进行中"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">this</span>.contetnScroll.on(<span class="string">"scrollEnd"</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"滑动结束"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>iscroll</tag>
      </tags>
  </entry>
  <entry>
    <title>vue路由中的前进后退和跳转</title>
    <url>/2018/02/27/2018-02-27-vue%E8%B7%AF%E7%94%B1%E4%B8%AD%E7%9A%84%E5%89%8D%E8%BF%9B%E5%90%8E%E9%80%80%E5%92%8C%E8%B7%B3%E8%BD%AC/</url>
    <content><![CDATA[<p>在我们的 app 中,最常见的功能应该就是后退了。<br>
我们将这几个路由的这几个方法打印出来可以得到</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(router);</span><br><span class="line"><span class="built_in">console</span>.log(router.push); <span class="comment">//进入指定路径，有历史记录</span></span><br><span class="line"><span class="built_in">console</span>.log(router.replace); <span class="comment">//使用指定的路径替换当前的路径。当前的路径就没有记录在历史记录中</span></span><br><span class="line"><span class="built_in">console</span>.log(router.go); <span class="comment">//跳转页面</span></span><br><span class="line"><span class="built_in">console</span>.log(router.back); <span class="comment">//返回</span></span><br><span class="line"><span class="built_in">console</span>.log(router.forward); <span class="comment">//前进</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">push就是进入指定的页面留下历史记录,然后我们按浏览器的返回就是回到上一页</span><br><span class="line">replace就是替换上一次的记录,也就是不会有历史纪录,无痕</span><br><span class="line">go(n)后面可以跟数字,跳转页面,正数就是前进,负数后退</span><br><span class="line">back就是返回,等价于go(<span class="number">-1</span>)</span><br><span class="line">forward前进,等价于go(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><img src="http://www.cc12210.xyz/usr/uploads/2018/11/1098103371.png" alt="演示"></p>
<hr>
<p>###我们在某个子组件中添加了一个按钮,当我们从它的父组件进入之后,点击该按钮我们就能回到上一次的历史记录中,其他几个方法用法类似</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;button @click=<span class="string">"$router.go(-1)"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"back"</span>&gt;返回&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex的简单使用</title>
    <url>/2018/03/16/2018-03-16-Vuex%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Vuex-介绍">Vuex 介绍</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。</span><br><span class="line">它采用集中式存储管理应用的所有组件的状态，</span><br><span class="line">并以相应的规则保证状态以一种可预测的方式发生变化。</span><br><span class="line">简单来说就是Vuex是一个公共的存储仓库,当你在这里面定义公共值时,</span><br><span class="line">你的vue实例引入之后每个组件都可以使用公共的值</span><br></pre></td></tr></table></figure>
<h3 id="首先我们来看看-Vuex-的基本结构">首先我们来看看 Vuex 的基本结构</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="comment">//放置全局的数据</span></span><br><span class="line">  state: &#123;</span><br><span class="line">    a:<span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    <span class="comment">//相当于vue中的计算属性</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//直接修改state的值</span></span><br><span class="line">  mutations: &#123;</span><br><span class="line">    changeState(state, params)&#123;</span><br><span class="line">      state.a = params;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"> 通过调用mutations的方法修改state的值</span><br><span class="line">  actions: &#123;</span><br><span class="line">    change(context, params)&#123;</span><br><span class="line">      context.commit(<span class="string">'changeState'</span>, params);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、我们可以通过 <span class="keyword">this</span>.$store 在vue的组件中获取vuex的实例。</span><br><span class="line"><span class="number">2</span>、State ： vuex中的公共值，我们可以通过 <span class="keyword">this</span>.$store.state 获取</span><br><span class="line">我们在vuex中声明的全局变量的值。</span><br><span class="line"><span class="number">3</span>、getters： 相当于vue中的computed计算属性， 可以用于监听、</span><br><span class="line">计算 state中的值的变化</span><br><span class="line"><span class="number">4</span>、mutations 直接操作state的值</span><br><span class="line"><span class="number">5</span>、actions 通过commit来操作mutations的值</span><br></pre></td></tr></table></figure>
<p>当我们声明了 Vuex 之后,我们可以通过<code>this.$store.state</code>获得全局的变量</p>
<h3 id="需要注意的点">需要注意的点</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">在我们使用全局变量时,我们希望修改它时,不建议直接修改</span><br><span class="line"><span class="keyword">this</span>.$store.state.a = <span class="number">123</span>;  <span class="comment">//可以实现修改,但是不建议这么操作</span></span><br><span class="line">我们修改全局的流程是需要调用actions中的方法,然后actions调用mutations的方法实现</span><br><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'change'</span>, &#123;</span><br><span class="line">    <span class="comment">//将需要修改的值传过去</span></span><br><span class="line">&#125;);</span><br><span class="line">当actions的方法触发时,我们在进行触发mutations中的方法</span><br><span class="line">actions: &#123;</span><br><span class="line">    change(context, params)&#123;</span><br><span class="line">      context.commit(<span class="string">'changeState'</span>, params);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">然后mutations就可以拿到相应的值进行修改了</span><br><span class="line">mutations: &#123;</span><br><span class="line">    changeState(state, params)&#123;</span><br><span class="line">      state.a = params;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<h3 id="这么做的原因是因为-vue-中的单向数据流-数据的改变由数据源操作，这样在数据发生错误时也会方便修改错误">这么做的原因是因为 vue 中的单向数据流,数据的改变由数据源操作，这样在数据发生错误时也会方便修改错误</h3>
<h3 id="公共的值改变-其他所有引用的地方都会一起改变">公共的值改变,其他所有引用的地方都会一起改变</h3>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript的垃圾回收机制</title>
    <url>/2018/04/03/2018-04-03-JavaScript%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h3 id="标记清除（mark-and-sweep）">标记清除（mark and sweep）</h3>
<p>这是 JavaScript 最常见的垃圾回收方式。当变量进入执行环境的时候，比如在函数中声明一个变量，垃圾回收器将其标记为“进入环境”。当变量离开环境的时候（函数执行结束），将其标记为“离开环境”。</p>
<p>垃圾回收器会在运行的时候给存储在内存中的所有变量加上标记，然后去掉环境中的变量，以及被环境中变量所引用的变量（闭包）的标记。在完成这些之后仍然存在的标记就是要删除的变量。</p>
<h3 id="引用计数（reference-counting）">引用计数（reference counting）</h3>
<p>在低版本的 IE 中经常会发生内存泄漏，很多时候就是因为它采用引用计数的方式进行垃圾回收。</p>
<p>引用计数的策略是跟踪记录每个值被使用的次数。当声明了一个变量并将一个引用类型赋值给该变量的时候，这个值的引用次数就加 1。如果该变量的值变成了另外一个，则这个值的引用次数减 1。当这个值的引用次数变为 0 的时候，说明没有变量在使用，这个值没法被访问。</p>
<p>因此，可以将它占用的空间回收，这样垃圾回收器会在运行的时候清理引用次数为 0 的值占用的空间。</p>
<p>在 IE 中虽然 JavaScript 对象通过标记清除的方式进行垃圾回收，但是 BOM 与 DOM 对象是用引用计数的方式回收垃圾的。也就是说，只要涉及 BOM 和 DOM，就会出现循环引用问题。</p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>call、apply和bind的用法和区别</title>
    <url>/2018/04/04/2018-04-04-call%E3%80%81apply%E5%92%8Cbind%E7%9A%84%E7%94%A8%E6%B3%95%E5%92%8C%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h3 id="首先-三者的功能都是一样的-都是改变-this-指向">首先,三者的功能都是一样的,都是改变 this 指向</h3>
<h3 id="那么，什么是-this-指向呢">那么，什么是 this 指向呢</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">我们这里可以看到打印出来的值为<span class="literal">undefined</span>;</span><br><span class="line">因为<span class="keyword">this</span>指向的是函数的调用者,</span><br><span class="line">  这里是obj调用了这个函数,</span><br><span class="line">  那么它就会找obj中的a的值,</span><br><span class="line">  没有为<span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.fn(); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>
<h3 id="普通的函数调用时">普通的函数调用时</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">没有使用严格模式下, 函数没有声明调用者的话<span class="keyword">this</span>默认指向<span class="built_in">window</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//window</span></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="构造函数的调用模式">构造函数的调用模式</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span>一个函数时，背地里会将创建一个连接到prototype成员的新对象，同时<span class="keyword">this</span>会被绑定到那个新对象上</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 这里的this都指向实例</span></span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dot = <span class="keyword">new</span> Person(<span class="string">'Dot'</span>,<span class="number">2</span>)</span><br><span class="line">dot.sayAge()<span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<h2 id="call-和-apply">call 和 apply</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">call()：第一个参数是<span class="keyword">this</span>值没有变化，变化的是其余参数都直接传递给函数。传递给函数的参数逐个列举出来。</span><br><span class="line">apply() ：传递给函数的是参数数组</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">c, d</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b + c + d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> oop = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line">add.call(oop, <span class="number">3</span>, <span class="number">4</span>); <span class="comment">// 1 + 2 + 3 + 4 = 10</span></span><br><span class="line">add.apply(oop, [<span class="number">3</span>, <span class="number">4</span>]); <span class="comment">// 1 + 2 + 3 + 4 = 10</span></span><br></pre></td></tr></table></figure>
<h2 id="bind">bind</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">和call很相似，第一个参数是<span class="keyword">this</span>的指向，从第二个参数开始是接收的参数列表。区别在于bind方法返回值是函数以及bind接收的参数列表的使用。</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'cc'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">consoleName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> name2 = consoleName.bind(obj)</span><br><span class="line"><span class="built_in">console</span>.log(name2) <span class="comment">// 这个得出是一个函数体</span></span><br><span class="line">name2()  <span class="comment">// 执行函数</span></span><br><span class="line">需要注意的是：bind 方法不会立即执行，而是返回一个改变了上下文 <span class="keyword">this</span> 后的函数。所以原函数的consoleName的<span class="keyword">this</span>指向并不会被改变</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>音乐外链</title>
    <url>/2018/04/05/2018-04-05-%E9%9F%B3%E4%B9%90%E5%A4%96%E9%93%BE/</url>
    <content><![CDATA[<video src="http://gslb.miaopai.com/stream/6-055nNYB3uYmBMUjT4gqFvg8bYIadP8WZAoBQ__.mp4?vend=miaopai&ssig=51a61ef50427fdac2a179bb6df763a96&time_stamp=1540627301966" width="375" height="auto" controls="controls" style="width:630px">
  </video>
<p>视频引用了秒拍的资源地址,偶尔会失效，应该是设置了过期时间<br>
[1]: <a href="http://www.cc12210.xyz/usr/uploads/2018/10/3614353344.png" target="_blank" rel="noopener">http://www.cc12210.xyz/usr/uploads/2018/10/3614353344.png</a></p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>查看电脑连接过的WIFI密码</title>
    <url>/2018/04/13/2018-04-13-%E6%9F%A5%E7%9C%8B%E7%94%B5%E8%84%91%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%9A%84WIFI%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h2 id="电脑连接过别人的-WIFI，但是密码又想不起来了">电脑连接过别人的 WIFI，但是密码又想不起来了</h2>
<p>这个时候你需要通过 CMD 命令来查看你电脑的 WiFi 密码</p>
<h3 id="首先先复制下面这段代码">首先先复制下面这段代码</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> /f <span class="string">"skip=9 tokens=1,2 delims=:"</span> %i <span class="keyword">in</span> (<span class="string">'netsh wlan show profiles'</span>) <span class="keyword">do</span>  @echo %j | findstr -i -v echo | netsh wlan show profiles %j key=clear</span><br></pre></td></tr></table></figure>
<h3 id="按下-win-加-R-打开运行">按下 win 加 R 打开运行</h3>
<p><img src="http://www.cc12210.xyz/usr/uploads/2018/12/85062147.png" alt="运行.png"></p>
<h3 id="接下来将代码复制进命令行">接下来将代码复制进命令行</h3>
<p><img src="http://www.cc12210.xyz/usr/uploads/2018/12/4019267611.png" alt="命令行.png"><br>
回车执行</p>
<h3 id="第一个箭头的等号分割是一个连接过的信息，第二个是-WiFi-名称，第三个是-WiFi-密码">第一个箭头的等号分割是一个连接过的信息，第二个是 WiFi 名称，第三个是 WiFi 密码</h3>
<p><img src="http://www.cc12210.xyz/usr/uploads/2018/12/1130558730.png" alt="密码.png"></p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>教程</category>
      </categories>
  </entry>
  <entry>
    <title>webpack的基本使用</title>
    <url>/2018/04/19/2018-04-19-webpack%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><img src="http://www.cc12210.xyz/usr/uploads/2018/11/259575857.png" alt="webpack"><br>
感觉 webpack 和 gulp 的差别不是很大，网上找的一些说法也大都类似下面这种说法，含糊不清<br>
Gulp 的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，工具之后可以自动替你完成这些任务。<br>
　　 Webpack 的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack 将从这个文件开始找到你的项目的所有依赖文件，使用 loaders 处理它们，最后打包为一个（或多个）浏览器可识别的 JavaScript 文件。</p>
<hr>
<h2 id="总的来说-webpack-和-gulp-的功能都是可以打包压缩项目文件，只是两种压缩方式不大一样"><strong>总的来说,webpack 和 gulp 的功能都是可以打包压缩项目文件，只是两种压缩方式不大一样</strong></h2>
<a id="more"></a>
<p>要使用 webpack 当然先是进行安装<br>
使用 npm 命令，网速不快时可以使用 cnpm 命令<br>
全局安装:<br>
webpack 工具:</p>
<blockquote>
<p>npm install webpack -g</p>
</blockquote>
<p>webpack-cli 为了识别 webpack 命令:（webpack@4+ 才需要安装）</p>
<blockquote>
<p>npm install webpack-cli -g</p>
</blockquote>
<p>webpack-dev-server 搭建本地服务器：</p>
<blockquote>
<p>npm install webpack-dev-server -g</p>
</blockquote>
<hr>
<p>使用 webpack 构建前端项目之前，先进行初始化<br>
npm init</p>
<p>全局安装之后项目路径也可以安装一下 webpack</p>
<blockquote>
<p>npm install webpack -D<br>
npm install webpack-cli -D<br>
npm install webpack-dev-server -D</p>
</blockquote>
<hr>
<p>webpack 工具默认编译文件路径：src/index.js<br>
编译文件：</p>
<blockquote>
<p>webpack -p 生产模式编译<br>
webpack -d 开发模式编译<br>
webpack 工具编译后默认输出路径为：dist/main.js</p>
</blockquote>
<p>(webpack@4+之前，没有默认输入输出路径，需要执行&gt;webpack 源路径 目标路径)<br>
考虑到 webpack 更新比较快，碰到问题优先查看文档，看过时的东西更容易报错</p>
<hr>
<p>webpack 会对打包的文件用函数包裹起来,然后根据引用的关系依次去调用</p>
<hr>
<p>webpack 支持 commonJS 规范的模块化开发方式：<br>
在 webpack 编译文件时，会给每一个文件使用函数包裹起来创建独立作用域，<br>
并且按照引入的顺序依次执行。<br>
在 webpack 眼里，每个文件都是一个模块</p>
<hr>
<p>webpack 的配置:<br>
webpack 编译的配置文件默认为根路径下的 webpack.config.js<br>
编译文件只需要执行&gt;webpack 即可。</p>
<p>指定 webpack 的配置文件名字：</p>
<blockquote>
<p>webpack --config webpack.config.build.js<br>
webpack --config webpack.config.dev.js<br>
为了防止每次打包文件都需要输入这么长一段话，可以将命令写入 package.json 的 script 下<br>
保存了之后就可以直接使用 npm 命令 npm run dev 就可以自动使用对应的命令<br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/11/1777591277.png" alt="演示1"></p>
</blockquote>
<hr>
<p>一个比较特殊的点需要注意，webpack 只能打包 js 文件，如果需要打包 css 和图片之类的文件需要安装插件</p>
<hr>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">webpack编译css</span><br><span class="line">需要loader</span><br><span class="line">    css-loader  style-loader</span><br><span class="line">安装：</span><br><span class="line">&gt;npm install css-loader style-loader -D</span><br><span class="line">配置：</span><br><span class="line">    webpack.config.js文件</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">webpack编译图片</span><br><span class="line">使用url-loader</span><br><span class="line">安装</span><br><span class="line">&gt;npm install url-loader -D</span><br><span class="line">配置：</span><br><span class="line">    webpack.config.js文件</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ES6并没有对浏览器<span class="number">100</span>%支持，所以在项目中的ES6需要转成ES5，用webpack转也需要对应的插件</span><br><span class="line">webpack编译es6</span><br><span class="line">使用babel-loader</span><br><span class="line">安装</span><br><span class="line">&gt;npm install babel-loader @babel/core@^<span class="number">7.0</span><span class="number">.0</span> -D</span><br><span class="line"></span><br><span class="line"><span class="comment">//插件</span></span><br><span class="line">babel-plugin-es2015-<span class="keyword">let</span></span><br><span class="line">babel-plugin-es2015-<span class="keyword">const</span></span><br><span class="line">babel-plugin-es2015-arrow-<span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//预设</span></span><br><span class="line"><span class="function"><span class="title">babel</span>-<span class="title">preset</span>-<span class="title">es2015</span></span></span><br><span class="line"><span class="function"><span class="title">babel</span>-<span class="title">preset</span>-<span class="title">env</span> (<span class="params">es2015 stage<span class="number">-0</span> stage1....</span>) //推荐这个预设合集，包含了需要的所有插件</span></span><br><span class="line"><span class="function">&gt;<span class="title">npm</span> <span class="title">install</span> @<span class="title">babel</span>/<span class="title">preset</span>-<span class="title">env</span> -<span class="title">D</span></span></span><br></pre></td></tr></table></figure>
<hr>
<p>基本的 webpack.config.dev.js 文件<br>
在定义入口和输出文件夹的时候多个出口需要使用对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义webpack的编译方式</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>); <span class="comment">//引入获取路径的模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向外提供一个对象，这个对象中声明webpack的编译方式</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    mode: //编译模式</span></span><br><span class="line"><span class="comment">    entry: //编译代码的入口文件</span></span><br><span class="line"><span class="comment">    output: //编译代码后的输出文件</span></span><br><span class="line"><span class="comment">    module: //使用的模块</span></span><br><span class="line"><span class="comment">    loaders</span></span><br><span class="line"><span class="comment">    plugins:</span></span><br><span class="line"><span class="comment">    .....</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="comment">//编译模式</span></span><br><span class="line">  mode: <span class="string">"development"</span>, <span class="comment">//development / production  /none</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//    入口文件（string(一个入口文件) | object（多个入口文件））</span></span><br><span class="line">  <span class="comment">// entry: './src/main.js',</span></span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">"./src/main.js"</span>,</span><br><span class="line">    plugins: <span class="string">"./src/plugin.js"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//    输入文件 object</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// path: __dirname+'/dist',//编译好后的文件输出的路径,按系统路径写</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>),</span><br><span class="line">    <span class="comment">// filename: 'app.js'//(一个文件的输出方式)</span></span><br><span class="line">    <span class="comment">// filename: '[name]_[hash:16].js'</span></span><br><span class="line">    filename: <span class="string">"[name].js"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 定义使用的module</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    <span class="comment">// 定义使用的loaders</span></span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>, <span class="comment">//处理css结尾的模块</span></span><br><span class="line">        <span class="comment">//使用什么工具编译，在use中定义</span></span><br><span class="line">        use: [&#123; <span class="attr">loader</span>: <span class="string">"style-loader"</span> &#125;, &#123; <span class="attr">loader</span>: <span class="string">"css-loader"</span> &#125;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(jpg|png|jpeg|gif|ttf|svg)$/</span>,</span><br><span class="line">        use: <span class="string">"url-loader"</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>, <span class="comment">//出去这个文件夹中的文件不处理</span></span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            <span class="comment">// plugins: [],</span></span><br><span class="line">            presets: [<span class="string">"@babel/preset-env"</span>],</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>箭头函数和普通函数的区别</title>
    <url>/2018/05/02/2018-05-02-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E5%92%8C%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h3 id="箭头函数">箭头函数</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//我是箭头函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="等价于下面的普通函数">等价于下面的普通函数</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//我是普通函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="箭头函数是-ES6-中新增的，相当于匿名函数，并且简化了函数定义">箭头函数是 ES6 中新增的，相当于匿名函数，并且简化了函数定义</h3>
<p>在写法上稍有不同,并且有几个不同点</p>
<a id="more"></a>
<h2 id="this-指向">this 指向</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">普通函数</span><br><span class="line"><span class="number">1.</span> <span class="keyword">this</span>指向调用者，如果没找到直接调用者,则<span class="keyword">this</span>指向<span class="built_in">window</span>;</span><br><span class="line"><span class="number">2.</span>严格模式必须声明调用者，没有直接调用者的函数中的<span class="keyword">this</span>是 <span class="literal">undefined</span>;</span><br><span class="line"><span class="number">3.</span>使用call,apply,bind可以更改<span class="keyword">this</span>指向</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">箭头函数</span><br><span class="line"><span class="number">1.</span>箭头函数的<span class="keyword">this</span>指向为上下文的<span class="keyword">this</span>指向</span><br><span class="line"><span class="number">2.</span>箭头函数的<span class="keyword">this</span>无法被call,apply,bind更改</span><br></pre></td></tr></table></figure>
<h2 id="形参的接收">形参的接收</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">普通函数中可以使用<span class="built_in">arguments</span>获得实参</span><br><span class="line">箭头函数是通过...rest  打印结果就是打印rest即可</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>分享一部小说：程序员生存指南</title>
    <url>/2018/04/20/2018-04-20-%E5%88%86%E4%BA%AB%E4%B8%80%E9%83%A8%E5%B0%8F%E8%AF%B4%EF%BC%9A%E7%A8%8B%E5%BA%8F%E5%91%98%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">作者：胡七筒</span><br><span class="line">链接：https:<span class="comment">//www.jianshu.com/p/3a8a4a00bf9d</span></span><br><span class="line">來源：简书</span><br><span class="line">简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</span><br></pre></td></tr></table></figure>
<h3 id="最近发现的蛮好看的一部关于程序员的小说">最近发现的蛮好看的一部关于程序员的小说</h3>
<a id="more"></a>
<p>初出茅庐</p>
<p>（1）</p>
<p>我叫姚博启，这个名字里包含了父辈对我的期许：博学多闻，启智开明。我非常敬佩我那初中都没毕业的老爸，他竟然有着如此深厚的文化涵养，给予了我这个充满文化气息的名字。姓名不单单是一个人的符号，它还带有某种深刻的寓意。人一生如果有个亮丽耀眼的名字不但令人印象深刻，还能够带来良好的人际关系和事业际遇。</p>
<p>我曾经为自己能拥有这么一个好的名字而沾沾自喜，尤其是在村里上小学的时候。当时，我周围充斥着根生，水生，金生，木生，赵帅，钱帅，孙帅，李帅，周伟，吴伟，郑伟，杨伟…姚博启这个名字在它们之中，可谓独树一帜，鹤立鸡群。</p>
<p>很长一段时间，这种优越感让我觉得自己日后必是人中龙凤。直到初中有次生物课上，老师讲到生育与繁殖那个章节，我才第一次领会到了「姚博启」这个名字的尴尬之处。随着年龄的增长，对于男女之事了解透彻之后，这个名字时不时会给我带来困扰。姚博启总会让人联想到「要勃起」三个字，淫意绵绵。再加上年轻的我遗传了家父某些基因，脸颊上布满了青春痘。</p>
<p>青春迟迟不肯在我脸上散去，我总给人一种荷尔蒙过剩、处处需要打马赛克的印象。在此后求偶、求学的道路上，这个名字似乎并没有像父辈们预想的那样，引领我走向康庄大道，反倒是经常起反作用，引来哄堂大笑。</p>
<p>（2）</p>
<p>2013 年，癸巳蛇年。在大学里晃晃荡荡 4 年后，我以惨淡的成绩勉强毕业。原本计划是继续求学深造，拖延就业。不过计划赶不上变化，由于准备不充足，考研失败，我不得不踏上了找工作的征程。</p>
<p>大学读得是计算机专业，于是，我顺理成章也无可奈何地做了一名程序员。告别象牙塔，我住进了棚户区，开启了披星戴月、披荆斩棘的职场生涯。</p>
<p>当时，北京房价早已突破 3 万一平米。在帝都这样寸土寸金的大都市里，作为外地乡村青年的我断然买不起车子、房子。搬家租房便成为了毕业后的第一件烦心事儿，太贵的房子高攀不起，太便宜的又心里没底。</p>
<p>北五环清河附近有一片破旧的棚户区，那里虽然泥淖遍地、垃圾成堆，但地理位置极好。它距离五道口、上地、西二旗等科技园很近，是北漂人的睡城之一。棚户区本是一个小村庄，随着周围商业区的快速发展，08 年奥运会后这里便成为了黄金地段。</p>
<p>开发商还未染指这片区域，村民便利用自家宅基地盖了许多公寓楼。每栋公寓楼大概能隔出十几个小房间，村民靠收房租致富。随着帝都房租勇攀高峰，村民们很快跻身年入百万的中产之中，许多人成为了这座城市又一批富起来的新贵。</p>
<p>为了省钱，我跟老潘在棚户区「幸福公寓」里租了个十平米左右的单间。每人每月 500 大洋，网费，水费，电费另算。出于安全考虑，公寓里不能生火做饭；鉴于水管线路老化，房间也没有独立卫浴。我们一干租户，十几个屋子共用一个卫生间。每逢天气转凉，厕所门口常常有人撅臀捂肚，等待蹲位。</p>
<p>公寓楼外有一公共澡堂，洗一次 5 元，价钱倒也不算贵，只是晚高峰人太多，太拥挤。刚住进公寓那会儿正值夏日，一到晚上整个人就会汗流浃背，甚是难受。到了后半夜，我跟老潘便会摸着黑跑进厕所，接一盆子冷水冲凉。冲凉声偶尔会惊醒卫生间旁边的几家住户，在挨了几次破口大骂后，我俩这才有所收敛。</p>
<p>老潘本名潘伟龙，是我同一届的校友。不过大学期间，我俩并不相识。他说他曾经在学校举办的一个编程比赛上见过我，我对他却没有什么印象。我俩结识于学校论坛的房屋租赁板块。当时，老潘发了一个求人合租的帖子，正好我也在找房，一看价钱挺便宜，位置还不错，就跟他取得了联系。见面之后，我俩聊得挺投机，脾气秉性也都很合适，于是就搭伙做起了室友。</p>
<p>在那个十平米左右的单间里，我跟老潘一人一张单人床。两张床中间摆放着一个小茶几，若是站在门口往屋里瞧，里面的摆设特像宾馆的两人标准间。</p>
<p>刚住进来那会儿，我跟老潘商量干脆买个上下铺，这样屋子里闲置空间还能大点，可以多放点家当。老潘死活不同意，他说那不就跟上大学一样了嘛，既然毕业了，有了正经职业，日子就得过得有点仪式感。</p>
<p>老潘的仪式感特别强，说好听点是讲究生活品质，说难听点就是穷人瞎矫情。每天清晨，他准时起床，用电饼铛煎一个鸡蛋，然后取两片面包，在面包片上抹点老干妈辣椒酱，随后把煎蛋裹进去，再倒上一杯白开水。他一边拿着手机刷新闻资讯，一边大口朵颐地吃着秘制汉堡，很是可口。</p>
<p>我在一家知名国企的 IT 部门做助理工程师，老潘在一家互联网创业公司里做产品经理。初入职场，我俩工资差不多，一个月 5000 左右。我比老潘稍微好点儿，国企每逢过年过节，都会发点礼券、购物卡。</p>
<p>（3）</p>
<p>美国加州有硅谷，中国北京有西二旗。作为“中国硅谷”这个称谓最有力的竞争者，西二旗时常出现在科技新闻报道中。在明清时期，这里属于京城远郊，是官府牧马的地方。步入新时代后，马儿已不多见，驴儿也都上了桌。不过，山一程水一程，三十年河东又河西，新时代赋予了西二旗新的使命，当前这里圈养了几万名程序猿。</p>
<p>我跟老潘的公司均坐落在西二旗的中关村软件园，软件园距离我们住的地儿不算远，二十分钟左右的车程。由于上下班时间不一致，我与老潘几乎未曾有过结伴而行。</p>
<p>我早上 8 点半上班，下午 5 点半下班，偶尔会加个班，但也不会太晚，最迟到九点，作息大体来说很规律，国企大都这个调性。老潘的作息跟我大不一样，他上班很晚，大概早上十点到十一点不等。下班也很晚，晚上十点，十一点回来是家常便饭，有时候甚至熬到后半夜。整个互联网的从业者几乎都是如此拼命。</p>
<p>起初，作息时间上的不一致给我和老潘带来了不小的困扰。早上，我起床去上班，难免会打扰到正在酣睡的老潘。晚上老潘归来之时，我已经在跟周公攀谈。</p>
<p>生活就是互相迁就，老潘首先做了妥协。早上，他会跟我一起起床，我去上班，他去跑步。投桃报李，我也调整生物钟，晚上玩游戏，等着老潘归来。</p>
<p>有了正经工作也算有了一份事业。每天忙碌，日出而作，日落而息，倒也充实，但总觉得生活中缺少了点什么。老潘聊天倒也直白，他说他急缺个女人。我也是，不过没有他那么强烈的渴求。</p>
<p>工作不久，老潘就喜欢上了与他同时入职的一位女程序员。女程序员可是个稀缺物种，在许多技术团队里，她们都被当作国宝呵护。遇到技术难题，女程序员身后往往有一大批男程序员出谋划策，指点江山。</p>
<p>老潘喜欢那姑娘的理由倒也简单，他不图姑娘美貌，单纯喜爱姑娘的性格。以往，老潘跟技术谈需求，聊产品的时候，技术大都是紧皱眉头，一脸不爽，恨不得把老潘摁在地上摩擦。</p>
<p>可那姑娘不一样，她技术高超，对于老潘提的需求，她从来都是面带笑容，按时保质保量地完成。老潘说每次见到姑娘，他都有种如沐春风的感觉。</p>
<p>老潘示爱姑娘的方式很特别，他利用职务之便，不停地给姑娘提需求，以至于姑娘的大部分时间都被他所占据。繁重的任务压得姑娘常常加班熬到深夜。</p>
<p>终于，在老潘疯狂地追逐下，姑娘试用期还没到，就选择了离职转行。</p>
<p>老潘欲哭无泪。</p>
<p>（4）</p>
<p>2013 年，移动互联网尚处于黄金时期，待开发的蓝海领域还很多。各个公司为了抢占市场，玩命地推出新产品，老潘所在的公司也不例外。作为产品经理，职业所需，老潘的手机上装满了竞争对手的 APP，存储卡里塞满了行业的调研报告。</p>
<p>在我和老潘每天有限的相处时间里，大部分时间我都充当着他的听众，聆听着他对于各个产品的吐槽。当然，偶尔也有产品让他眼前一亮、啧啧称赞。不得不说，老潘对于产品的敏锐程度的确很厉害，当年他看好的那几个初创企业后来都发展得还不错。老潘成长得很快，不到半年时间，他在公司就能独当一面，并且开始带实习生。</p>
<p>跟老潘的锐意拼搏相比，我有点不思进取，在悠闲的国企里，每天做得最多的事就是写 PPT，跟领导做汇报。虽然我所在的 IT 部门承担着公司产品的最终落地，但是公司所有的技术开发都外包给第三方软件公司。我们正式员工只是负责方案的撰写，并不参与到具体实施，因此可供我们发挥的空间并不大。</p>
<p>此外这里人浮于事，无过便是有功，无为便是有所作为，养了一大批混日子的老员工。办公区里每日听得最多的就是女员工们对于公婆的吐槽，男同事们对于明星政客的评头论足。不过，好在领导水平不高，对手下要求也低，日子过得倒也悠闲。</p>
<p>老潘经常劝我跳槽，说他们公司的初级程序员每月至少一万起。不过由俭入奢易，由奢入俭难，我暂时还不想逃脱朝九晚五的安逸生活，选择在国企里混吃等死。</p>
<p>找工作那会儿，其实我也拿了几个互联网公司的 offer，薪资待遇都还可以，不过最终还是选择了现在这个国企。</p>
<p>主要还是我爸的意思，家里人觉得国企稳定，不存在倒闭裁员等问题。当然，还有一些虚荣心在作祟，对于一些新兴的互联网公司，老家有很多人压根都没听过，不过一说起我入职的这个国企，全中国应该没有几个人不晓得。</p>
<p>我解放不了家里人的思想，便只能控制自己的念想。哪里都是围城，城外的人想进去，城里的人想出去。</p>
<p>作者：胡七筒<br>
链接：<a href="https://www.jianshu.com/p/3a8a4a00bf9d" target="_blank" rel="noopener">https://www.jianshu.com/p/3a8a4a00bf9d</a><br>
來源：简书<br>
简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>小说</tag>
      </tags>
  </entry>
  <entry>
    <title>前端之性能优化(网络)</title>
    <url>/2018/05/13/2018-05-13-%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96(%E7%BD%91%E7%BB%9C)/</url>
    <content><![CDATA[<h2 id="DNS-预解析">DNS 预解析</h2>
<p>DNS 解析也是需要时间的，可以通过预解析的方式来预先获得域名所对应的 IP。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//yuchengkai.cn"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="缓存">缓存</h2>
<p>缓存对于前端性能优化来说是个很重要的点，良好的缓存策略可以降低资源的重复加载提高网页的整体加载速度。</p>
<p>通常浏览器缓存策略分为两种：强缓存和协商缓存。</p>
<h3 id="强缓存">强缓存</h3>
<p>实现强缓存可以通过两种响应头实现：Expires 和 Cache-Control 。强缓存表示在缓存期间不需要请求，state code 为 200</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Expires: Wed, <span class="number">22</span> Oct <span class="number">2018</span> <span class="number">08</span>:<span class="number">41</span>:<span class="number">00</span> GMT</span><br></pre></td></tr></table></figure>
<p>Expires 是 HTTP / 1.0 的产物，表示资源会在 Wed, 22 Oct 2018 08:41:00 GMT 后过期，需要再次请求。并且 Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Cache-control: max-age=<span class="number">30</span></span><br></pre></td></tr></table></figure>
<p>Cache-Control 出现于 HTTP / 1.1，优先级高于 Expires 。该属性表示资源会在 30 秒后过期，需要再次请求。 ##协商缓存<br>
如果缓存过期了，我们就可以使用协商缓存来解决问题。协商缓存需要请求，如果缓存有效会返回 304。<br>
协商缓存需要客户端和服务端共同实现，和强缓存一样，也有两种实现方式</p>
<a id="more"></a>
<h4 id="Last-Modified-和-If-Modified-Since">Last-Modified 和 If-Modified-Since</h4>
<p>Last-Modified 表示本地文件最后修改日期，If-Modified-Since 会将 Last-Modified 的值发送给服务器，询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来。</p>
<p>但是如果在本地打开缓存文件，就会造成 Last-Modified 被修改，所以在 HTTP / 1.1 出现了 ETag 。</p>
<h4 id="ETag-和-If-None-Match">ETag 和 If-None-Match</h4>
<p>ETag 类似于文件指纹，If-None-Match 会将当前 ETag 发送给服务器，询问该资源 ETag 是否变动，有变动的话就将新的资源发送回来。并且 ETag 优先级比 Last-Modified 高。</p>
<h3 id="在实际的工作当中，协商选择最优的策略，大部分场景都是可以使用强缓存的">在实际的工作当中，协商选择最优的策略，大部分场景都是可以使用强缓存的</h3>
<ul>
<li>对于某些不需要缓存的资源，可以使用 Cache-control: no-store ，表示该资源不需要缓存</li>
<li>对于频繁变动的资源，可以使用 Cache-Control: no-cache 并配合 ETag 使用，表示该资源已被缓存，但是每次都会发送请求询问资源是否更新。</li>
<li>对于代码文件来说，通常使用 Cache-Control: max-age=31536000 并配合策略缓存使用，然后对文件进行指纹处理，一旦文件名变动就会立刻下载新的文件。</li>
</ul>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title>前端之性能优化(渲染)</title>
    <url>/2018/06/06/2018-06-06-%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96(%E6%B8%B2%E6%9F%93)/</url>
    <content><![CDATA[<h2 id="优化渲染过程">优化渲染过程</h2>
<h2 id="懒执行">懒执行</h2>
<p>懒执行就是将某些逻辑延迟到使用时再计算。该技术可以用于首屏优化，对于某些耗时逻辑并不需要在首屏就使用的，就可以使用懒执行。懒执行需要唤醒，一般可以通过定时器或者事件的调用来唤醒。 ##懒加载<br>
懒加载就是将不关键的资源延后加载。</p>
<p>懒加载的原理就是只加载自定义区域（通常是可视区域，但也可以是即将进入可视区域）内需要加载的东西。对于图片来说，先设置图片标签的 src 属性为一张占位图，将真实的图片资源放入一个自定义属性中，当进入自定义区域时，就将自定义属性替换为 src 属性，这样图片就会去下载资源，实现了图片懒加载。</p>
<p>懒加载不仅可以用于图片，也可以使用在别的资源上。比如进入可视区域才开始播放视频等等</p>
<hr>
<h2 id="文件优化">文件优化</h2>
<h3 id="图片优化">图片优化</h3>
<h4 id="计算图片大小">计算图片大小</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">一张<span class="number">100</span>x100的图片</span><br><span class="line">意味着这张图片有<span class="number">10000</span>个像素点</span><br><span class="line">rgba存储下，每个像素<span class="number">4</span>个通道，每个通道<span class="number">1</span>个字节，<span class="number">8</span>位=<span class="number">1</span>个字节</span><br><span class="line">(<span class="number">10000</span>*<span class="number">1</span>*<span class="number">4</span>/<span class="number">1024</span>)=<span class="number">39</span>KB</span><br></pre></td></tr></table></figure>
<h3 id="所以在实际项目中我们可以缩减图片的像素点和每个像素点显示的颜色以达到减少图片体积的效果">所以在实际项目中我们可以缩减图片的像素点和每个像素点显示的颜色以达到减少图片体积的效果</h3>
<h2 id="more"><a id="more"></a></h2>
<h2 id="图片加载优化">图片加载优化</h2>
<p>老生常谈的一个话题</p>
<ul>
<li>小图使用 base64 的格式</li>
<li>多张小图合并(雪碧图，精灵图)可以减少 http 请求</li>
<li>箭头类小图标可以使用 css 实现</li>
<li>小图使用 png，照片使用 jpeg</li>
<li>对图片进行压缩处理</li>
</ul>
<hr>
<h2 id="一道有意思的题，如果渲染几万条数据不卡住界面">一道有意思的题，如果渲染几万条数据不卡住界面</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      控件</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 插入十万条数据</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> total = <span class="number">100000</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 一次插入 20 条，如果觉得性能不好就减少</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> once = <span class="number">20</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 渲染数据总共需要几次</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> loopCount = total / once;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> countOfRender = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">"ul"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 优化性能，插入不会造成回流</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> fragment = <span class="built_in">document</span>.createDocumentFragment();</span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; once; i++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> li = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span></span><br><span class="line"><span class="javascript">            li.innerText = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * total);</span></span><br><span class="line">            fragment.appendChild(li);</span><br><span class="line">          &#125;</span><br><span class="line">          ul.appendChild(fragment);</span><br><span class="line">          countOfRender += 1;</span><br><span class="line">          loop();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">          if (countOfRender &lt; loopCount) &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.requestAnimationFrame(add);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        loop();</span><br><span class="line">      &#125;, 0);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title>axios的封装</title>
    <url>/2018/06/22/2018-06-22-axios%E7%9A%84%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<p><img src="http://www.cc12210.xyz/usr/uploads/2018/11/2636180106.png" alt="164c70852f41b04c.png"><br>
如图，面对一团糟代码的你~~~真的想说，What F<sub>U</sub>C~K！！！</p>
<p>回归正题，我们所要的说的 axios 的封装和 api 接口的统一管理，其实主要目的就是在帮助我们简化代码和利于后期的更新维护。</p>
<a id="more"></a>
<p>一、axios 的封装<br>
在 vue 项目中，和后台交互获取数据这块，我们通常使用的是 axios 库，它是基于 promise 的 http 库，可运行在浏览器端和 node.js 中。他有很多优秀的特性，例如拦截请求和响应、取消请求、转换 json、客户端防御 XSRF 等。所以我们的尤大大也是果断放弃了对其官方库 vue-resource 的维护，直接推荐我们使用 axios 库。如果还对 axios 不了解的，可以移步 axios 文档。</p>
<p>安装</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install axios; <span class="comment">// 安装axios复制代码</span></span><br></pre></td></tr></table></figure>
<p>引入<br>
一般我会在项目的 src 目录中，新建一个 request 文件夹，然后在里面新建一个 http.js 和一个 api.js 文件。http.js 文件用来封装我们的 axios，api.js 用来统一管理我们的接口。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在http.js中引入axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>; <span class="comment">// 引入axios</span></span><br><span class="line"><span class="keyword">import</span> QS <span class="keyword">from</span> <span class="string">"qs"</span>; <span class="comment">// 引入qs模块，用来序列化post类型的数据，后面会提到</span></span><br><span class="line"><span class="comment">// vant的toast提示框组件，大家可根据自己的ui组件更改。</span></span><br><span class="line"><span class="keyword">import</span> &#123; Toast &#125; <span class="keyword">from</span> <span class="string">"vant"</span>;</span><br></pre></td></tr></table></figure>
<p>环境的切换<br>
我们的项目环境可能有开发环境、测试环境和生产环境。我们通过 node 的环境变量来匹配我们的默认的接口 url 前缀。axios.defaults.baseURL 可以设置 axios 的默认请求地址就不多说了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 环境的切换</span></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV == <span class="string">"development"</span>) &#123;</span><br><span class="line">  axios.defaults.baseURL = <span class="string">"https://www.baidu.com"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV == <span class="string">"debug"</span>) &#123;</span><br><span class="line">  axios.defaults.baseURL = <span class="string">"https://www.ceshi.com"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV == <span class="string">"production"</span>) &#123;</span><br><span class="line">  axios.defaults.baseURL = <span class="string">"https://www.production.com"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设置请求超时<br>
通过 axios.defaults.timeout 设置默认的请求超时时间。例如超过了 10s，就会告知用户当前请求超时，请刷新等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.defaults.timeout = <span class="number">10000</span>;</span><br><span class="line">复制代码;</span><br></pre></td></tr></table></figure>
<p>post 请求头的设置<br>
post 请求的时候，我们需要加上一个请求头，所以可以在这里进行一个默认的设置，即设置 post 的请求头为 application/x-www-form-urlencoded;charset=UTF-8</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.defaults.headers.post[<span class="string">"Content-Type"</span>] =</span><br><span class="line">  <span class="string">"application/x-www-form-urlencoded;charset=UTF-8"</span>;</span><br></pre></td></tr></table></figure>
<p>请求拦截<br>
我们在发送请求前可以进行一个请求的拦截，为什么要拦截呢，我们拦截请求是用来做什么的呢？比如，有些请求是需要用户登录之后才能访问的，或者 post 请求的时候，我们需要序列化我们提交的数据。这时候，我们可以在请求被发送之前进行一个拦截，从而进行我们想要的操作。</p>
<p>请求拦截</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先导入vuex,因为我们要使用到里面的状态对象</span></span><br><span class="line"><span class="comment">// vuex的路径根据自己的路径去写</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器axios.interceptors.request.use(</span></span><br><span class="line">    config =&gt; &#123;</span><br><span class="line">        <span class="comment">// 每次发送请求之前判断vuex中是否存在token</span></span><br><span class="line">        <span class="comment">// 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况</span></span><br><span class="line">        <span class="comment">// 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断</span></span><br><span class="line">        <span class="keyword">const</span> token = store.state.token;</span><br><span class="line">        token &amp;&amp; (config.headers.Authorization = token);</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;,</span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.error(error);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这里说一下 token，一般是在登录完成之后，将用户的 token 通过 localStorage 或者 cookie 存在本地，然后用户每次在进入页面的时候（即在 main.js 中），会首先从本地存储中读取 token，如果 token 存在说明用户已经登陆过，则更新 vuex 中的 token 状态。然后，在每次请求接口的时候，都会在请求的 header 中携带 token，后台人员就可以根据你携带的 token 来判断你的登录是否过期，如果没有携带，则说明没有登录过。这时候或许有些小伙伴会有疑问了，就是每个请求都携带 token，那么要是一个页面不需要用户登录就可以访问的怎么办呢？其实，你前端的请求可以携带 token，但是后台可以选择不接收啊！</p>
<p>响应的拦截</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">    response =&gt; &#123;</span><br><span class="line">        <span class="comment">// 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据</span></span><br><span class="line">        <span class="comment">// 否则的话抛出错误</span></span><br><span class="line">        <span class="keyword">if</span> (response.status === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 服务器状态码不是2开头的的情况</span></span><br><span class="line">    <span class="comment">// 这里可以跟你们的后台开发人员协商好统一的错误状态码</span></span><br><span class="line">    <span class="comment">// 然后根据返回的状态码进行一些操作，例如登录过期提示，错误提示等等</span></span><br><span class="line">    <span class="comment">// 下面列举几个常见的操作，其他需求可自行扩展</span></span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (error.response.status) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (error.response.status) &#123;</span><br><span class="line">                <span class="comment">// 401: 未登录</span></span><br><span class="line">                <span class="comment">// 未登录则跳转登录页面，并携带当前页面的路径</span></span><br><span class="line">                <span class="comment">// 在登录成功后返回当前页面，这一步需要在登录页操作。</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">                    router.replace(&#123;</span><br><span class="line">                        path: <span class="string">'/login'</span>,</span><br><span class="line">                        query: &#123;</span><br><span class="line">                            redirect: router.currentRoute.fullPath</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 403 token过期</span></span><br><span class="line">                <span class="comment">// 登录过期对用户进行提示</span></span><br><span class="line">                <span class="comment">// 清除本地token和清空vuex中token对象</span></span><br><span class="line">                <span class="comment">// 跳转登录页面</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">                     Toast(&#123;</span><br><span class="line">                        message: <span class="string">'登录过期，请重新登录'</span>,</span><br><span class="line">                        duration: <span class="number">1000</span>,</span><br><span class="line">                        forbidClick: <span class="literal">true</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="comment">// 清除token</span></span><br><span class="line">                    localStorage.removeItem(<span class="string">'token'</span>);</span><br><span class="line">                    store.commit(<span class="string">'loginSuccess'</span>, <span class="literal">null</span>);</span><br><span class="line">                    <span class="comment">// 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面</span></span><br><span class="line">                    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                        router.replace(&#123;</span><br><span class="line">                            path: <span class="string">'/login'</span>,</span><br><span class="line">                            query: &#123;</span><br><span class="line">                                redirect: router.currentRoute.fullPath</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;, <span class="number">1000</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 404请求不存在</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">                    Toast(&#123;</span><br><span class="line">                        message: <span class="string">'网络请求不存在'</span>,</span><br><span class="line">                        duration: <span class="number">1500</span>,</span><br><span class="line">                        forbidClick: <span class="literal">true</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 其他错误，直接抛出错误提示</span></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    Toast(&#123;</span><br><span class="line">                        message: error.response.data.message,</span><br><span class="line">                        duration: <span class="number">1500</span>,</span><br><span class="line">                        forbidClick: <span class="literal">true</span></span><br><span class="line">                    &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error.response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>响应拦截器很好理解，就是服务器返回给我们的数据，我们在拿到之前可以对他进行一些处理。例如上面的思想：如果后台返回的状态码是 200，则正常返回数据，否则的根据错误的状态码类型进行一些我们需要的错误，其实这里主要就是进行了错误的统一处理和没登录或登录过期后调整登录页的一个操作。</p>
<p>要注意的是，上面的 Toast()方法，是我引入的 vant 库中的 toast 轻提示组件，你根据你的 ui 库，对应使用你的一个提示组件。</p>
<p>封装 get 方法和 post 方法<br>
我们常用的 ajax 请求方法有 get、post、put 等方法，相信小伙伴都不会陌生。axios 对应的也有很多类似的方法，不清楚的可以看下文档。但是为了简化我们的代码，我们还是要对其进行一个简单的封装。下面我们主要封装两个方法：get 和 post。<br>
get 方法：我们通过定义一个 get 函数，get 函数有两个参数，第一个参数表示我们要请求的 url 地址，第二个参数是我们要携带的请求参数。get 函数返回一个 promise 对象，当 axios 其请求成功时 resolve 服务器返回 值，请求失败时 reject 错误值。最后通过 export 抛出 get 函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * get方法，对应get请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>url [请求的url地址]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>params [请求时携带的参数]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    axios</span><br><span class="line">      .get(url, &#123;</span><br><span class="line">        params: params,</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        resolve(res.data);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        reject(err.data);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>post 方法：原理同 get 基本一样，但是要注意的是，post 方法必须要使用对提交从参数对象进行序列化的操作，所以这里我们通过 node 的 qs 模块来序列化我们的参数。这个很重要，如果没有序列化操作，后台是拿不到你提交的数据的。这就是文章开头我们 import QS from ‘qs’;的原因。如果不明白序列化是什么意思的，就百度一下吧，答案一大堆。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * post方法，对应post请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>url [请求的url地址]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>params [请求时携带的参数]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url, params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    axios</span><br><span class="line">      .post(url, QS.stringify(params))</span><br><span class="line">      .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        resolve(res.data);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        reject(err.data);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里有个小细节说下，axios.get()方法和 axios.post()在提交数据时参数的书写方式还是有区别的。区别就是，get 的第二个参数是一个{}，然后这个对象的 params 属性值是一个参数对象的。而 post 的第二个参数就是一个参数对象。两者略微的区别要留意哦！</p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>从前端到CTO——程序员的成长之路</title>
    <url>/2018/06/28/2018-06-28-%E4%BB%8E%E5%89%8D%E7%AB%AF%E5%88%B0CTO%E2%80%94%E2%80%94%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<p>张云龙老师于 2018 年 5 月 19 日在「FDCON2018 中国前端开发者千人峰会」上的发言。作为走在前端工程化前列，现任全民直播 CTO 的张云龙老师，分享了他的个人成长之路，希望能够在前端职业规划上，给大家一些参考和启发。<br>
张云龙：大家好，我是云龙，从 2016 年 3 月份开始，我参与到全民直播这个创业项目中，这两年一直在上海。关于我自己的成长历程，一直都很想找个时间跟前端的开发者们分享一下。通过剖析别人，也可以总结自己。我很害怕把这个主题讲的跟成功学一样，其实 CTO 这个职位现在多少有点“烂大街”，不算是什么成功，仅供参考。我是 2010 年毕业的，刚毕业即加入百度，当年我毕业的时候同一批入职的人后来成立一个微信群，那个群在 8 年后的今天，我们还会一起扯皮闲聊，分享彼此的际遇。我发现它可以作为参考 —— 8 年前一群有着相同能力，相同起点的人，在 8 年之间因为做出不同的选择，最后达成了不同的人生。有的创业，有的在大公司做高管，有的炒比特币财富自由。参考他们的选择会让你有一些感悟: “如果当初我选择了那样，我现在会怎么样”。我现在经历了职业生涯 8 年的时间，也想把自己的经历作为一个案例，分享给大家。在讲之前，先问一下在座的同学工作 3 年以下的举手。。。。emmm，剩下的都是三年以上的咯？我看了一下，比例差不多一半一半。<br>
我面试过许多前端工程师，发现大家在工作了 3-4 年的时候会遇到一个迷茫期，我问他们你们接下来想做什么，大多数人回答说想做一个开源项目，并且推广开来，成为前端“网红”，更长远的职业发展规划往往考虑的很少。</p>
<p>今天，我希望把自己的工作经历完全拆解开呈现在大家面前，作为一个案例解答有关职业发展的困扰。</p>
<a id="more"></a>
<h3 id="第一章-程序员的中年危机。">第一章: 程序员的中年危机。</h3>
<p>我今年 33 岁，虽然有技术傍身，但是难免会有一些焦虑，这种焦虑来自对自己的能力质疑。在大公司的那些年，背靠大平台，做出的成绩 80%是平台赋予我的，它有健全的体系，有优秀的同事，有完善的职级制度，还有优厚的薪资待遇。你在这样舒适的环境下做那么一小块事情，如果有一天你发现你这 20%可以被替代的时候，这家公司会怎么思考？你有很多股票，开很高的工资，对于公司来说，你的成本很高，在新人的推动下，你会产生一种可被替代的压力，我大概在 28 岁，29 岁技术水平还在上升期的时候就有这种焦虑。<br>
在大公司那些年，我感觉自己还像一个没毕业的学生，始终没有脱离“学生气”，无论说话做事都有这种感觉。其次技术的更新迭代速度特别快，尤其是前端领域，你会发现很少有能真正沉淀下来的东西。第三个焦虑点就是关于企业如何对待 35 岁以上员工，我当时在百度的时候团队有一个非常厉害的工程师，他在 2010 年技术职级很高，但技术思维还停留在上一个时代，随着技术的发展，渐渐不能指引团队进步，那个过程比较艰难，对我触动很大。最后一点，就是随着年龄的增长，选择的成本会越来越高，你会有家庭，即便公司觉得你没有价值，你也不能走了，走不动了。这些触动了我，开始要去思考。<br>
我们做技术，尤其是前端，很多时候我们做出的产品，看到的都是 UI 设计，交互设计 ，产品设计，即便我们做的产品非常成功，成功点在哪儿？可能是 UI 设计得漂亮，也可能是推荐算法精确，而前端的产出给产品带来了什么？还有前端技术深要深到什么程度？做久了技术就必须要转型管理吗？这些问题我当年没有答案，我可以坚持不懈得写页面，但是这个事情做 5 年，6 年，10 年不还是一样吗？现在我能做什么？未来我想做什么？<br>
带着这些疑问，用 8 年时间我走了 3 个城市，从北京、到广州，在到上海，在职业道路上寻求答案。<br>
最开始的 3 年我在北京，那个时候刚毕业，还不能决定自己的未来，加入百度算是比较运气。当时花了些精力准备一份漂亮的简历，这件事对我找工作帮助很大。在学校的时候，基本上对前端这块已经非常熟悉了，我的简历非常漂亮。最开始刚毕业的时候选择工作，简历会成为一个好门面。我把当时自己在前端的方向、学习深入的点，都花精力体现在简历上，当时在大公司招聘的时候已经占了一些优势，很荣幸的是被百度接收了。在百度三年时间里面，主要深入的在做技术。当时百度有一个很大的前端团队，一百多人，包括百度新闻，百度视频，百度知道，百度百科等等，整个团队为了解决开发效率问题，决定成立一个横向支撑的小组，做一款构建工具，就是 fis，我当时还在 CMS 部门（一个内部的内容管理系统），主动提出参与到 fis 项目中。做 fis 的过程让我学到了很多服务端技术，包括运维知识。在百度工作 3 年后，开始想着开始去脱离这个平台 80%的支撑，我当时认为 UC 是一个中型的创业公司，我过去待了两年多，那个时候开始关注前端团队建设。把我在百度学习到的技术理念在 UC 结合 nodejs 重新实践一遍，其次是指导前端团队提高他们整体的技术水平。在广州 UC 工作 2 年后，来到了上海，参与全民直播这个项目。做全民直播的整个过程经历了比较多的坎坷，我最开始接手全民的时候，仅有两个全民自己招聘的研发同学，经过 2 年多的时间，组建了将近一百人的团队，包括服务端，前端，客户端，测试，运维，编解码，大数据等部门，感觉在上海这两年的成长，比前面在大公司所有 5 年的加起来还多。<br>
过去走过了一个这样的路线: 大型公司 → 中型公司 → 创业公司。专注的事情从技术到团队再到业务。今天我重点跟大家分享我总结的成长历程，当你后面工作到一定年限，碰到困惑的时候，可以拿这个模型参考一下，也算是一个方向。当然，这不是唯一的成长路线。</p>
<h2 id="我把整个职业生涯分三个阶段：">我把整个职业生涯分三个阶段：</h2>
<h3 id="第一阶段，一技之长。就是深耕你的专业技能，你的专业技术。">第一阶段，一技之长。就是深耕你的专业技能，你的专业技术。</h3>
<h3 id="第二阶段，独立做事。当你的一技之长达到一定深度的时候，需要开始思考如何独立做事。">第二阶段，独立做事。当你的一技之长达到一定深度的时候，需要开始思考如何独立做事。</h3>
<h3 id="第三阶段，拥有事业。选择一份使命，带领团队实现它。">第三阶段，拥有事业。选择一份使命，带领团队实现它。</h3>
<p>大致是这样的三个阶段，接下来我逐一拆解一下：</p>
<h3 id="第一阶段：一技之长。">第一阶段：一技之长。</h3>
<p>我把它分成五个层次：栈内技术、栈外技术、工程经验、带人做事、业界发声。所谓栈内技术，是指你的专业领域技术，对于前端工程师来说，就是那些我们熟悉的 JS、CSS、HTML 等基础，深入了解我们的程序所运行的宿主环境——浏览器，能掌握并灵活操纵在浏览器内发生的一切。前端没有秘密，所有可访问的页面都近似于开源，所以检验栈内技术的标准就是看你是否能最终形成技术上的“写轮眼”——那种看到任何前端产品都有能独立复刻和洞察它的自信。<br>
栈内技术是安身立命的根本，不要轻易“换方向”。虽然我现在在做技术管理，但始终不会放弃我作为前端这个一技之长的根本。遇到一些前端同学工作几年以后前端做得比较熟了，考虑转行到其他岗位。但是我想说，当你转行那一刻起，就把要转的领域变成了你新的“栈内技术”，然后又要重新走一遍技术沉淀的过程，匆匆几年，又过去了，所以不要轻易“换方向”，前端绝对是可以长时间坚持的领域，现在新型的软件生态，无论是小程序，快应用，甚至区块链，都会首先瞄准 JS 开发者，因为有庞大的开发者群体，工具链也比较完善，所以长期坚持从事前端工作，在可预见的未来都不会“过时”。<br>
栈外技术，是指栈内技术的上下游，领域外的相关专业知识，包括但不限于服务端技术、运维、CDN、测试，甚至 UI 设计、产品设计等等，扩展你栈内技术的周围领域，充分理解你的工作在整个技术研发体系中处于怎样的环节。工作之余多投入一份精力，把其他栈外技术不断纳入到你的知识体系中来，建立栈外能力。前端想要做的深入，往往会涉及到缓存、模板渲染、用户体验等知识，没有相当的栈外技术积累，你很难为自己的团队争取到足够的话语权。<br>
我个人非常推崇“大前端”的概念，有点类似“全栈工程师”，但不是要求一个人全面专家，而是以前端为根，展开上下游的栈外技术学习，一专多能。我能在全民做到 CTO 的角色，也得益于早年在百度和 UC 积累的栈外技术经验，了解两家公司大部分产品线的运维和架构体系。</p>
<h3 id="第三，工程经验。">第三，工程经验。</h3>
<p>是指建设专业技术体系的“解决方案”，通俗的说，就是做事的“套路”，掌握从 0 到 1，1 到 60，甚至 60 到 100 分阶段建设专业技术体系的过程。工程经验涉及到技术选型、架构设计、性能优化，CI/CD，日志监控、系统测试等，这些是跟工程相关的方法论。很多的工程师没有总结自己工程经验的能力，我面试经常会问，你们觉得自己工作了两年、三年、四年和刚毕业的学生有什么差别？面试者说掌握了某某技术，但其实往往说的只是一些知识点。那些“今晚查完明天就会了的”不叫技术。决定你比别人更有专业价值的，其实是领域工程经验。你看过再多的文章也没有用，没真正实操过都不能称之为“掌握”。所以我建议要想掌握足够丰富的工程经验，需要在业务中多争取实践的机会。<br>
工程经验才是技术水平的分水岭。</p>
<h3 id="第四，带人做事。">第四，带人做事。</h3>
<p>之前三项都是个人专业技能方面的深度要求，带人做事是对团队协作能力的要求。我以前非常不理解一件事情，就是我自己明明做的很好，来了一个新人不能 get 到我的要求，怎么办？非常着急的时候，我说你别做了，我来吧。更有甚者，早年间在百度工作的时候，有同事白天辛辛苦苦写好的代码，晚上我 code review 之后直接给重构掉了，没过几天那位同学就提了离职。带人做事，是把自己擅长的事情，良好的习惯传递给他人，实现 1+1&gt;2 的生产力提升，让整个团队的产出高于自己。另外，这个阶段大家要特别注意『管』与『带』的区别。所谓『管』是”我不懂某个领域，但我知道你懂，你必须给我做好”，而『带』则是”我特别懂这个领域，我知道你不懂，我要教你做得更好”。有点授之以渔，甘当人梯，成就他人的意味。带好一个人或者带起一支有战斗力的团队，是做人做事成熟的表现。<br>
对技术有洁癖的人，往往缺乏耐心，带人容易走极端，如何引导新人成长，激发他人的能力，也是我在职业发展过程中要寻求的问题。管理上有一个特别好的方法，就是善于启发式的提问。提问的深度特别能体现一个人的能力水平，任何用于提要求的陈述句，都能转换成疑问句，在启发萌新的过程中植入对结果的约束。举一个例子，我想要老板给我加薪，如果直接说：『老板，我要加薪』，估计十之八九会被搪塞过去，但是转换一下，先问问『老板，我最近工作怎么样？』启发上司思考你的工作成果，引导他得出你应该被嘉奖的结论，或许是个不错的话术。当你让一个人做 A 的时候，他提出了方案 B。你不要强行扭转对方的思路提出 A，因为对于新人来讲，或许确实不能一步到位理解 A 方案，在他的能力约束下，只能想到 B。你带人呢，要尽量尝试把 A 和 B 之间有差异的地方转换成提问，你问他遇到这个问题怎么解决，遇到那个问题怎么解决，一直问到形成 A，他会带着思考去做事情。如果没有这个过程，没有让他思维演化的过程，虽然他收到了 A 的指令，但是他不理解，他会用别的方式做出来，最后得出来一个 C，然后你又重构一遍，陷入一个怪圈不能自拔，这就是我以前的误区，所以我现在特别注重提问的艺术。<br>
第五，业界发声。如果你前面做的非常好，基本上到了可以对外发声的程度。把自己的工作经验总结对外发布，与他人交流，碰撞思想，看到更高的山峰，然后修正自己的想法，日臻完善，是能走得更远的一种方式。有的时候真的要把自己的思想放到业界的层面验证它，自嗨有毒，大家好才是真的好。如果别人不认可你的这套思路，你的想法，基本上你也可以判定为自己没有达到一个更高的水平。不过通过业界发声获得认可，往往需要机会，可遇不可求，得之我幸，失之我命，这也和你所在的公司平台有关。在我技术声誉成长最快的地方就是在百度那几年，刚好一个大平台，做出一点成绩，但是小型创业公司出来分享，基本上没有人理你。永远不要放弃一技之长，没有所谓的转行或者转型，永远坚持你最初的领域，扩充你的外延，最终达成比较全面的能力，所以一技之长是值得你长期信仰的。</p>
<h3 id="第二阶段：独立做事。独立做事也有几个层次：独立-Coding：给你一个目标自己做完，不让别人给你擦屁股就可以了。">第二阶段：独立做事。独立做事也有几个层次：独立 Coding：给你一个目标自己做完，不让别人给你擦屁股就可以了。</h3>
<p>独立带人：要注重提问的水平，帮助他演进他的想法。</p>
<p>独立带团队：进入到这个阶段，要关注的更多，整个团队的氛围、工作效率，运用你一技之长的工程经验带领团队高效优质的产出成果，实现 1+1&gt;2。</p>
<p>独立做业务：团队稳定之后，开始关注所做的业务，行业的发展，理解你的用户，他们是谁，他们在哪，他们为什么使用你的产品，为团队指引下一步的产研方向。</p>
<p>独立生存：独立做事的最高水平，就是能带领一群人养活自己，独立生存下来。互联网的商业模型只有有限的那么几种，深谙其中的玩法，寻找擅长的合适的模型养活一群小伙伴，意味着一次更大的蜕变。</p>
<p>独立做事每个阶段，都是一次比较大的跨越，需要思想和多种软素质发生较大的变化，抛开技术人的身份不讲，独立做事的几个阶段，也是一个人逐渐成熟的过程，这是我过去 2 年多以来一直探求的结果。</p>
<p>前面讲到中年危机，在我看来，独立做事的最后一个阶段，独立生存，就是解决中年危机的终极答案。<br>
审视我自己，基本上一技之长已经达成，在业内也有一定的影响力。独立生存还在学习中。职业生涯最后一段，是拥有事业，这部分对我来说也是云里雾里，只能隐约看到，在这个阶段，你已经有团队，能独立生存了，接下来需要寻找到一份团队使命，如果今天我说，我想去做一个最赚钱的直播，估计台下很多人觉得没有人愿意跟我去做的，但是如果我说我想做年轻人最爱看的直播，也许很多人心动，这就是使命感的力量。使命可以凝聚人才，使命背后还需要有完善的商业模式。阿里巴巴的企业使命是『让天下没有难做的生意』，他们始终坚守这个企业使命，一开始做了阿里巴巴，又做了淘宝，发现跟用户沟通又做了旺旺，后来发现交易需要解决付钱的问题，又做了支付宝，后来又有了物流，所有大的战略方向无不围绕着自己的企业使命。<br>
以上就是我的个人成长模型，用五年的时间做一技之长，三年的时间独立做事，最后具体什么时候拥有事业，目前看来还是未知。以上模型分享给大家做一个参考，但是走什么样的路，取决于你想成为什么样的人。<br>
后面还有一些问题，我猜今天来，可能会很多人关心这些，我自己这几年带着问题走过很多城市，做过很多事情，那些曾经困扰我的问题也都慢慢得到解答。<br>
前端入门应该学些什么？现在前端领域知识很庞杂，各种框架林林总总，对于前端来说，是最好的时代，但是对于新人来说，也是最差的时代，不知道入门该从哪里入手。我特别推荐的就是谷歌的 DevTools 文档，<a href="https://developer.chrome.com/devtools" target="_blank" rel="noopener">https://developer.chrome.com/devtools</a> （需要翻墙），它囊括了很多前端基础知识，通过学习开发者工具，同时触达前端基础知识，浏览器运行原理，以及提升开发、调试效率，是一个比较好的入门捷径，有可以夯实基础。<br>
第二个事情是 CTO 平时都做些什么？一个是招聘，招聘面试是我平时要做的事情，我们有专门的 HR 团队，我会把我的帐号给人事的同学去登录，勾搭别人，有一些专业的高端人才，我会一直保持联系，寸志老师就是这样被我勾搭过来的（:逃。其次就是考虑技术团队的组织架构，我要参照曾经的经验设计一家公司的架构，一家公司的发展你要在不同的阶段做不同的调整，比如大数据，运维这样的团队，早期我会统一管理，随着公司发展，会考虑独立出来做特色的东西，不要受业务的干扰，这是组织架构。还有就是经常跟 CEO 聊天，游湖散步，把他的战略目标拆解成技术目标落地实现。另外就是跟合作厂商的沟通协作，创业公司需要借助各方力量，我可以通过置换商业资源的方式寻求行业其他公司的技术帮助，加快产研速度。<br>
怎么决定一个人的薪资、奖金、期权？薪资是一个人的未来能带来的收益的考量，它是一个市场价值，一个人不管来这家公司做出多少业绩，他达到这个水平，就要给他薪资；奖金是做出业绩的回报，是一个人过去做过的事情的价值衡量；最后一个是期权，如果这个人这家公司充满希望，你可以用一部分的薪资奖金兑换成期权，降低公司的成本。这是三者的关系。充分理解薪资、奖金、期权的关系，是一个 CTO 要关注的事，有助于建设良好团队氛围。<br>
如何建设好团队工作氛围？除了前面说到的待遇问题，还有很多举措可以用于建设良好的团队氛围。我是偏理性的管理者，我基本上不太会用个人关系，比如天天吃饭来去维护这个，我比较认可通过完善的机制，完善的规范来建设公平的环境，带领好的氛围。另外，好的氛围的根本，取决于业务，业务不向上，基本上你怎么做都是不好的氛围。<br>
再就是是不是技术做不下去的就要转管理？我觉得没有所谓的转管理，这个过程对我来说，只是在寻找独立做事的能力，最后怀揣着使命感，要达成梦想，是这样的过程。<br>
技术型人才是不是都不适合做管理？我曾经也有这样的怀疑，后来自己带团队，经历了一些事情，慢慢了解到，每个人都会形成自己的管理风格，没有适不适合的问题。管理上不是有个『五型管理风格』吗？老虎型、考拉型、孔雀型、猫头鹰型、变色龙型，这五种，没有谁好谁坏，只是不同的风格会带来不同的团队氛围。我估计很多技术同学刚开始带团队的时候都是老虎型。<br>
再就是刚毕业的人应该去大公司还是去创业公司。我觉得经历大公司很有必要，因为去到大公司，你会了解到『好是什么好』，我现在能做到这个位置，一定程度上得益于曾经在 B 和 A 的工作经历，大概知道一个团队如何从 1 发展到 60，再从 60 到 100。经历过大公司，知道了好是什么好，才有足够的视野和高度指引团队走下去。<br>
这一点我发现创业的时候一定要先做后学。2 年多前，我一个朋友有一天问我，『云龙，我要做个易企秀那样的平台需要多少成本？』，我说认识一个朋友，他们大概需要二三十人的团队做两三个月，可能需要两三百万的资金吧，他说这么高的成本，就不理我了。过了两天来找我，说搞定了，我很诧异，问他怎么解决的，他说在淘宝上买的，一套代码，100 多人民币，还带大量模板。这件事给我很大冲击，当你做技术决策的时候，尤其是创业公司，千万要先想到行业里面有什么可以直接用的，用公司的资源置换也好，商务采购也好，拿过来先用，用完以后再组团队去学，学完以后形成自己的一套东西，是这样的过程。<br>
最后一个问题就是如何体现技术团队的价值。如果一个公司都是产品设计运营做的好，我们怎么知道是技术做的好，这是一个技术管理者要非常清楚的要点，才能让团队有方向可以遵循。<br>
这里我大概总结了 3 个要点：技术产品质量、开发效率和体验性能。<br>
这里有一张漫画，当线上服务一切正常时，老板回想『一切风平浪静，真不知道我要雇这群研发干什么』，而当线上出现事故，老板又会想『成天出问题，真不知道雇你们这群研发干什么』，这种现象其实很普遍，技术产品质量是基础，稳定压倒一切。其次能体现技术价值的就是在稳定的基础上，提升开发效率，快速迭代，快速上线，小步快跑。但做到以上两点，只是基本满足业务要求而已，不被诟病，但要进一步体现技术的价值，就要在性能上做文章了。右图是亚马逊提出的一个概念，网站打开速度每降低 0.1 秒，网站就能多增加 1%的收益，优秀的团队需要在业务核心性能指标上下功夫，突破秒级的打开速度。<br>
最后特别要感谢两个职业生涯中遇到的贵人。第一位是我刚入行时的第一位导师，在百度任职的朱旭，为人很淡泊，在百度工作十年如一日，非常低调踏实，培养新人也真正做到了甘当人梯，给我很多启蒙指导。第二位是我在 UC 的老大，离开 UC 之后我们也是亦师亦友的关系，给我很多管理上的启蒙，在我带人做事最迷茫的那段时间指引方向，给出答案。最后，非常感谢大家！ ###转载于前端里：<br>
<a href="http://www.yyyweb.com/5059.html" target="_blank" rel="noopener">前端里</a></p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>路由原理</title>
    <url>/2018/06/28/2018-06-28-%E8%B7%AF%E7%94%B1%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h3 id="前端路由实现起来其实很简单，本质就是监听-URL-的变化，然后匹配路由规则，显示相应的页面，并且无须刷新。目前单页面使用的路由就只有两种实现方式">前端路由实现起来其实很简单，本质就是监听 URL 的变化，然后匹配路由规则，显示相应的页面，并且无须刷新。目前单页面使用的路由就只有两种实现方式</h3>
<ol>
<li>hash 模式</li>
<li>history 模式</li>
</ol>
<hr>
<a id="more"></a>
<h3 id="www-test-com-就是-Hash-URL，当-后面的哈希值发生变化时，不会向服务器请求数据，可以通过-hashchange-事件来监听到-URL-的变化，从而进行跳转页面。"><a href="http://www.test.com/##/" target="_blank" rel="noopener">www.test.com/##/</a> 就是 Hash URL，当 ## 后面的哈希值发生变化时，不会向服务器请求数据，可以通过 hashchange 事件来监听到 URL 的变化，从而进行跳转页面。</h3>
<p><img src="http://www.cc12210.xyz/usr/uploads/2018/12/303575652.png" alt="hash模式.png"></p>
<hr>
<h3 id="History-模式是-HTML5-新推出的功能，比之-Hash-URL-更加美观">History 模式是 HTML5 新推出的功能，比之 Hash URL 更加美观</h3>
<p><img src="http://www.cc12210.xyz/usr/uploads/2018/12/910244050.png" alt="history模式.png"></p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Virtual Dom(虚拟dom节点)</title>
    <url>/2018/07/03/2018-07-03-Virtual_Dom(%E8%99%9A%E6%8B%9Fdom%E8%8A%82%E7%82%B9)/</url>
    <content><![CDATA[<h2 id="为什么需要-Virtual-Dom">为什么需要 Virtual Dom?</h2>
<h4 id="众所周知，操作-DOM-是很耗费性能的一件事情，既然如此，我们可以考虑通过-JS-对象来模拟-DOM-对象，毕竟操作-JS-对象比操作-DOM-省时的多。">众所周知，操作 DOM 是很耗费性能的一件事情，既然如此，我们可以考虑通过 JS 对象来模拟 DOM 对象，毕竟操作 JS 对象比操作 DOM 省时的多。</h4>
<h3 id="可以说虚拟-dom-节点就是-js-对象-在-js-中创建对象是消耗的性能是可以忽略不计的">可以说虚拟 dom 节点就是 js 对象,在 js 中创建对象是消耗的性能是可以忽略不计的</h3>
<p>在创建 dom 节点时创建一个 js 对象，当新的修改时创建一个新的 dom 的 js 对象，通过新旧对象对比来修改部分需要修改的 dom 节点</p>
<h2 id="Virtual-Dom-算法简述">Virtual Dom 算法简述</h2>
<p>既然我们已经通过 JS 来模拟实现了 DOM，那么接下来的难点就在于如何判断旧的对象和新的对象之间的差异。</p>
<p>DOM 是多叉树的结构，如果需要完整的对比两颗树的差异，那么需要的时间复杂度会是 O(n ^ 3)，这个复杂度肯定是不能接受的。于是 React 团队优化了算法，实现了 O(n) 的复杂度来对比差异。</p>
<p>实现 O(n) 复杂度的关键就是只对比同层的节点，而不是跨层对比，这也是考虑到在实际业务中很少会去跨层的移动 DOM 元素。</p>
<a id="more"></a>
<p>所以判断差异的算法就分为了两步</p>
<ul>
<li>首先从上至下，从左往右遍历对象，也就是树的深度遍历，这一步中会给每个节点添加索引，便于最后渲染差异</li>
<li>一旦节点有子元素，就去判断子元素是否有不同</li>
</ul>
<h2 id="Virtual-Dom-算法实现">Virtual Dom 算法实现</h2>
<h3 id="树的递归">树的递归</h3>
<ul>
<li>新的节点的 tagName 或者 key 和旧的不同，这种情况代表需要替换旧的节点，并且也不再需要遍历新旧节点的子元素了，因为整个旧节点都被删掉了</li>
<li>新的节点的 tagName 和 key（可能都没有）和旧的相同，开始遍历子树</li>
<li>没有新的节点，那么什么都不用做</li>
</ul>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>虚拟dom节点</tag>
      </tags>
  </entry>
  <entry>
    <title>vue多页面配置文件</title>
    <url>/2018/08/09/2018-08-09-vue%E5%A4%9A%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vue.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  pages: &#123;</span><br><span class="line">    index: &#123;</span><br><span class="line">      <span class="comment">// page 的入口</span></span><br><span class="line">      entry: <span class="string">"src/index/main.js"</span>,</span><br><span class="line">      <span class="comment">// 模板来源</span></span><br><span class="line">      template: <span class="string">"public/index.html"</span>,</span><br><span class="line">      <span class="comment">// 在 dist/index.html 的输出</span></span><br><span class="line">      filename: <span class="string">"index.html"</span>,</span><br><span class="line">      <span class="comment">// 当使用 title 选项时，</span></span><br><span class="line">      <span class="comment">// template 中的 title 标签需要是 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span></span><br><span class="line">      title: <span class="string">"Index Page"</span>,</span><br><span class="line">      <span class="comment">// 在这个页面中包含的块，默认情况下会包含</span></span><br><span class="line">      <span class="comment">// 提取出来的通用 chunk 和 vendor chunk。</span></span><br><span class="line">      chunks: [<span class="string">"chunk-vendors"</span>, <span class="string">"chunk-common"</span>, <span class="string">"index"</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 当使用只有入口的字符串格式时，</span></span><br><span class="line">    <span class="comment">// 模板会被推导为 `public/subpage.html`</span></span><br><span class="line">    <span class="comment">// 并且如果找不到的话，就回退到 `public/index.html`。</span></span><br><span class="line">    <span class="comment">// 输出文件名会被推导为 `subpage.html`。</span></span><br><span class="line">    subpage: <span class="string">"src/subpage/main.js"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Git命令</title>
    <url>/2018/07/17/2018-07-17-Git%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="配置个人信息">配置个人信息</h3>
<h4 id="–global-等价于-g-代指全局">–global 等价于-g 代指全局</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的名字&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure>
<h3 id="创建-ssh-密钥">创建 ssh 密钥</h3>
<h4 id="密钥的意义在于和你的-GitHub-识别，添加密钥之后就可以往你的-GitHub-仓库里提交代码了">密钥的意义在于和你的 GitHub 识别，添加密钥之后就可以往你的 GitHub 仓库里提交代码了</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youeamil@explode.com&quot;</span><br><span class="line">linux ~&#x2F;.ssh    window C盘&gt;用户&gt;用户名&gt;ssh</span><br><span class="line">复制id_rsa.pub中文件，在GitHub上SSH Keys中，点击Add SSH key把复制的信息粘贴就可以使用git了</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="git-仓库的基本命令">git 仓库的基本命令</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init                      初始化仓库,会生成一个.git的隐藏文件夹</span><br><span class="line">git add 文件名                 把文件添加到git仓库暂存区</span><br><span class="line">git status                    查看仓库状态</span><br><span class="line">git commit -m &quot;提交说明&quot;       把文件提交到仓库</span><br><span class="line">commit 是一次性提交，add可以多次添加不同文件，add . 表示添加所有文件</span><br><span class="line">最后git push 即可提交代码</span><br><span class="line">git pull origin master&#x2F;git pull  是拉取远程仓库代码，一般用于多人协作开发，碰到冲突之后必须pull，然后手动解决冲突</span><br></pre></td></tr></table></figure>
<p>###版本回退</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^      回退到上一个版本</span><br><span class="line">git reset --hard commit-id  到达commit-id版本 commit-id是每次提交之后有的一段唯一的hash值</span><br><span class="line">git reflog                  记录你的每一次命令</span><br><span class="line">在git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，第一百个版本HEAD~100</span><br></pre></td></tr></table></figure>
<p>###创建分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch                  查看当前分支，前面有*号的是当前分支</span><br><span class="line">git branch  -a              查看所有分支</span><br><span class="line">git branch 分支名            创建分支</span><br><span class="line">git checkout -b dev         git checkout 切换分支，-b 表示创建并切换</span><br></pre></td></tr></table></figure>
<p>###合并分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge dev    git merge 用于合并指定分支到当前分支</span><br><span class="line">Fast-forward     表示这次合并是快进模式，合并速度很快</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>来测测你的听力年龄几岁？</title>
    <url>/2018/10/02/2018-10-02-%E6%9D%A5%E6%B5%8B%E6%B5%8B%E4%BD%A0%E7%9A%84%E5%90%AC%E5%8A%9B%E5%B9%B4%E9%BE%84%E5%87%A0%E5%B2%81%EF%BC%9F/</url>
    <content><![CDATA[<p>!!!<br>
<video src="../../../blogImg/00597.mp4" width="375" height="auto" controls="controls"><br>
</video><br>
!!!<br>
视频取自 B 站 UP 主<a href="https://space.bilibili.com/205631797/#/" target="_blank" rel="noopener">果壳,「更好看的知识小视频」</a></p>
<hr>
<p>文章摘自 公众号：奇趣少年</p>
<p><img src="http://www.cc12210.xyz/usr/uploads/2018/10/1113490350.jpg" alt="9AE5EF8FA940328D37EB24C1F4DD9955AC4AF19B_size59_w1000_h953.jpg"></p>
<p>之所以会听到不同的声音<br>
是因为在耳朵内<br>
有数千个微小的神经细胞<br>
叫做毛细胞<br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/10/2222166572.jpg" alt="FE0173EB0A6FBEE596E292FE5C17EE71E59F68B2_size39_w1080_h628.jpg"><br>
他们就像一个公司的员工一样<br>
每天的工作就是接收声音信号<br>
然后再把它传给大脑<br>
不同的员工负责不同频次的声音<br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/10/1882154150.gif" alt="6D8929178D12BB2FDA399FF531A801EC3A064720_size643_w446_h328.gif"><br>
不过这个公司从不招收新员工<br>
老员工退休后<br>
不会有人接替他的工作<br>
内耳没有再生能力,细胞受损后无法恢复<br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/10/4066386093.gif" alt="0AB40991328BB53C85680586635EF9496507517A_size2002_w569_h287.gif"><br>
而在接收声音的过程中<br>
最先开始工作的就是<br>
负责高频段的员工<br>
因此，他们承受着更高的工作压力<br>
衰老地更快，退休地也更早<br>
缺少负责高频段的员工<br>
公司只能削减手机高频声音的业务<br>
因此，随着年龄的增长<br>
我们会越来越难听到高频率的声音<br>
所以以后大家要保护好自己耳朵<br>
控制戴耳机得音量和时长</p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>常用正则</title>
    <url>/2018/08/17/2018-08-17-%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99/</url>
    <content><![CDATA[<h3 id="校验数字的表达式">校验数字的表达式</h3>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">1 数字：^[0-9]_$</span><br><span class="line">2 n位的数字：^\d&#123;n&#125;$</span><br><span class="line">3 至少 n 位的数字：^\d&#123;n,&#125;$</span><br><span class="line">4 m-n位的数字：^\d&#123;m,n&#125;$</span><br><span class="line">5 零和非零开头的数字：^(0|[<span class="string">1-9</span>][<span class="symbol">0-9</span>]_)$</span><br><span class="line">6 非零开头的最多带两位小数的数字：^([<span class="string">1-9</span>][<span class="symbol">0-9</span>]*)+(.[0-9]&#123;1,2&#125;)?$</span><br><span class="line">7 带 1-2 位小数的正数或负数：^(\-)?\d+(\.\d&#123;1,2&#125;)?$</span><br><span class="line">8 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$</span><br><span class="line">9 有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$</span><br><span class="line">10 有1~3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$</span><br><span class="line">11 非零的正整数：^[<span class="string">1-9</span>]\d<span class="emphasis">*\$ 或 ^([1-9][0-9]*</span>)&#123;1,3&#125;$ 或 ^\+?[<span class="string">1-9</span>][<span class="symbol">0-9</span>]*$</span><br><span class="line">12 非零的负整数：^\-[<span class="string">1-9</span>][<span class="symbol"></span>]0-9"<span class="emphasis">_\$ 或 ^-[1-9]\d_</span>$</span><br><span class="line">13 非负整数：^\d+$ 或 ^[1-9]\d*|0\$</span><br><span class="line">14 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</span><br><span class="line">15 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d<span class="emphasis">*\.\d*</span>|0\.\d<span class="emphasis">*[1-9]\d*</span>|0?\.0+|0$</span><br><span class="line">16 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d<span class="emphasis">*\.\d*</span>|0\.\d<span class="emphasis">*[1-9]\d*</span>))|0?\.0+|0$</span><br><span class="line">17 正浮点数：^[<span class="string">1-9</span>]\d<span class="emphasis">*\.\d*</span>|0\.\d<span class="emphasis">*[1-9]\d*</span>$ 或 ^(([<span class="string">0-9</span>]+\.[<span class="string">0-9</span>]<span class="emphasis">*[1-9][0-9]*</span>)|([<span class="string">0-9</span>]<span class="emphasis">*[1-9][0-9]*</span>\.[<span class="string">0-9</span>]+)|([<span class="string">0-9</span>]<span class="emphasis">*[1-9][0-9]*</span>))$</span><br><span class="line">18 负浮点数：^-([<span class="string">1-9</span>]\d<span class="emphasis">*\.\d*</span>|0\.\d<span class="emphasis">*[1-9]\d*</span>)$ 或 ^(-(([<span class="string">0-9</span>]+\.[<span class="string">0-9</span>]<span class="emphasis">*[1-9][0-9]*</span>)|([<span class="string">0-9</span>]<span class="emphasis">*[1-9][0-9]*</span>\.[<span class="string">0-9</span>]+)|([<span class="string">0-9</span>]<span class="emphasis">*[1-9][0-9]*</span>)))$</span><br><span class="line">19 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d<span class="emphasis">*\.\d*</span>|0\.\d<span class="emphasis">*[1-9]\d*</span>|0?\.0+|0)$</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="校验字符">校验字符</h3>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">1 汉字：^[\u4e00-\u9fa5]&#123;0,&#125;$</span><br><span class="line">2 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$</span><br><span class="line">3 长度为3-20的所有字符：^.&#123;3,20&#125;$</span><br><span class="line">4 由 26 个英文字母组成的字符串：^[A-Za-z]+$</span><br><span class="line">5 由26个大写英文字母组成的字符串：^[A-Z]+$</span><br><span class="line">6 由 26 个小写英文字母组成的字符串：^[a-z]+$</span><br><span class="line">7 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</span><br><span class="line">8 由数字、26 个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&#123;3,20&#125;$</span><br><span class="line">9 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</span><br><span class="line">10 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]&#123;2,20&#125;$</span><br><span class="line">11 可以输入含有^%&amp;',;=?$\"等字符：[^%&amp;',;=?$\x22]+</span><br><span class="line">12 禁止输入含有~的字符：[^~\x22]+</span><br></pre></td></tr></table></figure>
<h3 id="特殊需求">特殊需求</h3>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">1 Email 地址：^\w+([-+.]\w+)<span class="emphasis">_@\w+([-.]\w+)_</span>\.\w+([-.]\w+)_\$</span><br><span class="line">2 域名：[<span class="string">a-zA-Z0-9</span>][<span class="symbol">-a-za-z0-9</span>]&#123;0,62&#125;(/.[<span class="string">a-zA-Z0-9</span>][<span class="symbol">-a-za-z0-9</span>]&#123;0,62&#125;)+/.?</span><br><span class="line">3 InternetURL：[a-zA-z]+://[^\s]_ 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</span><br><span class="line">4 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$</span><br><span class="line">5 电话号码("XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX)：^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$</span><br><span class="line">6 国内电话号码(0511-4405222、021-87888822)：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;</span><br><span class="line">7 身份证号：</span><br><span class="line">15 或 18 位身份证：^\d&#123;15&#125;|\d&#123;18&#125;$</span><br><span class="line">15位身份证：^[1-9]\d&#123;7&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;$</span><br><span class="line">18 位身份证：^[1-9]\d&#123;5&#125;[1-9]\d&#123;3&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;4&#125;$</span><br><span class="line">8 短身份证号码(数字、字母x结尾)：^([0-9])&#123;7,18&#125;(x|X)?$ 或 ^\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$</span><br><span class="line">9 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[<span class="string">a-zA-Z</span>][<span class="symbol">a-zA-Z0-9_</span>]&#123;4,15&#125;$</span><br><span class="line">10 密码(以字母开头，长度在 6~18 之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;5,17&#125;$</span><br><span class="line">11 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.<span class="emphasis">*\d)(?=.*</span>[a-z])(?=.*[A-Z]).&#123;8,10&#125;$</span><br><span class="line">12 日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;</span><br><span class="line">13 一年的 12 个月(01 ～ 09 和 1 ～ 12)：^(0?[1-9]|1[0-2])$</span><br><span class="line">14 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$</span><br><span class="line">15 钱的输入格式：</span><br><span class="line">16 1.有四种钱的表示形式我们可以接受:"10000.00" 和 "10,000.00", 和没有 "分" 的 "10000" 和 "10,000"：^[<span class="string">1-9</span>][<span class="symbol">0-9</span>]_\$</span><br><span class="line">17 2.这表示任意一个不以 0 开头的数字,但是,这也意味着一个字符"0"不通过,所以我们采用下面的形式：^(0|[<span class="string">1-9</span>][<span class="symbol">0-9</span>]_)$ </span><br><span class="line">18 3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[<span class="string">1-9</span>][<span class="symbol">0-9</span>]*)$</span><br><span class="line">19 4.这表示一个 0 或者一个可能为负的开头不为 0 的数字.让用户以 0 开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ </span><br><span class="line">20 5.必须说明的是,小数点后面至少应该有1位数,所以"10."是不通过的,但是 "10" 和 "10.2" 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$</span><br><span class="line">21 6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$ </span><br><span class="line">22 7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$</span><br><span class="line">23 8.1 到 3 个数字,后面跟着任意个 逗号+3 个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)_)(.[0-9]&#123;1,2&#125;)?\$</span><br><span class="line">24 备注：这就是最终结果了,别忘了"+"可以用"_"替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</span><br><span class="line">25 xml 文件：^([<span class="string">a-zA-Z</span>]+-?)+[<span class="string">a-zA-Z0-9</span>]+\\.[<span class="string">x|X</span>][<span class="symbol">m|m</span>][<span class="string">l|L</span>]$</span><br><span class="line">26 中文字符的正则表达式：[\u4e00-\u9fa5]</span><br><span class="line">27 双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</span><br><span class="line">28 空白行的正则表达式：\n\s*\r (可以用来删除空白行)</span><br><span class="line">29 HTML标记的正则表达式：<span class="xml"><span class="tag">&lt;<span class="name">(\S*?)[^</span>&gt;</span></span>]<span class="emphasis">*&gt;.*</span>?<span class="xml"><span class="tag">&lt;/<span class="name">\1</span>&gt;</span></span>|<span class="xml"><span class="tag">&lt;<span class="name">.*?</span> /&gt;</span></span> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</span><br><span class="line">30 首尾空白字符的正则表达式：^\s<span class="emphasis">*|\s*</span>$或(^\s<span class="emphasis">*)|(\s*</span>\$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</span><br><span class="line">31 腾讯 QQ 号：[<span class="string">1-9</span>][<span class="symbol">0-9</span>]&#123;4,&#125; (腾讯 QQ 号从 10000 开始)</span><br><span class="line">32 中国邮政编码：[1-9]\d&#123;5&#125;(?!\d) (中国邮政编码为 6 位数字)</span><br><span class="line">33 IP 地址：\d+\.\d+\.\d+\.\d+ (提取 IP 地址时有用)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>数组去重及计算元素出现的次数</title>
    <url>/2018/10/03/2018-10-03-%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E5%8F%8A%E8%AE%A1%E7%AE%97%E5%85%83%E7%B4%A0%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</url>
    <content><![CDATA[<h3 id="数组去重-一">数组去重(一)</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noRepate</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr2 = [];</span><br><span class="line">  <span class="comment">// 遍历数组arr</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//判断如果arr2中存在当前元素，跳过。如果不存在，加入到arr2中</span></span><br><span class="line">    <span class="keyword">if</span> (arr2.indexOf(arr[i]) == <span class="number">-1</span>) &#123;</span><br><span class="line">      arr2.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//返回去重后的数组arr2</span></span><br><span class="line">  <span class="keyword">return</span> arr2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="数组去重-二">数组去重(二)</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noRepate</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="comment">// 遍历数组arr</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//判断对象是否存在当前属性，如果不存在，设置属性。</span></span><br><span class="line">    <span class="keyword">if</span> (!obj[arr[i]]) &#123;</span><br><span class="line">      obj[arr[i]] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">123</span>, <span class="number">23</span>, <span class="number">43</span>, <span class="number">54</span>, <span class="number">34</span>, <span class="number">12</span>, <span class="number">34</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">122</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">12</span>];</span><br><span class="line">arr = noRepate(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>
<h3 id="数组去重-三">数组去重(三)</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//es6的语法糖还是很给力的，其实一句代码就可以实现数组去重</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">set</span> = new Set(arr);</span><br><span class="line">var arr2 = [...<span class="keyword">set</span>];</span><br></pre></td></tr></table></figure>
<h3 id="统计数组中每个元素出现的个数">统计数组中每个元素出现的个数</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"c"</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj[arr[j]]) &#123;</span><br><span class="line">    <span class="comment">// 对象存在属性</span></span><br><span class="line">    obj[arr[j]] = obj[arr[j]] + <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    obj[arr[j]] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>愉快的周六，恭喜ig</title>
    <url>/2018/10/27/2018-10-27-%E6%84%89%E5%BF%AB%E7%9A%84%E5%91%A8%E5%85%AD%EF%BC%8C%E6%81%AD%E5%96%9Cig/</url>
    <content><![CDATA[<p><img src="http://www.cc12210.xyz/usr/uploads/2018/10/1269262457.jpg" alt="夜景"><br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/10/1113427542.jpg" alt="夜景2"><br>
枯燥的礼拜六，倒腾了一下腾讯云的对象存储，云点播。弄到最后发现都需要收一个流量费，有点像收电费一样，只要走了流量就要收钱，可选的两种方式，要么包时长，要么包资源大小限制。云点播只有 10g 的流量包，点播视频 10g 是远远不够用的，所以还是选择将内存较小的视频放在自己服务器上解析，一些比较大的视频在秒拍上引入别人的视频资源链，有些视频加载速度可能会有点慢，但是胜在不花多余的钱。</p>
<hr>
<p>下午 16：00 IG vs G2<br>
G2 是真的弱，讲真，RNG 没有道理会输给他们，但是看了宝来那个闪现挡子弹大概是理解了，他们是真的在认真对待这个比赛。RNG 那盘 MLXG 在复活甲被打掉之前还帮中单小虎吃了一颗子弹，结果小虎头也不回的就走了，复活甲就那么浪费了。<br>
IG 有机会角逐 S8 的冠军，希望好好加油，今天下午这场比赛真的看的很过瘾，无敌莽的 The Shy,打的很精彩<br>
小龙坑剑魔的三段 Q 真的太强了，IG 加油<br>
!!!<br>
<img src="../../../blogImg/jianmo.gif" alt="剑魔"><br>
!!!<br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/10/1380965484.jpg" alt="adaf2edda3cc7cd92573c5b13401213fb80e9178.jpg"><br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/10/1629533070.jpg" alt="b03533fa828ba61e489739474c34970a304e5959.jpg"><br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/10/3528636295.jpg" alt="377adab44aed2e73b4aa77448a01a18b87d6fa13.jpg"></p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>ajax的简单封装</title>
    <url>/2018/11/19/2018-11-19-ajax%E7%9A%84%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendAjax</span>(<span class="params">url, options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//设置默认值</span></span><br><span class="line">  <span class="keyword">var</span> _default = &#123;</span><br><span class="line">    method: <span class="string">"GET"</span>,</span><br><span class="line">    data: <span class="literal">null</span>,</span><br><span class="line">    success: <span class="literal">null</span>,</span><br><span class="line">    error: <span class="literal">null</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 替换默认值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> options) &#123;</span><br><span class="line">    _default[i] = options[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 解决缓存， 保证每一次请求地址都不一样，就可以解决</span></span><br><span class="line">  <span class="comment">//拼接字符串， get请求</span></span><br><span class="line">  <span class="keyword">if</span> (_default.method.toUpperCase() == <span class="string">"GET"</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果url中存在?, 默认添加&amp;符号</span></span><br><span class="line">    <span class="keyword">var</span> f = url.indexOf(<span class="string">"?"</span>) &gt; <span class="number">-1</span> ? <span class="string">"&amp;"</span> : <span class="string">"?"</span>;</span><br><span class="line">    url += f + <span class="string">"_="</span> + <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j <span class="keyword">in</span> _default.data) &#123;</span><br><span class="line">      url += <span class="string">"&amp;"</span> + j + <span class="string">"="</span> + _default.data[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// url拼接成功, get请求send中不需要参数,把他转换为null;</span></span><br><span class="line">    _default.data = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.open(_default.method, url, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在发送时, 先把对象转换为json字符串(传输格式为字符串)</span></span><br><span class="line">  _default.data = <span class="built_in">JSON</span>.stringify(_default.data);</span><br><span class="line">  xhr.send(_default.data);</span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取返回的内容</span></span><br><span class="line">        <span class="keyword">var</span> val = xhr.responseText;</span><br><span class="line">        val = <span class="built_in">JSON</span>.parse(val);</span><br><span class="line">        <span class="keyword">if</span> (val.msg == <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> _default.success === <span class="string">"function"</span>) &#123;</span><br><span class="line">            _default.success(val);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> _default.error === <span class="string">"function"</span>) &#123;</span><br><span class="line">          _default.error(val);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>付费音乐下载软件推荐</title>
    <url>/2018/10/28/2018-10-28-%E4%BB%98%E8%B4%B9%E9%9F%B3%E4%B9%90%E4%B8%8B%E8%BD%BD%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<p><img src="http://www.cc12210.xyz/usr/uploads/2018/10/2328030149.jpg" alt="版权"><br>
音乐的版权是越争越激烈，用惯了某个 app，可是这个 app 又听不到想要的音乐，要么没有要么得充钱开会员。<br>
最近看到个还不错的 app，不知道能用多久，测试了一下效果还是可以的，基本上都能搜得到<br>
!!!<br>
<a href="../../../blogImg/yingying.apk">嘤嘤音乐</a><br>
!!!<br>
如果下载速度比较慢的可以考虑到下面这个蓝奏云链接下载,这个是别人分享的，所以可能会失效<br>
!!!<br>
<a href="https://www.lanzous.com/i23rqha" target="_blank" rel="noopener">蓝奏云下载</a><br>
!!!</p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>教程</category>
      </categories>
  </entry>
  <entry>
    <title>永动机真的存在吗</title>
    <url>/2018/11/03/2018-11-03-%E6%B0%B8%E5%8A%A8%E6%9C%BA%E7%9C%9F%E7%9A%84%E5%AD%98%E5%9C%A8%E5%90%97/</url>
    <content><![CDATA[<p>永动机是一类所谓不需外界输入能源、能量或在仅有一个热源的条件下便能够不断运动并且对外做功的机械。不消耗能量而能永远对外做功的机器，它违反了能量守恒定律，故称为“第一类永动机”。在没有温度差的情况下，从自然界中的海水或空气中不断吸取热量而使之连续地转变为机械能的机器，它违反了热力学第二定律，故称为“第二类永动机”。这两类永动机是违反当前客观科学规律的概念，是不能够被制造出来的。<br>
视频引自微博 <a href="https://weibo.com/u/6174606644?topnav=1&wvr=6&topsug=1" target="_blank" rel="noopener">混乱博物馆</a></p>
<hr>
<p><video src="http://gslb.miaopai.com/stream/72ApUPRNdy0tN92S6-1nsdOUNkAX0NJuV~g8ag__.mp4?vend=miaopai&ssig=dde8c60f8c60d63a76d32a43be1ac110&time_stamp=1541218156998"></video></p>
<hr>
<p>分享一张微博上看到的特别逗得一张图<br>
<img src="http://www.cc12210.xyz/usr/uploads/2018/11/1171053938.jpg" alt="006hHB37ly1fwujlewi7dj30j604baac.jpg"></p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>一段神奇的javascript</title>
    <url>/2018/12/01/2018-12-01-%E4%B8%80%E6%AE%B5%E7%A5%9E%E5%A5%87%E7%9A%84javascript/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ﾟωﾟﾉ= <span class="regexp">/｀ｍ´）ﾉ ~┻━┻   /</span><span class="comment">/*´∇｀*/</span> [<span class="string">'_'</span>]; o=(ﾟｰﾟ)  =_=<span class="number">3</span>; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)=&#123;ﾟΘﾟ: <span class="string">'_'</span> ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==<span class="number">3</span>) +<span class="string">'_'</span>) [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ <span class="string">'_'</span>)[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">'_'</span>)[ﾟｰﾟ] &#125;; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==<span class="number">3</span>) +<span class="string">'_'</span>) [c^_^o];(ﾟДﾟ) [<span class="string">'c'</span>] = ((ﾟДﾟ)+<span class="string">'_'</span>) [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) [<span class="string">'o'</span>] = ((ﾟДﾟ)+<span class="string">'_'</span>) [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) [<span class="string">'c'</span>]+(ﾟДﾟ) [<span class="string">'o'</span>]+(ﾟωﾟﾉ +<span class="string">'_'</span>)[ﾟΘﾟ]+ ((ﾟωﾟﾉ==<span class="number">3</span>) +<span class="string">'_'</span>) [ﾟｰﾟ] + ((ﾟДﾟ) +<span class="string">'_'</span>) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">'_'</span>) [ﾟΘﾟ]+((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">'_'</span>) [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) [<span class="string">'c'</span>]+((ﾟДﾟ)+<span class="string">'_'</span>) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) [<span class="string">'o'</span>]+((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">'_'</span>) [ﾟΘﾟ];(ﾟДﾟ) [<span class="string">'_'</span>] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">'_'</span>) [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+<span class="string">'_'</span>) [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">'_'</span>) [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">'_'</span>) [ﾟΘﾟ]+ (ﾟωﾟﾉ +<span class="string">'_'</span>) [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]=<span class="string">'\\'</span>; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +<span class="string">'_'</span>)[c^_^o];(ﾟДﾟ) [ﾟoﾟ]=<span class="string">'\"'</span>;(ﾟДﾟ) [<span class="string">'_'</span>] ( (ﾟДﾟ) [<span class="string">'_'</span>] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) (<span class="string">'_'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Parting-is-such-sweet-sorrow-离别是如此甜蜜的悲伤">Parting is such sweet sorrow(离别是如此甜蜜的悲伤)</h3>
<h3 id="a-href-http-utf-8-jp-public-aaencode-html-转换的网址-a"><a href="http://utf-8.jp/public/aaencode.html" target="_blank" rel="noopener">转换的网址</a></h3>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>前端冷门知识</title>
    <url>/2018/11/05/2018-11-05-%E5%89%8D%E7%AB%AF%E5%86%B7%E9%97%A8%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.contentEditable = <span class="string">"true"</span>;</span><br></pre></td></tr></table></figure>
<p>你只要在控制台运行了这段代码,那么你这个页面就变成可编辑的状态了<br>
想要复制的文本内容，直接复制就行</p>
<h3 id="加载-CDN-文件时，可以省掉-HTTP-标识">加载 CDN 文件时，可以省掉 HTTP 标识</h3>
<p>现在很流行的 CDN 即从专门的服务器加载一些通用的 JS 和 CSS 文件，出于安全考虑有的 CDN 服务器使用 HTTPS 方式连接，而有的是传统的 HTTP，其实我们在使用时可以忽略掉这个，将它从 URL 中省去。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//domain.com/path/to/script.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="一个非常有意思的-css">一个非常有意思的 css</h3>
<h4 id="你的这个页面将没有了鼠标光标">你的这个页面将没有了鼠标光标</h4>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="不声明第三个变量的值交换">不声明第三个变量的值交换</h3>
<p>我们都知道交换两个变量值的常规做法，那就是声明一个中间变量来暂存。但鲜有人去挑战不声明中间变量的情况，下面的代码给出了这种实现。蛮有创意 的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>,</span><br><span class="line">    b=<span class="number">2</span>;</span><br><span class="line">a=[b,b=a][<span class="number">0</span>];</span><br><span class="line">输出结果:a:<span class="number">2</span> b:<span class="number">1</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>将U盘当作Git主机</title>
    <url>/2018/12/04/2018-12-04-%E5%B0%86U%E7%9B%98%E5%BD%93%E4%BD%9CGit%E4%B8%BB%E6%9C%BA/</url>
    <content><![CDATA[<h3 id="在-U-盘建一个仓库文件夹">在 U 盘建一个仓库文件夹</h3>
<p>在 U 盘建一个文件夹，名称随意。</p>
<h4 id="在当前文件夹打开-Git-Bash，并初始化，加参数-code-–bare-code">在当前文件夹打开 Git Bash，并初始化，加参数<code>–bare</code></h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init --bare</span><br></pre></td></tr></table></figure>
<h3 id="然后在本地创建仓库">然后在本地创建仓库</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<h4 id="正常的提交代码就行，设置一下-remote">正常的提交代码就行，设置一下 remote</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add usb H:&#x2F;Repo&#x2F;test</span><br><span class="line">usb是随意取得，后面跟的是U盘的路径</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="推送到仓库">推送到仓库</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push usb master</span><br><span class="line">上面取名为usb，那么这里也要用usb</span><br></pre></td></tr></table></figure>
<h3 id="从仓库取出">从仓库取出</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在另一个位置初始化一个目录，如D:&#x2F;&#x2F;</span><br><span class="line">git init test-client</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">然后进入此目录，为此目录添加一个remote</span><br><span class="line">git remote add usb H:&#x2F;Repo&#x2F;test</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">再将远程内容pull到这里</span><br><span class="line">git pull usb master:master</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript编码规范 一 (缩进，空格，换行)</title>
    <url>/2019/01/08/2019-01-08-javascript%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83_%E4%B8%80_(%E7%BC%A9%E8%BF%9B%EF%BC%8C%E7%A9%BA%E6%A0%BC%EF%BC%8C%E6%8D%A2%E8%A1%8C)/</url>
    <content><![CDATA[<h3 id="1-前言">1. 前言</h3>
<p>JavaScript 在百度一直有着广泛的应用，特别是在浏览器端的行为管理。本文档的目标是使 JavaScript 代码风格保持一致，容易被理解和被维护。<br>
虽然本文档是针对 JavaScript 设计的，但是在使用各种 JavaScript 的预编译语言时(如 TypeScript 等)时，适用的部分也应尽量遵循本文档的约定。</p>
<h3 id="2-代码风格">2. 代码风格</h3>
<h4 id="2-1-文件">2.1. 文件</h4>
<p>·[建议] JavaScript 文件使用无 BOM 的 UTF-8 编码。</p>
<p>解释</p>
<p>UTF-8 编码具有更广泛的适应性。BOM 在使用程序或工具处理文件时可能造成不必要的干扰。<br>
·[建议] 在文件结尾处，保留一个空行。</p>
<h3 id="2-2-结构">2.2. 结构</h3>
<h4 id="2-2-1-缩进">2.2.1. 缩进</h4>
<p>·[强制][rule003] 使用 4 个空格做为一个缩进层级，不允许使用 2 个空格 或 tab 字符。</p>
<p>·[强制] switch 下的 case 和 default 必须增加一个缩进层级。</p>
<h4 id="示例">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (variable) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">    <span class="comment">// do...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">    <span class="comment">// do...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">  <span class="comment">// do...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">switch</span> (variable) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">    <span class="comment">// do...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">    <span class="comment">// do...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">  <span class="comment">// do...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="2-2-2-空格">2.2.2. 空格</h3>
<p>·[强制][rule005] 二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。</p>
<h4 id="示例-2">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = !arr.length;</span><br><span class="line">a++;</span><br><span class="line">a = b + c;</span><br></pre></td></tr></table></figure>
<p>·[强制][rule006] 用作代码块起始的左花括号 { 前必须有一个空格。</p>
<h4 id="示例-3">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>·[强制][rule007] if / else / for / while / function / switch / do / try / catch / finally 关键字后，必须有一个空格。</p>
<h4 id="示例-4">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition) &#123;&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition) &#123;&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;)();</span><br></pre></td></tr></table></figure>
<p>·[强制][rule008] 在对象创建时，属性中的 : 之后必须有空格，: 之前不允许有空格。</p>
<h4 id="示例-5">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">  c: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">  c: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>·[强制][rule009] 函数声明、具名函数表达式、函数调用中，函数名和 ( 之间不允许有空格。</p>
<h4 id="示例-6">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> funcName = <span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">funcName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> funcName = <span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">funcName();</span><br></pre></td></tr></table></figure>
<p>·[强制] , 和 ; 前不允许有空格。</p>
<h4 id="示例-7">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">callFunc(a, b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">callFunc(a, b);</span><br></pre></td></tr></table></figure>
<p>·[强制] 在函数调用、函数声明、括号表达式、属性访问、if / for / while / switch / catch 等语句中，() 和 [] 内紧贴括号部分不允许有空格。</p>
<h4 id="示例-8">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"></span><br><span class="line">callFunc(param1, param2, param3);</span><br><span class="line"></span><br><span class="line">save(<span class="keyword">this</span>.list[<span class="keyword">this</span>.indexes[i]]);</span><br><span class="line"></span><br><span class="line">needIncream &amp;&amp; (variable += increament);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num &gt; list.length) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (len--) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"></span><br><span class="line">callFunc(param1, param2, param3);</span><br><span class="line"></span><br><span class="line">save(<span class="keyword">this</span>.list[<span class="keyword">this</span>.indexes[i]]);</span><br><span class="line"></span><br><span class="line">needIncreament &amp;&amp; (variable += increament);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num &gt; list.length) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (len--) &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>·[强制][rule012] 单行声明的数组与对象，如果包含元素，{} 和 [] 内紧贴括号部分不允许包含空格。</p>
<h4 id="解释">解释</h4>
<p>声明包含元素的数组与对象，只有当内部元素的形式较为简单时，才允许写在一行。元素复杂的情况，还是应该换行书写。</p>
<h4 id="示例-9">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">"obj"</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;</span><br><span class="line">  name: <span class="string">"obj"</span>,</span><br><span class="line">  age: <span class="number">20</span>,</span><br><span class="line">  sex: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">"obj"</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123; <span class="attr">name</span>: <span class="string">"obj"</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">sex</span>: <span class="number">1</span> &#125;;</span><br></pre></td></tr></table></figure>
<p>·[强制][rule013] 行尾不得有多余的空格。</p>
<h3 id="2-2-3-换行">2.2.3. 换行</h3>
<p>·[强制] 每个独立语句结束后必须换行。</p>
<p>·[强制][rule015] 每行不得超过 120 个字符。</p>
<h4 id="解释-2">解释</h4>
<p>超长的不可分割的代码允许例外，比如复杂的正则表达式。长字符串不在例外之列。<br>
·[强制] 运算符处换行时，运算符必须在新行的行首。</p>
<h4 id="示例-10">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  (user.isAuthenticated() &amp;&amp;</span><br><span class="line">    user.isInRole(<span class="string">"admin"</span>) &amp;&amp;</span><br><span class="line">    user.hasAuthority(<span class="string">"add-admin"</span>)) ||</span><br><span class="line">  user.hasAuthority(<span class="string">"delete-admin"</span>)</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="comment">// Code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = number1 + number2 + number3 + number4 + number5;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  (user.isAuthenticated() &amp;&amp;</span><br><span class="line">    user.isInRole(<span class="string">"admin"</span>) &amp;&amp;</span><br><span class="line">    user.hasAuthority(<span class="string">"add-admin"</span>)) ||</span><br><span class="line">  user.hasAuthority(<span class="string">"delete-admin"</span>)</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="comment">// Code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = number1 + number2 + number3 + number4 + number5;</span><br></pre></td></tr></table></figure>
<p>·[强制][rule017] 在函数声明、函数表达式、函数调用、对象创建、数组创建、for 语句等场景中，不允许在 , 或 ; 前换行。</p>
<h4 id="示例-11">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">  c: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo(aVeryVeryLongArgument, anotherVeryLongArgument, callback);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">  c: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo(aVeryVeryLongArgument, anotherVeryLongArgument, callback);</span><br></pre></td></tr></table></figure>
<p>·[建议] 不同行为或逻辑的语句集，使用空行隔开，更易阅读。</p>
<h4 id="示例-12">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 仅为按逻辑换行的示例，不代表setStyle的最优实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setStyle</span>(<span class="params">element, property, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (element == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  element.style[property] = value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>·[建议] 在语句的行长度超过 120 时，根据逻辑条件合理缩进。</p>
<h4 id="示例-13">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 较复杂的逻辑条件组合，将每个条件独立一行，逻辑运算符放置在行首进行分隔，或将部分逻辑按逻辑组合进行分隔。</span></span><br><span class="line"><span class="comment">// 建议最终将右括号 ) 与左大括号 &#123; 放在独立一行，保证与 if 内语句块能容易视觉辨识。</span></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  (user.isAuthenticated() &amp;&amp;</span><br><span class="line">    user.isInRole(<span class="string">"admin"</span>) &amp;&amp;</span><br><span class="line">    user.hasAuthority(<span class="string">"add-admin"</span>)) ||</span><br><span class="line">  user.hasAuthority(<span class="string">"delete-admin"</span>)</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="comment">// Code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按一定长度截断字符串，并使用 + 运算符进行连接。</span></span><br><span class="line"><span class="comment">// 分隔字符串尽量按语义进行，如不要在一个完整的名词中间断开。</span></span><br><span class="line"><span class="comment">// 特别的，对于HTML片段的拼接，通过缩进，保持和HTML相同的结构。</span></span><br><span class="line"><span class="keyword">var</span> html =</span><br><span class="line">  <span class="string">""</span> + <span class="comment">// 此处用一个空字符串，以便整个HTML片段都在新行严格对齐</span></span><br><span class="line">  <span class="string">"&lt;article&gt;"</span> +</span><br><span class="line">  <span class="string">"&lt;h1&gt;Title here&lt;/h1&gt;"</span> +</span><br><span class="line">  <span class="string">"&lt;p&gt;This is a paragraph&lt;/p&gt;"</span> +</span><br><span class="line">  <span class="string">"&lt;footer&gt;Complete&lt;/footer&gt;"</span> +</span><br><span class="line">  <span class="string">"&lt;/article&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可使用数组来进行拼接，相对 + 更容易调整缩进。</span></span><br><span class="line"><span class="keyword">var</span> html = [</span><br><span class="line">  <span class="string">"&lt;article&gt;"</span>,</span><br><span class="line">  <span class="string">"&lt;h1&gt;Title here&lt;/h1&gt;"</span>,</span><br><span class="line">  <span class="string">"&lt;p&gt;This is a paragraph&lt;/p&gt;"</span>,</span><br><span class="line">  <span class="string">"&lt;footer&gt;Complete&lt;/footer&gt;"</span>,</span><br><span class="line">  <span class="string">"&lt;/article&gt;"</span>,</span><br><span class="line">];</span><br><span class="line">html = html.join(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当参数过多时，将每个参数独立写在一行上，并将结束的右括号 ) 独立一行。</span></span><br><span class="line"><span class="comment">// 所有参数必须增加一个缩进。</span></span><br><span class="line">foo(aVeryVeryLongArgument, anotherVeryLongArgument, callback);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以按逻辑对参数进行组合。</span></span><br><span class="line"><span class="comment">// 最经典的是baidu.format函数，调用时将参数分为“模板”和“数据”两块</span></span><br><span class="line">baidu.format(dateFormatTemplate, year, month, date, hour, minute, second);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当函数调用时，如果有一个或以上参数跨越多行，应当每一个参数独立一行。</span></span><br><span class="line"><span class="comment">// 这通常出现在匿名函数或者对象初始化等作为参数时，如setTimeout函数等。</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"hello"</span>);</span><br><span class="line">&#125;, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">order.data.read(</span><br><span class="line">  <span class="string">"id="</span> + me.model.id,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    me.attchToModel(data.result);</span><br><span class="line">    callback();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">300</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式调用较长时采用缩进进行调整。</span></span><br><span class="line">$(<span class="string">"#items"</span>).find(<span class="string">".selected"</span>).highlight().end();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三元运算符由3部分组成，因此其换行应当根据每个部分的长度不同，形成不同的情况。</span></span><br><span class="line"><span class="keyword">var</span> result = thisIsAVeryVeryLongCondition ? resultA : resultB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = condition ? thisIsAVeryVeryLongResult : resultB;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组和对象初始化的混用，严格按照每个对象的 &#123; 和结束 &#125; 在独立一行的风格书写。</span></span><br><span class="line"><span class="keyword">var</span> array = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>·[建议] 对于 if…else… 、 try…catch…finally 等语句，推荐使用在 } 号后添加一个换行 的风格，使代码层次结构更清晰，阅读性更好。</p>
<h4 id="示例-14">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  <span class="comment">// some statements;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// some statements;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// some statements;</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">  <span class="comment">// some statements;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>编码规范</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript编码规范 二 (语句，命名)</title>
    <url>/2019/01/10/2019-01-10-javascript%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83_%E4%BA%8C_(%E8%AF%AD%E5%8F%A5%EF%BC%8C%E5%91%BD%E5%90%8D)/</url>
    <content><![CDATA[<h3 id="2-2-4-语句">2.2.4. 语句</h3>
<p>·[强制][rule021] 不得省略语句结束的分号。</p>
<p>·[强制][rule022] 在 if / else / for / do / while 语句中，即使只有一行，也不得省略块 {…}。</p>
<h4 id="示例">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  callFunc();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (condition) callFunc();</span><br><span class="line"><span class="keyword">if</span> (condition) callFunc();</span><br></pre></td></tr></table></figure>
<p>·[强制][rule023] 函数定义结束不允许添加分号。</p>
<h4 id="示例-2">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是函数表达式，分号是不允许省略的。</span></span><br><span class="line"><span class="keyword">var</span> funcName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>·[强制][rule024] IIFE 必须在函数表达式外添加 (，非 IIFE 不得在函数表达式外添加 ( 。</p>
<a id="more"></a>
<h4 id="解释">解释</h4>
<p>额外的 ( 能够让代码在阅读的一开始就能判断函数是否立即被调用，进而明白接下来代码的用途。而不是一直拖到底部才恍然大悟。</p>
<h4 id="示例-3">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> task = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Code</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> task = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Code</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-命名¶">2.3. 命名¶</h3>
<p>·[强制] 变量 使用 Camel 命名法 。</p>
<h4 id="示例-4">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> loadingModules = &#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>·[强制] 常量 使用 全部字母大写，单词间下划线分隔 的命名方式。</p>
<h4 id="示例-5">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> HTML_ENTITY = &#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>·[强制] 函数 使用 Camel 命名法 。</p>
<h4 id="示例-6">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringFormat</span>(<span class="params">source</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>·[强制] 函数的 参数 使用 Camel 命名法 。</p>
<h4 id="示例-7">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hear</span>(<span class="params">theBells</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>·[强制][rule029] 类 使用 Pascal 命名法 。</p>
<h4 id="示例-8">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextNode</span>(<span class="params">options</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>·[强制][rule025] 类的 方法 / 属性 使用 Camel 命名法 。</p>
<h4 id="示例-9">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextNode</span>(<span class="params">value, engine</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.value = value;</span><br><span class="line">  <span class="keyword">this</span>.engine = engine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TextNode.prototype.clone = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>·[强制] 枚举变量 使用 Pascal 命名法 ，枚举的属性 使用 全部字母大写，单词间下划线分隔 的命名方式。</p>
<h4 id="示例-10">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> TargetState = &#123;</span><br><span class="line">  READING: <span class="number">1</span>,</span><br><span class="line">  READED: <span class="number">2</span>,</span><br><span class="line">  APPLIED: <span class="number">3</span>,</span><br><span class="line">  READY: <span class="number">4</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>·[强制] 命名空间 使用 Camel 命名法 。</p>
<h4 id="示例-11">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">equipments.heavyWeapons = &#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>·[强制] 由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。</p>
<h4 id="示例-12">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">XMLParser</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertHTML</span>(<span class="params">element, html</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> httpRequest = <span class="keyword">new</span> HTTPRequest();</span><br></pre></td></tr></table></figure>
<p>·[强制] 类名 使用 名词 。</p>
<h4 id="示例-13">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Engine</span>(<span class="params">options</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>·[建议] 函数名 使用 动宾短语 。</p>
<h4 id="示例-14">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">element</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>·[建议] boolean 类型的变量使用 is 或 has 开头。</p>
<h4 id="示例-15">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isReady = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> hasMoreCommands = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>
<p>·[建议] Promise 对象 用 动宾短语的进行时 表达。</p>
<h4 id="示例-16">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> loadingData = ajax.get(<span class="string">"url"</span>);</span><br><span class="line">loadingData.then(callback);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack打包性能优化之路</title>
    <url>/2019/01/14/2019-01-14-webpack%E6%89%93%E5%8C%85%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<h4 id="转载自：-a-href-https-segmentfault-com-u-rocky191-rocky191-a">转载自：<a href="https://segmentfault.com/u/rocky191" target="_blank" rel="noopener">rocky191</a></h4>
<h4 id="文章原文地址：-a-href-https-segmentfault-com-a-1190000017867494-查看思否原文-a">文章原文地址：<a href="https://segmentfault.com/a/1190000017867494" target="_blank" rel="noopener">查看思否原文</a></h4>
<hr>
<h3 id="路由的懒加载">路由的懒加载</h3>
<h4 id="（1）vue-router-文件中的-router-使用懒加载方式。如下图所示">（1）vue-router 文件中的 router 使用懒加载方式。如下图所示</h4>
<p><img src="http://www.cc12210.xyz/usr/uploads/2019/01/3716857456.png" alt="4200619720-5c39b56ac5986_articlex.png"></p>
<h4 id="（2）在-vue-文件中，也采用类似方式引入其他-vue-组件">（2）在 vue 文件中，也采用类似方式引入其他 vue 组件</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> showImage = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"@/components/common/showImage"</span>);</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="启用-gzip-压缩和关闭-sourcemap">启用 gzip 压缩和关闭 sourcemap</h3>
<p><img src="http://www.cc12210.xyz/usr/uploads/2019/01/3340238801.png" alt="174155842-5c39b56ac97f3_articlex.png"></p>
<a id="more"></a>
<p>如果你使用的是 vue-cli2 生成的项目的话，在 config 文件夹下的 index.js 中可以找到这段代码。记得开启 gzip 压缩前要安装一个插件，如途中注释掉的一段代码所示。 ####生产环境去掉 console 代码，减少代码体积，使用 uglifyjs 压缩代码<br>
<img src="http://www.cc12210.xyz/usr/uploads/2019/01/484494991.png" alt="2172692473-5c39b56adcba7_articlex.png"></p>
<hr>
<h3 id="图片优化">图片优化</h3>
<p>对于网页来说，在所下载的字节数中，图片往往会占很大比例。因此，优化图片通常可以卓有成效地减少字节数和改进性能：浏览器需要下载的字节数越少，对客户端带宽的争用就越少，浏览器下载内容并在屏幕上呈现内容的速度就越快。<br>
尽量减少图片的使用，或者使用 css3 来代替图片效果。如果不行的话，小图片通过一定的工具合成雪碧图或者转成 base64。</p>
<hr>
<h3 id="引用的库尽量按需加载。">引用的库尽量按需加载。</h3>
<p>(1)像一般的 ui 库 element，vant 等库都提供来按需加载的方式，避免全部引入，加大项目体积。<br>
(2)以 cdn 方式载入需要的库，也可以减少打包后的体积。<br>
在 index.html 文件中</p>
<h4 id="引入-mintui">引入 mintui</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 引入样式 --&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://unpkg.com/mint-ui/lib/style.css"</span>&gt;</span><br><span class="line">&lt;!-- 引入组件库 --&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://unpkg.com/mint-ui/lib/index.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="引入-vue">引入 vue</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 开发环境使用此方案--&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;!-- 生产环境使用此方案 --&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/cdn.jsdelivr.net/</span>npm/vue@<span class="number">2.5</span><span class="number">.21</span>/dist/vue.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="以这种外链方式引入-mint-ui-和-vue-后，需要做些别的配置">以这种外链方式引入 mint-ui 和 vue 后，需要做些别的配置</h4>
<p>（1）在入口文件 main.js 中就不需要引入 vue 和 mintui 了<br>
（2）在 buildwebpack.base.conf.js 中添加如下配置，意为打包的时候不打包 vue 和 mint-ui。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">externals:&#123;</span><br><span class="line">  "mint-ui":"mintui",</span><br><span class="line">  "vue":"Vue"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="使用-DllReferencePlugin">使用 DllReferencePlugin</h3>
<p>将平时不经常变动的文件抽离出来，统一打包，这样也可以减少后续打包的时间。</p>
<h4 id="在-build-文件夹中新建一个-webpack-dll-conf-js">在 build 文件夹中新建一个 webpack.dll.conf.js.</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">"optimize-css-assets-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">"uglifyjs-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: process.env.NODE_ENV === <span class="string">"production"</span> ? <span class="string">"production"</span> : <span class="string">"development"</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    vendor: [</span><br><span class="line">      <span class="comment">//根据实际情况添加</span></span><br><span class="line">      <span class="string">"axios"</span>,</span><br><span class="line">      <span class="string">"vue/dist/vue.min.js"</span>,</span><br><span class="line">      <span class="string">"vue-router"</span>,</span><br><span class="line">      <span class="string">"vuex"</span>,</span><br><span class="line">      <span class="string">"mint-ui"</span>,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"../static/js"</span>),</span><br><span class="line">    filename: <span class="string">"[name].dll.js"</span>,</span><br><span class="line">    library: <span class="string">"[name]_library"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">"vue-loader"</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules\/(?!(autotrack|dom-utils))/</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimizer: [</span><br><span class="line">      <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">        cache: <span class="literal">true</span>,</span><br><span class="line">        parallel: <span class="literal">true</span>,</span><br><span class="line">        sourceMap: <span class="literal">false</span>, <span class="comment">// set to true if you want JS source maps</span></span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="comment">// Compress extracted CSS. We are using this plugin so that possible</span></span><br><span class="line">      <span class="comment">// duplicated CSS from different components can be deduped.</span></span><br><span class="line">      <span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;),</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      @desc: https://webpack.js.org/plugins/module-concatenation-plugin/</span></span><br><span class="line"><span class="comment">      "作用域提升(scope hoisting)",使代码体积更小[函数申明会产生大量代码](#webpack3)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.ModuleConcatenationPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      path: path.join(__dirname, <span class="string">"."</span>, <span class="string">"[name]-manifest.json"</span>),</span><br><span class="line">      name: <span class="string">"[name]_library"</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="在-package-json-中增加配置">在 package.json 中增加配置</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"build:dll"</span>: <span class="string">"webpack -p --progress --config build/webpack.dll.conf.js"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>执行 npm run build:dll 命令就可以在根目录下生成 vendor-manifest.json,static/js 下生成 vendor.dll.js</p>
<h4 id="在-webpack-base-conf-js-中增加如下">在 webpack.base.conf.js 中增加如下</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> manifest = <span class="built_in">require</span>(<span class="string">'../vendor-manifest.json'</span>)</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">   <span class="comment">//把dll的vendor-manifest.json引用到需要的预编译的依赖</span></span><br><span class="line">   <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">     manifest</span><br><span class="line">   &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h4 id="在-index-html-底部添加">在 index.html 底部添加</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"./static/js/vendor.dll.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript编码规范 三 (注释)</title>
    <url>/2019/01/18/2019-01-18-javascript%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83_%E4%B8%89_(%E6%B3%A8%E9%87%8A)/</url>
    <content><![CDATA[<h3 id="2-4-注释">2.4. 注释</h3>
<h3 id="2-4-1-单行注释">2.4.1. 单行注释</h3>
<p>·[强制][rule038] 必须独占一行。// 后跟一个空格，缩进与下一行被注释说明的代码一致。</p>
<h4 id="2-4-2-多行注释">2.4.2. 多行注释</h4>
<p>·[建议] 避免使用 <code>/*...*/</code> 这样的多行注释。有多行注释内容时，使用多个单行注释。</p>
<h4 id="2-4-3-文档化注释">2.4.3. 文档化注释</h4>
<p>·[强制] 为了便于代码阅读和自文档化，以下内容必须包含以<code>/**...*/</code> 形式的块注释中。</p>
<h5 id="解释">解释</h5>
<ol>
<li>文件</li>
<li>namespace</li>
<li>类</li>
<li>函数或方法</li>
<li>类属性</li>
<li>事件</li>
<li>全局变量</li>
<li>常量</li>
<li>AMD 模块</li>
</ol>
<p>·[强制] 文档注释前必须空一行。</p>
<p>·[建议] 自文档化的文档说明 what，而不是 how。</p>
<h3 id="2-4-4-类型定义">2.4.4. 类型定义</h3>
<p>·[强制] 类型定义都是以 { 开始, 以 } 结束。</p>
<a id="more"></a>
<h4 id="解释-2">解释</h4>
<p>常用类型如：{string}, {number}, {boolean}, {Object}, {Function}, {RegExp}, {Array}, {Date}。</p>
<p>类型不仅局限于内置的类型，也可以是自定义的类型。比如定义了一个类 Developer，就可以使用它来定义一个参数和返回值的类型。</p>
<p>·[强制] 对于基本类型 {string}, {number}, {boolean}，首字母必须小写。</p>
<table>
<thead>
<tr>
<th>类型定义</th>
<th>语法示例</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>String</td>
<td>{string}</td>
<td>–</td>
</tr>
<tr>
<td>Number</td>
<td>{number}</td>
<td>–</td>
</tr>
<tr>
<td>Boolean</td>
<td>{boolean}</td>
<td>-</td>
</tr>
<tr>
<td>Object</td>
<td>{Object}</td>
<td>-</td>
</tr>
<tr>
<td>Function</td>
<td>{Function}</td>
<td>-</td>
</tr>
<tr>
<td>RegExp</td>
<td>{RegExp}</td>
<td>-</td>
</tr>
<tr>
<td>Array</td>
<td>{Array}</td>
<td>-</td>
</tr>
<tr>
<td>Date</td>
<td>{Date}</td>
<td>-</td>
</tr>
<tr>
<td>单一类型集合</td>
<td>{Array.<string>}</td>
<td>string 类型的数组</td>
</tr>
<tr>
<td>多类型</td>
<td>{(number ｜ boolean)}</td>
<td>可能是 number 类型, 也可能是 boolean 类型</td>
</tr>
<tr>
<td>允许为 null</td>
<td>{?number}</td>
<td>可能是 number, 也可能是 null</td>
</tr>
<tr>
<td>不允许为 null</td>
<td>{!Object}</td>
<td>Object 类型, 但不是 null</td>
</tr>
<tr>
<td>Function 类型</td>
<td>{function(number, boolean)}</td>
<td>函数, 形参类型</td>
</tr>
<tr>
<td>Function 带返回值</td>
<td>{function(number, boolean):string}</td>
<td>函数, 形参, 返回值类型</td>
</tr>
<tr>
<td>参数可选</td>
<td>@param {string=} name</td>
<td>可选参数, =为类型后缀</td>
</tr>
<tr>
<td>可变参数</td>
<td>@param {…number} args</td>
<td>变长参数, …为类型前缀</td>
</tr>
<tr>
<td>任意类型</td>
<td>{*}</td>
<td>任意类型</td>
</tr>
<tr>
<td>可选任意类型</td>
<td>@param {*=} name</td>
<td>可选参数，类型不限</td>
</tr>
<tr>
<td>可变任意类型</td>
<td>@param {…*} args</td>
<td>变长参数，类型不限</td>
</tr>
</tbody>
</table>
<h3 id="2-4-5-文件注释">2.4.5. 文件注释</h3>
<p>·[强制] 文件顶部必须包含文件注释，用 @file 标识文件说明。</p>
<h4 id="示例">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file </span>Describe the file</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>·[建议] 文件注释中可以用 @author 标识开发者信息。</p>
<h4 id="解释-3">解释</h4>
<p>开发者信息能够体现开发人员对文件的贡献，并且能够让遇到问题或希望了解相关信息的人找到维护人。通常情况文件在被创建时标识的是创建者。</p>
<p>随着项目的进展，越来越多的人加入，参与这个文件的开发，新的作者应该被加入 @author 标识。</p>
<p>@author 标识具有多人时，原则是按照 责任 进行排序。通常的说就是如果有问题，就是找第一个人应该比找第二个人有效。</p>
<p>比如文件的创建者由于各种原因，模块移交给了其他人或其他团队，后来因为新增需求，其他人在新增代码时，添加 @author 标识应该把自己的名字添加在创建人的前面。</p>
<p>@author 中的名字不允许被删除。任何劳动成果都应该被尊重。</p>
<p>业务项目中，一个文件可能被多人频繁修改，并且每个人的维护时间都可能不会很长，不建议为文件增加 @author 标识。通过版本控制系统追踪变更，按业务逻辑单元确定模块的维护责任人，通过文档与 wiki 跟踪和查询，是更好的责任管理方式。</p>
<p>对于业务逻辑无关的技术型基础项目，特别是开源的公共项目，应使用 @author 标识。</p>
<h4 id="示例-2">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file </span>Describe the file</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author <span class="variable">author</span></span>-name(mail-name<span class="doctag">@domain</span>.com)</span></span><br><span class="line"><span class="comment"> *         author-name2(mail-name2<span class="doctag">@domain</span>.com)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h3 id="2-4-6-命名空间注释">2.4.6. 命名空间注释</h3>
<p>·[建议] 命名空间使用 @namespace 标识。</p>
<h4 id="示例-3">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@namespace</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> util = &#123;&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="2-4-7-类注释">2.4.7. 类注释</h3>
<p>·[建议] 使用 @class 标记类或构造函数。</p>
<h4 id="解释-4">解释</h4>
<p>对于使用对象 constructor 属性来定义的构造函数，可以使用 @constructor 来标记。</p>
<h4 id="示例-4">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@class</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Developer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// constructor body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>·[建议] 使用 @extends 标记类的继承信息。</p>
<h4 id="示例-5">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@class</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@extends <span class="variable">Developer</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fronteer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Developer.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="comment">// constructor body</span></span><br><span class="line">&#125;</span><br><span class="line">util.inherits(Fronteer, Developer);</span><br></pre></td></tr></table></figure>
<p>·[强制] 使用包装方式扩展类成员时， 必须通过 @lends 进行重新指向。</p>
<h4 id="解释-5">解释</h4>
<p>没有 @lends 标记将无法为该类生成包含扩展类成员的文档。</p>
<h4 id="示例-6">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@class</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@extends <span class="variable">Developer</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fronteer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Developer.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="comment">// constructor body</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">util.extend(</span><br><span class="line">  Fronteer.prototype,</span><br><span class="line">  <span class="comment">/** <span class="doctag">@lends </span>Fronteer.prototype */</span> &#123;</span><br><span class="line">    _getLevel: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// TODO</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>·[强制] 类的属性或方法等成员信息使用 @public / @protected / @private 中的任意一个，指明可访问性。</p>
<h4 id="解释-6">解释</h4>
<p>生成的文档中将有可访问性的标记，避免用户直接使用非 public 的属性或方法。</p>
<h4 id="示例-7">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@class</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@extends <span class="variable">Developer</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> Fronteer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  Developer.call(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 属性描述</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@private</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">this</span>._level = <span class="string">"T12"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// constructor body</span></span><br><span class="line">&#125;;</span><br><span class="line">util.inherits(Fronteer, Developer);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@private</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span> </span>返回值描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Fronteer.prototype._getLevel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="2-4-8-函数-方法注释">2.4.8. 函数/方法注释</h3>
<p>·[强制] 函数/方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。</p>
<p>·[强制] 参数和返回值注释必须包含类型信息和说明。</p>
<p>·[建议] 当函数是内部函数，外部不可访问时，可以使用 @inner 标识。</p>
<h4 id="示例-8">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>p1 参数1的说明</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>p2 参数2的说明，比较长</span></span><br><span class="line"><span class="comment"> *     那就换行了.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number=&#125;</span> </span>p3 参数3的说明（可选）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Object&#125;</span> </span>返回值描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">p1, p2, p3</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> p3 = p3 || <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    p1: p1,</span><br><span class="line">    p2: p2,</span><br><span class="line">    p3: p3,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>·[强制] 对 Object 中各项的描述， 必须使用 @param 标识。</p>
<h4 id="示例-9">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>option 参数描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>option.url option项描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string=&#125;</span> </span>option.method option项描述，可选参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">option</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>·[建议] 重写父类方法时， 应当添加 @override 标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略 @param 、@return ，仅用 @override 标识，否则仍应作完整注释。</p>
<h4 id="解释-7">解释</h4>
<p>简而言之，当子类重写的方法能直接套用父类的方法注释时可省略对参数与返回值的注释。<br>
###2.4.9. 事件注释<br>
·[强制] 必须使用 @event 标识事件，事件参数的标识与方法描述的参数标识相同。</p>
<h4 id="示例-10">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 值变更时触发</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@event</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>e e描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>e.before before描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>e.after after描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">onchange: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>·[强制] 在会广播事件的函数前使用 @fires 标识广播的事件，在广播事件代码前使用 @event 标识事件。</p>
<p>·[建议] 对于事件对象的注释，使用 @param 标识，生成文档时可读性更好。</p>
<h4 id="示例-11">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 点击处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@fires </span>Select#change</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@private</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Select.prototype.clickHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 值变更时触发</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@event </span>Select#change</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>e e描述</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>e.before before描述</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>e.after after描述</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">this</span>.fire(<span class="string">"change"</span>, &#123;</span><br><span class="line">    before: <span class="string">"foo"</span>,</span><br><span class="line">    after: <span class="string">"bar"</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="2-4-10-常量注释">2.4.10. 常量注释</h3>
<p>·[强制] 常量必须使用 @const 标记，并包含说明和类型信息。</p>
<p>####示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 常量说明</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@const</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> REQUEST_URL = <span class="string">"myurl.do"</span>;</span><br></pre></td></tr></table></figure>
<h3 id="2-4-11-复杂类型注释¶">2.4.11. 复杂类型注释¶</h3>
<p>·[建议] 对于类型未定义的复杂结构的注释，可以使用 @typedef 标识来定义。</p>
<p>####示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// `namespaceA~` 可以换成其它 namepaths 前缀，目的是为了生成文档中能显示 `@typedef` 定义的类型和链接。</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@typedef <span class="type">&#123;Object&#125;</span> </span>namespaceA~Server</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property <span class="type">&#123;string&#125;</span> </span>host 主机</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property <span class="type">&#123;number&#125;</span> </span>port 端口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务器列表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type <span class="type">&#123;Array.&lt;namespaceA~Server&gt;&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> servers = [</span><br><span class="line">  &#123;</span><br><span class="line">    host: <span class="string">"1.2.3.4"</span>,</span><br><span class="line">    port: <span class="number">8080</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    host: <span class="string">"1.2.3.5"</span>,</span><br><span class="line">    port: <span class="number">8081</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<h3 id="2-4-12-AMD-模块注释">2.4.12. AMD 模块注释</h3>
<p>·[强制] AMD 模块使用 @module 或 @exports 标识。</p>
<h4 id="解释-8">解释</h4>
<p>@exports 与 @module 都可以用来标识模块，区别在于 @module 可以省略模块名称。而只使用 @exports 时在 namepaths 中可以省略 module: 前缀。</p>
<h4 id="示例-12">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * foo description</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@exports <span class="variable">Foo</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">var</span> foo = &#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * baz description</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span> </span>return description</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  foo.baz = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> foo;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="也可以在-exports-变量前使用-module-标识：">也可以在 exports 变量前使用 @module 标识：</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * module description.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@module <span class="variable">foo</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">var</span> exports = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * bar description</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  exports.bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> exports;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="如果直接使用-factory-的-exports-参数，还可以：">如果直接使用 factory 的 exports 参数，还可以：</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * module description.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@module</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * bar description</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  exports.bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> exports;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>·[强制] 对于已使用 @module 标识为 AMD 模块 的引用，在 namepaths 中必须增加 module: 作前缀。</p>
<h4 id="解释-9">解释</h4>
<p>namepaths 没有 module: 前缀时，生成的文档中将无法正确生成链接。</p>
<h4 id="示例-13">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 点击处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@fires </span>module:Select#change</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@private</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Select.prototype.clickHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 值变更时触发</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@event </span>module:Select#change</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>e e描述</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>e.before before描述</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>e.after after描述</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">this</span>.fire(<span class="string">"change"</span>, &#123;</span><br><span class="line">    before: <span class="string">"foo"</span>,</span><br><span class="line">    after: <span class="string">"bar"</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>·[建议] 对于类定义的模块，可以使用 @alias 标识构建函数。</p>
<h4 id="示例-14">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A module representing a jacket.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@module <span class="variable">jacket</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@class</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@alias </span>module:jacket</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">var</span> Jacket = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Jacket;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>·[建议] 多模块定义时，可以使用 @exports 标识各个模块。</p>
<h4 id="示例-15">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// one module</span></span><br><span class="line">define(<span class="string">"html/utils"</span>, <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Utility functions to ease working with DOM elements.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exports </span>html/utils</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> exports = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> exports;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// another module</span></span><br><span class="line">define(<span class="string">"tag"</span>, <span class="comment">/** <span class="doctag">@exports </span>tag */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> exports = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> exports;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>·[建议] 对于 exports 为 Object 的模块，可以使用 @namespace 标识。</p>
<h4 id="解释-10">解释</h4>
<p>使用 @namespace 而不是 @module 或 @exports 时，对模块的引用可以省略 module: 前缀。<br>
·[建议] 对于 exports 为类名的模块，使用 @class 和 @exports 标识。</p>
<h4 id="示例-16">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只使用 @class Bar 时，类方法和属性都必须增加 @name Bar#methodName 来标识，与 @exports 配合可以免除这一麻烦，并且在引用时可以省去 module: 前缀。</span></span><br><span class="line"><span class="comment">// 另外需要注意类名需要使用 var 定义的方式。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bar description</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see <span class="variable">foo</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exports  <span class="variable">Bar</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@class</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> Bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * baz description</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;(string|Array)&#125;</span> </span>return description</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Bar.prototype.baz = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="2-4-13-细节注释">2.4.13. 细节注释</h3>
<p>对于内部实现、不容易理解的逻辑说明、摘要信息等，我们可能需要编写细节注释。</p>
<p>·[建议] 细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。</p>
<h4 id="示例-17">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">p1, p2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这里对具体内部逻辑进行说明</span></span><br><span class="line">    <span class="comment">// 说明太长需要换行</span></span><br><span class="line">    <span class="keyword">for</span> (...) &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>·[强制] 有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记：</p>
<h4 id="解释-11">解释</h4>
<ul>
<li>TODO: 有功能待实现。此时需要对将要实现的功能进行简单说明。</li>
<li>FIXME: 该处代码运行没问题，但可能由于时间赶或者其他原因，需要修正。此时需要对如何修正进行简单说明</li>
<li>HACK: 为修正某些问题而写的不太好或者使用了某些诡异手段的代码。此时需要对思路或诡异手段进行描述。</li>
<li>XXX: 该处存在陷阱。此时需要对陷阱进行描述。</li>
</ul>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript编码规范 四 (语言特性：变量，条件，循环)</title>
    <url>/2019/01/18/2019-01-18-javascript%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83_%E5%9B%9B_(%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7%EF%BC%9A%E5%8F%98%E9%87%8F%EF%BC%8C%E6%9D%A1%E4%BB%B6%EF%BC%8C%E5%BE%AA%E7%8E%AF)/</url>
    <content><![CDATA[<h3 id="3-语言特性">3. 语言特性</h3>
<h3 id="3-1-变量">3.1. 变量</h3>
<p>·[强制][rule070] 变量在使用前必须通过 var 定义。</p>
<h4 id="解释">解释</h4>
<p>不通过 var 定义变量将导致变量污染全局环境。</p>
<h4 id="示例">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"MyName"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">name = <span class="string">"MyName"</span>;</span><br></pre></td></tr></table></figure>
<p>·[强制][rule071] 每个 var 只能声明一个变量。</p>
<h4 id="解释-2">解释</h4>
<p>一个 var 声明多个变量，容易导致较长的行长度，并且在修改时容易造成逗号和分号的混淆。</p>
<a id="more"></a>
<h4 id="示例-2">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> hangModules = [];</span><br><span class="line"><span class="keyword">var</span> missModules = [];</span><br><span class="line"><span class="keyword">var</span> visited = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> hangModules = [],</span><br><span class="line">  missModules = [],</span><br><span class="line">  visited = &#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>·[强制][rule072] 变量必须 即用即声明 ，不得在函数或其它形式的代码块起始位置统一声明所有变量。</p>
<h4 id="解释-3">解释</h4>
<p>变量声明与使用的距离越远，出现的跨度越大，代码的阅读与维护成本越高。虽然 JavaScript 的变量是函数作用域，还是应该根据编程中的意图，缩小变量出现的距离空间。</p>
<h4 id="示例-3">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kv2List</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> list = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">    <span class="keyword">if</span> (source.hasOwnProperty(key)) &#123;</span><br><span class="line">      <span class="keyword">var</span> item = &#123;</span><br><span class="line">        k: key,</span><br><span class="line">        v: source[key],</span><br><span class="line">      &#125;;</span><br><span class="line">      list.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kv2List</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> list = [];</span><br><span class="line">  <span class="keyword">var</span> key;</span><br><span class="line">  <span class="keyword">var</span> item;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> source) &#123;</span><br><span class="line">    <span class="keyword">if</span> (source.hasOwnProperty(key)) &#123;</span><br><span class="line">      item = &#123;</span><br><span class="line">        k: key,</span><br><span class="line">        v: source[key],</span><br><span class="line">      &#125;;</span><br><span class="line">      list.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-条件">3.2. 条件</h3>
<p>·[强制][rule073] 在 Equality Expression 中使用类型严格的 === 。仅当判断 null 或 undefined 时，允许使用 == null 。</p>
<h4 id="解释-4">解释</h4>
<p>使用 === 可以避免等于判断中隐式的类型转换。</p>
<h4 id="示例-4">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (age === <span class="number">30</span>) &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (age == <span class="number">30</span>) &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>·[建议] 尽可能使用简洁的表达式。</p>
<h4 id="示例-5">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串为空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (!name) &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (name === <span class="string">""</span>) &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串非空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (name) &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (name !== <span class="string">""</span>) &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组非空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (collection.length) &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (collection.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 布尔不成立</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (!notTrue) &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (notTrue === <span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// null 或 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (noValue == <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (noValue === <span class="literal">null</span> || <span class="keyword">typeof</span> noValue === <span class="string">"undefined"</span>) &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>·[建议] 按执行频率排列分支的顺序。</p>
<h4 id="解释-5">解释</h4>
<p>按执行频率排列分支的顺序好处是：</p>
<ul>
<li>阅读的人容易找到最常见的情况，增加可读性。</li>
<li>提高执行效率。<br>
·[建议] 对于相同变量或表达式的多值条件，用 switch 代替 if 。</li>
</ul>
<h4 id="示例-6">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">switch</span> (<span class="keyword">typeof</span> variable) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"object"</span>:</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"number"</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"boolean"</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"string"</span>:</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> type = <span class="keyword">typeof</span> variable;</span><br><span class="line"><span class="keyword">if</span> (type === <span class="string">"object"</span>) &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">"number"</span> || type === <span class="string">"boolean"</span> || type === <span class="string">"string"</span>) &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>·[建议] 如果函数或全局中的 else 块后没有任何语句，可以删除 else 。</p>
<h4 id="示例-7">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (name) &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">"unnamed"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (name) &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"unnamed"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-循环">3.3. 循环</h3>
<p>·[建议] 不要在循环体中包含函数表达式，事先将函数提取到循环体外。</p>
<h4 id="解释-6">解释</h4>
<p>循环体中的函数表达式，运行过程中会生成循环次数个函数对象。</p>
<h4 id="示例-8">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clicker</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> element = elements[i];</span><br><span class="line">  addListener(element, <span class="string">"click"</span>, clicker);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> element = elements[i];</span><br><span class="line">  addListener(element, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>·[建议] 对循环内多次使用的不变值，在循环外用变量缓存。</p>
<h4 id="示例-9">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> width = wrap.offsetWidth + <span class="string">"px"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> element = elements[i];</span><br><span class="line">  element.style.width = width;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> element = elements[i];</span><br><span class="line">  element.style.width = wrap.offsetWidth + <span class="string">"px"</span>;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>·[建议] 对有序集合进行遍历时，缓存 length 。</p>
<h4 id="解释-7">解释</h4>
<p>虽然现代浏览器都对数组长度进行了缓存，但对于一些宿主对象和老旧浏览器的数组对象，在每次 length 访问时会动态计算元素个数，此时缓存 length 能有效提高程序性能。</p>
<h4 id="示例-10">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> element = elements[i];</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>·[建议] 对有序集合进行顺序无关的遍历时，使用逆序遍历。</p>
<h4 id="解释-8">解释</h4>
<p>逆序遍历可以节省变量，代码比较优化。</p>
<h4 id="示例-11">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> len = elements.length;</span><br><span class="line"><span class="keyword">while</span> (len--) &#123;</span><br><span class="line">  <span class="keyword">var</span> element = elements[len];</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript编码规范 五 (类型，字符串，对象，数组)</title>
    <url>/2019/01/31/2019-01-31-javascript%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83_%E4%BA%94_(%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E5%AF%B9%E8%B1%A1%EF%BC%8C%E6%95%B0%E7%BB%84)/</url>
    <content><![CDATA[<h3 id="3-4-类型">3.4. 类型</h3>
<h3 id="3-4-1-类型检测">3.4.1. 类型检测</h3>
<p>·[建议] 类型检测优先使用 typeof 。对象类型检测使用 instanceof 。null 或 undefined 的检测使用 == null 。</p>
<h4 id="示例">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// string</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">"string"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// number</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">"number"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">"boolean"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">"function"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">"object"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RegExp</span></span><br><span class="line">variable <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array</span></span><br><span class="line">variable <span class="keyword">instanceof</span> <span class="built_in">Array</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// null</span></span><br><span class="line">variable === <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// null or undefined</span></span><br><span class="line">variable == <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">"undefined"</span>;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="3-4-2-类型转换¶">3.4.2. 类型转换¶</h3>
<p>·[建议] 转换成 string 时，使用 + ‘’ 。</p>
<h4 id="示例-2">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">num + <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">String</span>(num);</span><br><span class="line">num.toString();</span><br><span class="line"><span class="built_in">String</span>(num);</span><br></pre></td></tr></table></figure>
<p>·[建议] 转换成 number 时，通常使用 + 。</p>
<h4 id="示例-3">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">+str;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">Number</span>(str);</span><br></pre></td></tr></table></figure>
<p>·[建议] string 转换成 number ，要转换的字符串结尾包含非数字并期望忽略时，使用 parseInt。</p>
<h4 id="示例-4">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> width = <span class="string">"200px"</span>;</span><br><span class="line"><span class="built_in">parseInt</span>(width, <span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>·[强制][rule086] 使用 parseInt 时，必须指定进制。</p>
<h4 id="示例-5">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">parseInt</span>(str, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">parseInt</span>(str);</span><br></pre></td></tr></table></figure>
<p>·[建议] 转换成 boolean 时，使用 !! 。</p>
<h4 id="示例-6">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">3.14</span>;</span><br><span class="line">!!num;</span><br></pre></td></tr></table></figure>
<p>·[建议] number 去除小数点，使用 Math.floor / Math.round / Math.ceil ，不使用 parseInt。</p>
<h4 id="示例-7">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">3.14</span>;</span><br><span class="line"><span class="built_in">Math</span>.ceil(num);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">3.14</span>;</span><br><span class="line"><span class="built_in">parseInt</span>(num, <span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<h3 id="3-5-字符串">3.5. 字符串</h3>
<p>·[强制][rule089] 字符串开头和结束使用单引号 ’ 。</p>
<h4 id="解释">解释</h4>
<ul>
<li>输入单引号不需要按住 shift，方便输入。</li>
<li>实际使用中，字符串经常用来拼接 HTML。为方便 HTML 中包含双引号而不需要转义写法。</li>
</ul>
<h4 id="示例-8">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"我是一个字符串"</span>;</span><br><span class="line"><span class="keyword">var</span> html = <span class="string">'&lt;div class="cls"&gt;拼接HTML可以省去双引号转义&lt;/div&gt;'</span>;</span><br></pre></td></tr></table></figure>
<p>·[建议] 使用 数组 或 + 拼接字符串。</p>
<h4 id="解释-2">解释</h4>
<ul>
<li>使用 + 拼接字符串，如果拼接的全部是 StringLiteral，压缩工具可以对其进行自动合并的优化。所以，静态字符串建议使用 + 拼接。</li>
<li>在现代浏览器下，使用 + 拼接字符串，性能较数组的方式要高。</li>
<li>如需要兼顾老旧浏览器，应尽量使用数组拼接字符串。</li>
</ul>
<h4 id="示例-9">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用数组拼接字符串</span></span><br><span class="line"><span class="keyword">var</span> str = [</span><br><span class="line">    <span class="comment">// 推荐换行开始并缩进开始第一个字符串, 对齐代码, 方便阅读.</span></span><br><span class="line">    <span class="string">'&lt;ul&gt;'</span>,</span><br><span class="line">        <span class="string">'&lt;li&gt;第一项&lt;/li&gt;'</span>,</span><br><span class="line">        <span class="string">'&lt;li&gt;第二项&lt;/li&gt;'</span>,</span><br><span class="line">    <span class="string">'&lt;/ul&gt;'</span></span><br><span class="line">].join(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 + 拼接字符串</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">''</span> <span class="comment">// 建议第一个为空字符串, 第二个换行开始并缩进开始, 对齐代码, 方便阅读</span></span><br><span class="line">    + <span class="string">'&lt;ul&gt;'</span>,</span><br><span class="line">    +    <span class="string">'&lt;li&gt;第一项&lt;/li&gt;'</span>,</span><br><span class="line">    +    <span class="string">'&lt;li&gt;第二项&lt;/li&gt;'</span>,</span><br><span class="line">    + <span class="string">'&lt;/ul&gt;'</span>;</span><br></pre></td></tr></table></figure>
<p>·[建议] 复杂的数据到视图字符串的转换过程，选用一种模板引擎。</p>
<h4 id="解释-3">解释</h4>
<p>使用模板引擎有如下好处：</p>
<p>1.在开发过程中专注于数据，将视图生成的过程由另外一个层级维护，使程序逻辑结构更清晰。 2.优秀的模板引擎，通过模板编译技术和高质量的编译产物，能获得比手工拼接字符串更高的性能。</p>
<ul>
<li>artTemplate: 体积较小，在所有环境下性能高，语法灵活。</li>
<li>dot.js: 体积小，在现代浏览器下性能高，语法灵活。</li>
<li>etpl: 体积较小，在所有环境下性能高，模板复用性高，语法灵活。</li>
<li>handlebars: 体积大，在所有环境下性能高，扩展性高。</li>
<li>hogon: 体积小，在现代浏览器下性能高。</li>
<li>nunjucks: 体积较大，性能一般，模板复用性高。<br>
3.6. 对象<br>
·[强制][rule092] 使用对象字面量 {} 创建新 Object 。</li>
</ul>
<h4 id="示例-10">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure>
<p>·[强制][rule094] 对象创建时，如果一个对象的所有 属性 均可以不添加引号，则所有 属性 不得添加引号。</p>
<h4 id="示例-11">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">  name: <span class="string">"someone"</span>,</span><br><span class="line">  age: <span class="number">28</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>·[强制] 对象创建时，如果任何一个 属性 需要添加引号，则所有 属性 必须添加 ’ 。</p>
<h4 id="解释-4">解释</h4>
<p>如果属性不符合 Identifier 和 NumberLiteral 的形式，就需要以 StringLiteral 的形式提供。</p>
<h4 id="示例-12">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">  name: <span class="string">"someone"</span>,</span><br><span class="line">  age: <span class="number">28</span>,</span><br><span class="line">  <span class="string">"more-info"</span>: <span class="string">"..."</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">  name: <span class="string">"someone"</span>,</span><br><span class="line">  age: <span class="number">28</span>,</span><br><span class="line">  <span class="string">"more-info"</span>: <span class="string">"..."</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>·[强制][rule095] 不允许修改和扩展任何原生对象和宿主对象的原型。</p>
<h4 id="示例-13">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以下行为绝对禁止</span></span><br><span class="line"><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>·[建议] 属性访问时，尽量使用 . 。</p>
<h4 id="解释-5">解释</h4>
<p>属性名符合 Identifier 的要求，就可以通过 . 来访问，否则就只能通过 [expr] 方式访问。</p>
<p>通常在 JavaScript 中声明的对象，属性命名是使用 Camel 命名法，用 . 来访问更清晰简洁。部分特殊的属性(比如来自后端的 JSON)，可能采用不寻常的命名方式，可以通过 [expr] 方式访问。</p>
<h4 id="示例-14">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">info.age;</span><br><span class="line">info[<span class="string">"more-info"</span>];</span><br></pre></td></tr></table></figure>
<p>·[建议] for in 遍历对象时, 使用 hasOwnProperty 过滤掉原型中的属性。</p>
<h4 id="示例-15">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newInfo = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> info) &#123;</span><br><span class="line">  <span class="keyword">if</span> (info.hasOwnProperty(key)) &#123;</span><br><span class="line">    newInfo[key] = info[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-7-数组">3.7. 数组</h3>
<p>·[强制][rule098] 使用数组字面量 [] 创建新数组，除非想要创建的是指定长度的数组。</p>
<h4 id="示例-16">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure>
<p>·[强制] 遍历数组不使用 for in。</p>
<h4 id="解释-6">解释</h4>
<p>数组对象可能存在数字以外的属性, 这种情况下 for in 不会得到正确结果.</p>
<h4 id="示例-17">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line">arr.other = <span class="string">"other things"</span>; <span class="comment">// 这里仅作演示, 实际中应使用Object类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确的遍历方式</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误的遍历方式</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>·[建议] 不因为性能的原因自己实现数组排序功能，尽量使用数组的 sort 方法。</p>
<h4 id="解释-7">解释</h4>
<p>自己实现的常规排序算法，在性能上并不优于数组默认的 sort 方法。以下两种场景可以自己实现排序：</p>
<p>需要稳定的排序算法，达到严格一致的排序结果。<br>
数据特点鲜明，适合使用桶排。<br>
·[建议] 清空数组使用 .length = 0 。</p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>编码规范</tag>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript编码规范 八 (浏览器对象)</title>
    <url>/2019/02/20/2019-02-20-javascript%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83_%E5%85%AB_(%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%B9%E8%B1%A1)/</url>
    <content><![CDATA[<h3 id="4-浏览器环境">4. 浏览器环境</h3>
<h3 id="4-1-模块化">4.1. 模块化</h3>
<p>###4.1.1. AMD<br>
·[强制] 使用 AMD 作为模块定义。</p>
<h4 id="解释">解释</h4>
<p>AMD 作为由社区认可的模块定义形式，提供多种重载提供灵活的使用方式，并且绝大多数优秀的 Library 都支持 AMD，适合作为规范。</p>
<p>目前，比较成熟的 AMD Loader 有：</p>
<ul>
<li>官方实现的 requirejs</li>
<li>百度自己实现的 esl<br>
·[强制] 模块 id 必须符合标准。</li>
</ul>
<h4 id="解释-2">解释</h4>
<p>模块 id 必须符合以下约束条件：</p>
<ul>
<li>类型为 string，并且是由 / 分割的一系列 terms 来组成。例如：this/is/a/module。</li>
<li>term 应该符合 [a-zA-Z0-9_-]+ 规则。</li>
<li>不应该有 .js 后缀。</li>
<li>跟文件的路径保持一致。</li>
</ul>
<h3 id="4-1-2-define">4.1.2. define</h3>
<p>·[建议] 定义模块时不要指明 id 和 dependencies 。</p>
<h4 id="解释-3">解释</h4>
<p>在 AMD 的设计思想里，模块名称是和所在路径相关的，匿名的模块更利于封包和迁移。模块依赖应在模块定义内部通过 local require 引用。</p>
<p>所以，推荐使用 define(factory) 的形式进行模块定义。</p>
<a id="more"></a>
<h4 id="示例">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure>
<p>·[建议] 使用 return 来返回模块定义。</p>
<h4 id="解释-4">解释</h4>
<p>使用 return 可以减少 factory 接收的参数（不需要接收 exports 和 module），在没有 AMD Loader 的场景下也更容易进行简单的处理来伪造一个 Loader。</p>
<h4 id="示例-2">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> exports = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> exports;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="4-1-3-require">4.1.3. require</h3>
<p>·[强制] 全局运行环境中，require 必须以 async require 形式调用。</p>
<h4 id="解释-5">解释</h4>
<p>模块的加载过程是异步的，同步调用并无法保证得到正确的结果。</p>
<h4 id="示例-3">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">"foo"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">foo</span>) </span>&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">"foo"</span>);</span><br></pre></td></tr></table></figure>
<p>·[强制] 模块定义中只允许使用 local require ，不允许使用 global require 。</p>
<h4 id="解释-6">解释</h4>
<ul>
<li>在模块定义中使用 global require，对封装性是一种破坏。</li>
<li>在 AMD 里，global require 是可以被重命名的。并且 Loader 甚至没有全局的 require 变量，而是用 Loader 名称做为 global require。模块定义不应该依赖使用的 Loader。<br>
·[强制] Package 在实现时，内部模块的 require 必须使用 relative id 。</li>
</ul>
<h4 id="解释-7">解释</h4>
<p>对于任何可能通过 发布-引入 的形式复用的第三方库、框架、包，开发者所定义的名称不代表使用者使用的名称。因此不要基于任何名称的假设。在实现源码中，require 自身的其它模块时使用 relative id。</p>
<h4 id="示例-4">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">"./util"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>·[建议] 不会被调用的依赖模块，在 factory 开始处统一 require。</p>
<h4 id="解释-8">解释</h4>
<p>有些模块是依赖的模块，但不会在模块实现中被直接调用，最为典型的是 css / js / tpl 等 Plugin 所引入的外部内容。此类内容建议放在模块定义最开始处统一引用。</p>
<h4 id="示例-5">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">"css!foo.css"</span>);</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">"tpl!bar.tpl.html"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="4-2-DOM">4.2. DOM</h3>
<h3 id="4-2-1-元素获取">4.2.1. 元素获取</h3>
<p>·[建议] 对于单个元素，尽可能使用 document.getElementById 获取，避免使用 document.all 。</p>
<p>·[建议] 对于多个元素的集合，尽可能使用 context.getElementsByTagName 获取。其中 context 可以为 document 或其他元素。指定 tagName 参数为 * 可以获得所有子元素。</p>
<p>·[建议] 遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。</p>
<h4 id="解释-9">解释</h4>
<p>原生获取元素集合的结果并不直接引用 DOM 元素，而是对索引进行读取，所以 DOM 结构的改变会实时反映到结果中。</p>
<h4 id="示例-6">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;span&gt;&lt;/</span>span&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> elements = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'*'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示为 DIV</span></span><br><span class="line">alert(elements[<span class="number">0</span>].tagName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div = elements[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line">docpment.body.insertBefore(p, div);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示为 P</span></span><br><span class="line">alert(elements[<span class="number">0</span>].tagName);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>·[建议] 获取元素的直接子元素时使用 children。避免使用 childNodes ，除非预期是需要包含文本、注释和属性类型的节点。</p>
<h3 id="4-2-2-样式获取">4.2.2. 样式获取</h3>
<p>·[建议] 获取元素实际样式信息时，应使用 getComputedStyle 或 currentStyle 。</p>
<h4 id="解释-10">解释</h4>
<p>通过 style 只能获得内联定义或通过 JavaScript 直接设置的样式。通过 CSS class 设置的元素样式无法直接通过 style 获取。<br>
4.2.3. 样式设置<br>
·[建议] 尽可能通过为元素添加预定义的 className 来改变元素样式，避免直接操作 style 设置。</p>
<p>·[强制] 通过 style 对象设置元素样式时，对于带单位非 0 值的属性，不允许省略单位。</p>
<h4 id="解释-11">解释</h4>
<p>除了 IE，标准浏览器会忽略不规范的属性值，导致兼容性问题。<br>
4.2.4. DOM 操作<br>
·[建议] 操作 DOM 时，尽量减少页面 reflow。</p>
<h4 id="解释-12">解释</h4>
<p>页面 reflow 是非常耗时的行为，非常容易导致性能瓶颈。下面一些场景会触发浏览器的 reflow：</p>
<ul>
<li>DOM 元素的添加、修改（内容）、删除。</li>
<li>应用新的样式或者修改任何影响元素布局的属性。</li>
<li>Resize 浏览器窗口、滚动页面。</li>
<li>读取元素的某些属性（offsetLeft、offsetTop、offsetHeight、offsetWidth、scrollTop/Left/Width/Height、clientTop/Left/Width/Height、getComputedStyle()、currentStyle(in IE)) 。<br>
·[建议] 尽量减少 DOM 操作。</li>
</ul>
<h4 id="解释-13">解释</h4>
<p>DOM 操作也是非常耗时的一种操作，减少 DOM 操作有助于提高性能。举一个简单的例子，构建一个列表。我们可以用两种方式：</p>
<ul>
<li>在循环体中 createElement 并 append 到父元素中。</li>
<li>在循环体中拼接 HTML 字符串，循环结束后写父元素的 innerHTML。<br>
第一种方法看起来比较标准，但是每次循环都会对 DOM 进行操作，性能极低。在这里推荐使用第二种方法。</li>
</ul>
<h3 id="4-2-5-DOM-事件">4.2.5. DOM 事件</h3>
<p>·[建议] 优先使用 addEventListener / attachEvent 绑定事件，避免直接在 HTML 属性中或 DOM 的 expando 属性绑定事件处理。</p>
<h4 id="解释-14">解释</h4>
<p>expando 属性绑定事件容易导致互相覆盖。<br>
·[建议] 使用 addEventListener 时第三个参数使用 false。</p>
<h4 id="解释-15">解释</h4>
<p>标准浏览器中的 addEventListener 可以通过第三个参数指定两种时间触发模型：冒泡和捕获。而 IE 的 attachEvent 仅支持冒泡的事件触发。所以为了保持一致性，通常 addEventListener 的第三个参数都为 false。<br>
·[建议] 在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。</p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>编码规范</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript编码规范 六 (函数)</title>
    <url>/2019/02/12/2019-02-12-javascript%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83_%E5%85%AD_(%E5%87%BD%E6%95%B0)/</url>
    <content><![CDATA[<h3 id="3-8-函数">3.8. 函数</h3>
<h4 id="3-8-1-函数长度">3.8.1. 函数长度</h4>
<p>·[建议] 一个函数的长度控制在 50 行以内。</p>
<h4 id="解释">解释</h4>
<p>将过多的逻辑单元混在一个大函数中，易导致难以维护。一个清晰易懂的函数应该完成单一的逻辑单元。复杂的操作应进一步抽取，通过函数的调用来体现流程。</p>
<p>特定算法等不可分割的逻辑允许例外。</p>
<h4 id="示例">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncViewStateOnUserAction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x.checked) &#123;</span><br><span class="line">    y.checked = <span class="literal">true</span>;</span><br><span class="line">    z.value = <span class="string">""</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    y.checked = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!a.value) &#123;</span><br><span class="line">    warning.innerText = <span class="string">"Please enter it"</span>;</span><br><span class="line">    submitButton.disabled = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    warning.innerText = <span class="string">""</span>;</span><br><span class="line">    submitButton.disabled = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接阅读该函数会难以明确其主线逻辑，因此下方是一种更合理的表达方式：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncViewStateOnUserAction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  syncXStateToView();</span><br><span class="line">  checkAAvailability();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncXStateToView</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x.checked) &#123;</span><br><span class="line">    y.checked = <span class="literal">true</span>;</span><br><span class="line">    z.value = <span class="string">""</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    y.checked = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAAvailability</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!a.value) &#123;</span><br><span class="line">    displayWarningForAMissing();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    clearWarnignForA();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="3-8-2-参数设计¶">3.8.2. 参数设计¶</h3>
<p>·[建议] 一个函数的参数控制在 6 个以内。</p>
<h4 id="解释-2">解释</h4>
<p>除去不定长参数以外，函数具备不同逻辑意义的参数建议控制在 6 个以内，过多参数会导致维护难度增大。</p>
<p>某些情况下，如使用 AMD Loader 的 require 加载多个模块时，其 callback 可能会存在较多参数，因此对函数参数的个数不做强制限制。</p>
<p>·[建议] 通过 options 参数传递非数据输入型参数。</p>
<h4 id="解释-3">解释</h4>
<p>有些函数的参数并不是作为算法的输入，而是对算法的某些分支条件判断之用，此类参数建议通过一个 options 参数传递。<br>
如下函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移除某个元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Node&#125;</span> </span>element 需要移除的元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;boolean&#125;</span> </span>removeEventListeners 是否同时将所有注册在元素上的事件移除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeElement</span>(<span class="params">element, removeEventListeners</span>) </span>&#123;</span><br><span class="line">  element.parent.removeChild(element);</span><br><span class="line">  <span class="keyword">if</span> (removeEventListeners) &#123;</span><br><span class="line">    element.clearEventListeners();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以转换为下面的签名：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移除某个元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Node&#125;</span> </span>element 需要移除的元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>options 相关的逻辑配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;boolean&#125;</span> </span>options.removeEventListeners 是否同时将所有注册在元素上的事件移除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeElement</span>(<span class="params">element, options</span>) </span>&#123;</span><br><span class="line">  element.parent.removeChild(element);</span><br><span class="line">  <span class="keyword">if</span> (options.removeEventListeners) &#123;</span><br><span class="line">    element.clearEventListeners();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种模式有几个显著的优势：</p>
<p>boolean 型的配置项具备名称，从调用的代码上更易理解其表达的逻辑意义。<br>
当配置项有增长时，无需无休止地增加参数个数，不会出现 removeElement(element, true, false, false, 3) 这样难以理解的调用代码。<br>
当部分配置参数可选时，多个参数的形式非常难处理重载逻辑，而使用一个 options 对象只需判断属性是否存在，实现得以简化。</p>
<h3 id="3-8-3-闭包">3.8.3. 闭包</h3>
<p>·[建议] 在适当的时候将闭包内大对象置为 <code>null</code> 。</p>
<h4 id="解释-4">解释</h4>
<p>在 JavaScript 中，无需特别的关键词就可以使用闭包，一个函数可以任意访问在其定义的作用域外的变量。</p>
<p>需要注意的是，函数的作用域是静态的，即在定义时决定，与调用的时机和方式没有任何关系。</p>
<p>闭包会阻止一些变量的垃圾回收，对于较老旧的 JavaScript 引擎，可能导致外部所有变量均无法回收。</p>
<p>首先一个较为明确的结论是，以下内容会影响到闭包内变量的回收：</p>
<ul>
<li>嵌套的函数中是否有使用该变量。</li>
<li>嵌套的函数中是否有<strong>直接调用 eval</strong> 。</li>
<li>是否使用了 with 表达式。<br>
Chakra、V8 和 SpiderMonkey 将受以上因素的影响，表现出不尽相同又较为相似的回收策略，</li>
</ul>
<p>而 JScript.dll 和 Carakan 则完全没有这方面的优化，会完整保留整个 LexicalEnvironment 中的所有变量绑定，造成一定的内存消耗。</p>
<p>由于对闭包内变量有回收优化策略的 Chakra、V8 和 SpiderMonkey 引擎的行为较为相似，因此可以总结如下，当返回一个函数 fn 时：</p>
<ul>
<li>如果 fn 的 [[Scope]] 是 ObjectEnvironment（with 表达式生成 ObjectEnvironment，函数和 catch 表达式生成 DeclarativeEnvironment），则：</li>
</ul>
<ol>
<li>如果是 V8 引擎，则退出全过程。</li>
<li>如果是 SpiderMonkey，则处理该 ObjectEnvironment 的外层 LexicalEnvironment。</li>
</ol>
<ul>
<li>获取当前 LexicalEnvironment 下的所有类型为 Function 的对象，对于每一个 Function 对象，分析其 FunctionBody：</li>
</ul>
<ol>
<li>如果 FunctionBody 中含有<strong>直接调用 eval</strong> ，则退出全过程。</li>
<li>否则得到所有的 Identifier。</li>
<li>对于每一个 Identifier，设其为 name，根据查找变量引用的规则，从 LexicalEnvironment 中找出名称为 name 的绑定 binding。</li>
<li>对 binding 添加 notSwap 属性，其值为 true。</li>
</ol>
<ul>
<li>检查当前 LexicalEnvironment 中的每一个变量绑定，如果该绑定有 notSwap 属性且值为 true，则：</li>
</ul>
<ol>
<li>如果是 V8 引擎，删除该绑定。</li>
<li>如果是 SpiderMonkey，将该绑定的值设为 undefined，将删除 notSwap 属性。</li>
<li>对于 Chakra 引擎，暂无法得知是按 V8 的模式还是按 SpiderMonkey 的模式进行。</li>
</ol>
<p>如果有 <strong>非常庞大</strong> 的对象，且预计会在<strong>老旧的引擎</strong> 中执行，则使用闭包时，注意将闭包不需要的对象置为空引用。</p>
<p>·[建议] 使用 IIFE 避免 Lift 效应 。</p>
<h4 id="解释-5">解释</h4>
<p>在引用函数外部变量时，函数执行时外部变量的值由运行时决定而非定义时，最典型的场景如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tasks = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  tasks[tasks.length] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Current cursor is at "</span> + i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> len = tasks.length;</span><br><span class="line"><span class="keyword">while</span> (len--) &#123;</span><br><span class="line">  tasks[len]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码对 tasks 中的函数的执行均会输出 Current cursor is at 5，往往不符合预期。</p>
<p>此现象称为<strong>Lift 效应</strong> 。解决的方式是通过额外加上一层闭包函数，将需要的外部变量作为参数传递来解除变量的绑定关系：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tasks = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 注意有一层额外的闭包</span></span><br><span class="line">  tasks[tasks.length] = (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Current cursor is at "</span> + i);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> len = tasks.length;</span><br><span class="line"><span class="keyword">while</span> (len--) &#123;</span><br><span class="line">  tasks[len]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-8-4-空函数">3.8.4. 空函数</h3>
<p>·[建议] 空函数不使用 new Function() 的形式。</p>
<h4 id="示例-2">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> emptyFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>·[建议] 对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。</p>
<h4 id="示例-3">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> EMPTY_FUNCTION = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">MyClass.prototype.abstractMethod = EMPTY_FUNCTION;</span><br><span class="line">MyClass.prototype.hooks.before = EMPTY_FUNCTION;</span><br><span class="line">MyClass.prototype.hooks.after = EMPTY_FUNCTION;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>规范</tag>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript编码规范 七 (面向对象)</title>
    <url>/2019/02/20/2019-02-20-javascript%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83_%E4%B8%83_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1)/</url>
    <content><![CDATA[<h3 id="3-9-面向对象">3.9. 面向对象</h3>
<p>·[强制] 类的继承方案，实现时需要修正 constructor。</p>
<h4 id="解释">解释</h4>
<p>通常使用其他 library 的类继承方案都会进行 constructor 修正。如果是自己实现的类继承方案，需要进行 constructor 修正。</p>
<h4 id="示例">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建类之间的继承关系</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>subClass 子类函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>superClass 父类函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherits</span>(<span class="params">subClass, superClass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> F = <span class="keyword">new</span> <span class="built_in">Function</span>();</span><br><span class="line">  F.prototype = superClass.prototype;</span><br><span class="line">  subClass.prototype = <span class="keyword">new</span> F();</span><br><span class="line">  subClass.prototype.constructor = subClass;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>·[建议] 声明类时，保证 constructor 的正确性。</p>
<h4 id="示例-2">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接prototype等于对象时，需要修正constructor</span></span><br><span class="line">Animal.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: Animal,</span><br><span class="line"></span><br><span class="line">  jump: function () &#123;</span><br><span class="line">    alert(<span class="string">"animal "</span> + <span class="keyword">this</span>.name + <span class="string">" jump"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种方式扩展prototype则无需理会constructor</span></span><br><span class="line">Animal.prototype.jump = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"animal "</span> + <span class="keyword">this</span>.name + <span class="string">" jump"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>·[建议] 属性在构造函数中声明，方法在原型中声明。</p>
<a id="more"></a>
<h4 id="解释-2">解释</h4>
<p>原型对象的成员被所有实例共享，能节约内存占用。所以编码时我们应该遵守这样的原则：原型对象包含程序不会修改的成员，如方法函数或配置项。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextNode</span>(<span class="params">value, engine</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.value = value;</span><br><span class="line">  <span class="keyword">this</span>.engine = engine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TextNode.prototype.clone = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>·[强制] 自定义事件的 事件名 必须全小写。</p>
<h4 id="解释-3">解释</h4>
<p>在 JavaScript 广泛应用的浏览器环境，绝大多数 DOM 事件名称都是全小写的。为了遵循大多数 JavaScript 开发者的习惯，在设计自定义事件时，事件名也应该全小写。<br>
·[强制] 自定义事件只能有一个 event 参数。如果事件需要传递较多信息，应仔细设计事件对象。</p>
<h4 id="解释-4">解释</h4>
<p>一个事件对象的好处有：</p>
<ul>
<li>顺序无关，避免事件监听者需要记忆参数顺序。</li>
<li>每个事件信息都可以根据需要提供或者不提供，更自由。</li>
<li>扩展方便，未来添加事件信息时，无需考虑会破坏监听器参数形式而无法向后兼容。<br>
·[建议] 设计自定义事件时，应考虑禁止默认行为。</li>
</ul>
<h4 id="解释-5">解释</h4>
<p>常见禁止默认行为的方式有两种：</p>
<ul>
<li>事件监听函数中 return false。</li>
<li>事件对象中包含禁止默认行为的方法，如 preventDefault。</li>
</ul>
<h3 id="3-10-动态特性">3.10. 动态特性</h3>
<h3 id="3-10-1-eval">3.10.1. eval</h3>
<p>·[强制] 避免使用直接 eval 函数。</p>
<h4 id="解释-6">解释</h4>
<p>直接 eval，指的是以函数方式调用 eval 的调用方法。直接 eval 调用执行代码的作用域为本地作用域，应当避免。</p>
<p>如果有特殊情况需要使用直接 eval ，需在代码中用详细的注释说明为何必须使用直接 eval ，</p>
<p>不能使用其它动态执行代码的方式，同时需要其他资深工程师进行 Code Review。</p>
<p>·[建议] 尽量避免使用 eval 函数。</p>
<h3 id="3-10-2-动态执行代码">3.10.2. 动态执行代码</h3>
<p>·[建议] 使用 new Function 执行动态代码。</p>
<h4 id="解释-7">解释</h4>
<p>通过 new Function 生成的函数作用域是全局使用域，不会影响当当前的本地作用域。如果有动态代码执行的需求，建议使用 new Function 。</p>
<h4 id="示例-3">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"return x + y;"</span>);</span><br><span class="line"><span class="keyword">var</span> result = handler($(<span class="string">"#x"</span>).val(), $(<span class="string">"#y"</span>).val());</span><br></pre></td></tr></table></figure>
<p>3.10.3. with<br>
·[建议] 尽量不要使用 with。</p>
<h4 id="解释-8">解释</h4>
<p>使用 with 可能会增加代码的复杂度，不利于阅读和管理；也会对性能有影响。大多数使用 with 的场景都能使用其他方式较好的替代。所以，尽量不要使用 with。<br>
3.10.4. delete<br>
·[建议] 减少 delete 的使用。</p>
<h4 id="解释-9">解释</h4>
<p>如果没有特别的需求，减少或避免使用 delete 。delete 的使用会破坏部分 JavaScript 引擎的性能优化。<br>
·[建议] 处理 delete 可能产生的异常。</p>
<h4 id="解释-10">解释</h4>
<p>对于有被遍历需求，且值 null 被认为具有业务逻辑意义的值的对象，移除某个属性必须使用 delete 操作。</p>
<p>在严格模式或 IE 下使用 delete 时，不能被删除的属性会抛出异常，因此在不确定属性是否可以删除的情况下，建议添加 try-catch 块。</p>
<h4 id="示例-4">示例</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">delete</span> o.x;</span><br><span class="line">&#125; <span class="keyword">catch</span> (deleteError) &#123;</span><br><span class="line">  o.x = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-10-5-对象属性">3.10.5. 对象属性</h3>
<p>·[建议] 避免修改外部传入的对象。</p>
<h4 id="解释-11">解释</h4>
<p>JavaScript 因其脚本语言的动态特性，当一个对象未被 seal 或 freeze 时，可以任意添加、删除、修改属性值。</p>
<p>但是随意地对 非自身控制的对象 进行修改，很容易造成代码在不可预知的情况下出现问题。因此，设计良好的组件、函数应该避免对外部传入的对象的修改。</p>
<p>下面代码的 selectNode 方法修改了由外部传入的 datasource 对象。如果 datasource 用在其它场合（如另一个 Tree 实例）下，会造成状态的混乱。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tree</span>(<span class="params">datasource</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.datasource = datasource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tree.prototype.selectNode = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 从datasource中找出节点对象</span></span><br><span class="line">  <span class="keyword">var</span> node = <span class="keyword">this</span>.findNode(id);</span><br><span class="line">  <span class="keyword">if</span> (node) &#123;</span><br><span class="line">    node.selected = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.flushView();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>对于此类场景，需要使用额外的对象来维护，使用由自身控制，不与外部产生任何交互的 selectedNodeIndex 对象来维护节点的选中状态，不对 datasource 作任何修改。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tree</span>(<span class="params">datasource</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.datasource = datasource;</span><br><span class="line">  <span class="keyword">this</span>.selectedNodeIndex = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tree.prototype.selectNode = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 从datasource中找出节点对象</span></span><br><span class="line">  <span class="keyword">var</span> node = <span class="keyword">this</span>.findNode(id);</span><br><span class="line">  <span class="keyword">if</span> (node) &#123;</span><br><span class="line">    <span class="keyword">this</span>.selectedNodeIndex[id] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.flushView();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>除此之外，也可以通过 deepClone 等手段将自身维护的对象与外部传入的分离，保证不会相互影响。</p>
<p>·[建议] 具备强类型的设计。</p>
<h4 id="解释-12">解释</h4>
<ul>
<li>如果一个属性被设计为 boolean 类型，则不要使用 1 / 0 作为其值。对于标识性的属性，如对代码体积有严格要求，可以从一开始就设计为 number 类型且将 0 作为否定值。</li>
<li>从 DOM 中取出的值通常为 string 类型，如果有对象或函数的接收类型为 number 类型，提前作好转换，而不是期望对象、函数可以处理多类型的值。</li>
</ul>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>规范</tag>
        <tag>js编码规范</tag>
      </tags>
  </entry>
  <entry>
    <title>js和css的移动端适配</title>
    <url>/2019/03/04/2019-03-04-js%E5%92%8Ccss%E7%9A%84%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/</url>
    <content><![CDATA[<h3 id="移动端适配问题">移动端适配问题</h3>
<p>最近被很多朋友问移动端适配问题，其实自己也忘了很多，于是收集几种解决方案供自己参考</p>
<h4 id="通过-resize-方法动态调整-html-的-font-size-大小">通过 resize 方法动态调整 html 的 font-size 大小</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _width;</span><br><span class="line">    <span class="keyword">var</span> clientWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">    <span class="keyword">if</span> (clientWidth &gt; <span class="number">568</span>) &#123;</span><br><span class="line">      _width = <span class="number">568</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clientWidth &lt; <span class="number">320</span>) &#123;</span><br><span class="line">      _width = <span class="number">320</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      _width = clientWidth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// var pageWid = (window.innerWidth &gt; document.querySelector('body').offsetHeight) ? 1136 : 640;</span></span><br><span class="line">    <span class="built_in">document</span>.documentElement.style.fontSize = (_width / <span class="number">375</span>) * <span class="number">100</span> + <span class="string">"px"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(</span><br><span class="line">    <span class="string">"DOMContentLoaded"</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">window</span>.addEventListener(</span><br><span class="line">        <span class="string">"resize"</span>,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          clearTimeout(b);</span><br><span class="line">          b = setTimeout(a, <span class="number">300</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        !<span class="number">1</span></span><br><span class="line">      );</span><br><span class="line">      a();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="这种也是通过屏幕可视宽度来设置-html-的-font-size，相比上面少了动态变化">这种也是通过屏幕可视宽度来设置 html 的 font-size，相比上面少了动态变化</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 750的设计稿 150px的话代码上用1.5rem</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"html"</span>)[<span class="number">0</span>].style.fontSize =</span><br><span class="line">  (<span class="built_in">document</span>.documentElement.clientWidth / <span class="number">750</span>) * <span class="number">100</span> + <span class="string">"px"</span>;</span><br></pre></td></tr></table></figure>
<h4 id="移动端-css-适配，媒体查询">移动端 css 适配，媒体查询</h4>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//视口</span><br><span class="line"><span class="keyword">@charset</span> <span class="string">'utf-8'</span>;</span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">ol</span>,</span><br><span class="line"><span class="selector-tag">dl</span>,</span><br><span class="line"><span class="selector-tag">dd</span>,</span><br><span class="line"><span class="selector-tag">dt</span>,</span><br><span class="line"><span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">h6</span>,</span><br><span class="line"><span class="selector-tag">form</span>,</span><br><span class="line"><span class="selector-tag">fieldset</span>,</span><br><span class="line"><span class="selector-tag">legend</span>,</span><br><span class="line"><span class="selector-tag">img</span>,</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">figure</span>,</span><br><span class="line"><span class="selector-tag">figcaption</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">h6</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">ol</span>,</span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">b</span>,</span><br><span class="line"><span class="selector-tag">strong</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">em</span>,</span><br><span class="line"><span class="selector-tag">i</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">u</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> all <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">376px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">26.67vw</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> all <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">321px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">375px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">26.67vw</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> all <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">320px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">31.25vw</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>移动端</tag>
        <tag>适配</tag>
      </tags>
  </entry>
  <entry>
    <title>bootstrap 栅格系统</title>
    <url>/2019/03/07/2019-03-07-bootstrap_%E6%A0%85%E6%A0%BC%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h3 id="1-Container">1 Container</h3>
<p>顾名思义 Container 是栅格系统最外层的 class，直接被 container 包裹的只能是 row 这个 class。需要注意的是 container 自带左右各 15px padding 值，这样 container 与浏览器窗口之间就存在一定距离。</p>
<h3 id="2-row">2 row</h3>
<p>| 要注意的是：row 会清除内边距的效果，但不会清除内边距，col 要放在 row 里，row 要放在 container 里</p>
<table>
<thead>
<tr>
<th>*</th>
<th>超小屏幕设备 手机(&lt;768px)</th>
<th>小屏幕设备 平板(≥768px)</th>
<th>中等屏幕设备 桌面(≥992px)</th>
<th>大屏幕设备 桌面(≥1200px)</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>栅格系统行为</strong></td>
<td>总是水平排列</td>
<td>开始是堆叠在一起的，超过这些阀值将变为水平排列</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>最大宽度</strong><code>.container</code></td>
<td>None(自动)</td>
<td>750px</td>
<td>970px</td>
<td>1170px</td>
</tr>
<tr>
<td><strong>class 前缀</strong></td>
<td><code>.col-xs</code></td>
<td><code>.col-sm</code></td>
<td><code>.col-md-</code></td>
<td><code>.col-lg-</code></td>
</tr>
<tr>
<td><strong>列数</strong></td>
<td>12</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>最大列宽</strong></td>
<td>自动</td>
<td>60px</td>
<td>78px</td>
<td>95px</td>
</tr>
<tr>
<td><strong>槽宽</strong></td>
<td>30px(每列左右均有 15px)</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>可嵌套</strong></td>
<td>Yes</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>偏移(Offsets)</strong></td>
<td>Yes</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>列排序</strong></td>
<td>Yes</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>不要在 container 外用 row，这样做是无效的。</p>
<a id="more"></a>
<h3 id="3-col">3 col-</h3>
<p>col 在不同屏幕下行为不同，这在上面已经说过了。</p>
<p>列(col)现在有 15px 的 padding 了，如下图中黄颜色部分。Container 的正 padding 值造成了 15px 的留空，row 用负 margin 值反的延伸回去，所以现在 col 的 padding 值与 container 的 padding 重叠，永远不要在 row 外使用 col,在 row 外使用 col 是无效的。</p>
<h3 id="4-嵌套">4 嵌套</h3>
<p>当你设置了 container,row,column 后，你可以在 column 内再创建新的栅格系统。你在列(col)内添加新的行(row)时不需再嵌 container 了。这个技巧在于列(col)扮演了 container 一样的角色，列也有 15px 的 padding 值，它一样允许行(row)的负 margin 值,它内部的列、内容间的补白等都一样能很好的工作了。</p>
<h3 id="5-隐藏显示">5 隐藏显示</h3>
<table>
<thead>
<tr>
<th>*</th>
<th>超小屏幕 手机 (&lt;768px)</th>
<th>小屏幕 平板 (≥768px)</th>
<th>中等屏幕 桌面 (≥992px)</th>
<th>大屏幕 桌面 (≥1200px)</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.visible-xs-*</code></td>
<td>可见</td>
<td>隐藏</td>
<td>隐藏</td>
<td>隐藏</td>
</tr>
<tr>
<td><code>.visible-sm-*</code></td>
<td>隐藏</td>
<td>可见</td>
<td>隐藏</td>
<td>隐藏</td>
</tr>
<tr>
<td><code>.visible-md-*</code></td>
<td>隐藏</td>
<td>隐藏</td>
<td>可见</td>
<td>隐藏</td>
</tr>
<tr>
<td><code>.visible-lg-*</code></td>
<td>隐藏</td>
<td>隐藏</td>
<td>隐藏</td>
<td>可见</td>
</tr>
<tr>
<td><code>.hidden-xs</code></td>
<td>隐藏</td>
<td>可见</td>
<td>可见</td>
<td>可见</td>
</tr>
<tr>
<td><code>.hidden-sm</code></td>
<td>可见</td>
<td>隐藏</td>
<td>可见</td>
<td>可见</td>
</tr>
<tr>
<td><code>.hidden-md</code></td>
<td>可见</td>
<td>可见</td>
<td>隐藏</td>
<td>可见</td>
</tr>
<tr>
<td><code>.hidden-lg</code></td>
<td>可见</td>
<td>可见</td>
<td>可见</td>
<td>隐藏</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>bootstrap</tag>
        <tag>栅格</tag>
        <tag>响应式</tag>
      </tags>
  </entry>
  <entry>
    <title>canvas在视网膜屏幕下模糊的问题</title>
    <url>/2019/03/11/2019-03-11-canvas%E5%9C%A8%E8%A7%86%E7%BD%91%E8%86%9C%E5%B1%8F%E5%B9%95%E4%B8%8B%E6%A8%A1%E7%B3%8A%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="window-属性：devicePixelRatio">window 属性：devicePixelRatio</h2>
<h3 id="devicePixelRatio-属性">devicePixelRatio 属性</h3>
<p>该 Window 属性 devicePixelRatio 能够返回当前显示设备的物理像素分辨率与 CSS 像素分辨率的比率。此值也可以解释为像素大小的比率：一个 CSS 像素的大小与一个物理像素的大小的比值。简单地说，这告诉浏览器应该使用多少个屏幕的实际像素来绘制单个 CSS 像素。</p>
<p>这在处理标准显示与 HiDPI 或 Retina 显示之间的差异时很有用，它使用更多屏幕像素绘制相同对象，从而产生更清晰的图像。</p>
<p>当此值发生变化时（例如，如果用户将 window 拖到具有不同像素密度的显示器上），则无法通知该值。由于没有可用于检测像素密度变化的回调或事件，因此唯一的方法是定期检查其 devicePixelRatio 值是否已更改。不要经常这样做，否则会影响性能。</p>
<h4 id="devicePixelRatio-属性语法">devicePixelRatio 属性语法</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="built_in">window</span>.devicePixelRatio;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="devicePixelRatio-属性值">devicePixelRatio 属性值</h4>
<p>devicePixelRatio 属性值为一个 double。</p>
<h4 id="devicePixelRatio-属性示例">devicePixelRatio 属性示例</h4>
<p>一个 canvas 在视网膜屏幕上可能显得太模糊。使用 window.devicePixelRatio 以确定应该添加多少额外的像素密度以允许更清晰的图像。</p>
<h3 id="HTML">HTML</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="JavaScript">JavaScript</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置canvas画布的初始大小</span></span><br><span class="line"><span class="keyword">var</span> size = <span class="number">200</span>;</span><br><span class="line">canvas.style.width = size + <span class="string">"px"</span>;</span><br><span class="line">canvas.style.height = size + <span class="string">"px"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置实际大小 关键在这~ 视网膜屏填充更多像素点</span></span><br><span class="line"><span class="keyword">var</span> scale = <span class="built_in">window</span>.devicePixelRatio; <span class="comment">// &lt;--- 获取屏幕像素比，普通为1，视网膜屏为2或更高</span></span><br><span class="line">canvas.width = size * scale;</span><br><span class="line">canvas.height = size * scale;</span><br><span class="line"></span><br><span class="line"><span class="comment">// scale() 方法缩放当前绘图，更大或更小。以像素比为基准缩放</span></span><br><span class="line">ctx.scale(scale, scale);</span><br><span class="line"><span class="comment">// 填充颜色</span></span><br><span class="line">ctx.fillStyle = <span class="string">"#bada55"</span>;</span><br><span class="line"><span class="comment">// 绘制 300*300 像素的以填充矩形 10 10 为X Y 的坐标</span></span><br><span class="line">ctx.fillRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line"><span class="comment">// 字体大小及字体</span></span><br><span class="line">ctx.font = <span class="string">"18px Arial"</span>;</span><br><span class="line"><span class="comment">// 文字居中</span></span><br><span class="line">ctx.textAlign = <span class="string">"center"</span>;</span><br><span class="line"><span class="comment">// 设置当前文本基线</span></span><br><span class="line">ctx.textBaseline = <span class="string">"middle"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = size / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> y = size / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> textString = <span class="string">"测试文字用例"</span>;</span><br><span class="line"><span class="comment">// 填充文字 x y 为文字位置</span></span><br><span class="line">ctx.fillText(textString, x, y);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>canvas</tag>
        <tag>视网膜</tag>
        <tag>画图</tag>
      </tags>
  </entry>
  <entry>
    <title>vue在v-html中设置点击事件</title>
    <url>/2019/03/27/2019-03-27-vue%E5%9C%A8v-html%E4%B8%AD%E8%AE%BE%E7%BD%AE%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h4 id="需求">需求</h4>
<ul>
<li>.渲染后台返回的数据，数据中带有换行<br/>，所有只能使用 v-html 来解析这段字符串</li>
<li>.除了主体内容,后台返回需要高亮字符的开始和结束的索引，高亮字符点击之后显示该字符的详细信息</li>
</ul>
<h3 id="解决思路">解决思路</h3>
<h4 id="在-v-html-中设置点击事件，传入-event，利用事件委托来取得高亮字符（字符高亮是通过在开始索引位置加-span，结尾加-span-实现的）">在 v-html 中设置点击事件，传入$event，利用事件委托来取得高亮字符（字符高亮是通过在开始索引位置加 span，结尾加</span>实现的）</h4>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"content"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">contenteditable</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-html</span>=<span class="string">"content"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">click</span>=<span class="string">"error($event)"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="获取到内容之后需要利用-split-分割空格成为一个数组，这样在起始索引位添加-span-不会影响索引顺序">获取到内容之后需要利用 split 分割空格成为一个数组，这样在起始索引位添加 span 不会影响索引顺序</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> content = <span class="keyword">this</span>.contentInitial.split(<span class="string">""</span>);</span><br><span class="line"><span class="comment">// for循环添加span即可</span></span><br><span class="line"><span class="comment">// 添加完成之后记得合并一下</span></span><br><span class="line"><span class="keyword">this</span>.content = content.join(<span class="string">""</span>);</span><br></pre></td></tr></table></figure>
<h4 id="点击就是通过事件委托来实现，在添加-span-的时候将该字符对应的信息填入自定义属性中">点击就是通过事件委托来实现，在添加 span 的时候将该字符对应的信息填入自定义属性中</h4>
<h4 id="errorInfo-就是高亮字符的信息">errorInfo 就是高亮字符的信息</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">content[j] = <span class="string">`&lt;span class='err' err-id='<span class="subst">$&#123;errorInfo&#125;</span>'&gt;<span class="subst">$&#123;content[j]&#125;</span>`</span>;</span><br><span class="line">content[j + l] = <span class="string">`<span class="subst">$&#123;content[j + l]&#125;</span>&lt;/span&gt;`</span>;</span><br></pre></td></tr></table></figure>
<h4 id="点击事件">点击事件</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">error: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.target.nodeName == <span class="string">'SPAN'</span>) &#123;</span><br><span class="line">         <span class="keyword">this</span>.target = e.target</span><br><span class="line">         <span class="comment">// 获取自定义属性中的info</span></span><br><span class="line">         <span class="keyword">var</span> value = e.target.getAttribute(<span class="string">'err-id'</span>);</span><br><span class="line">         <span class="comment">// 将字符串转为对象，自定义属性中需要先将对象转为json再存入</span></span><br><span class="line">         <span class="keyword">var</span> token = <span class="built_in">JSON</span>.parse(value);</span><br><span class="line">         <span class="comment">// 最后拿到值之后怎么展示就看自己怎么操作了</span></span><br><span class="line">         <span class="keyword">this</span>.showError(token);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>v-html</tag>
        <tag>点击</tag>
      </tags>
  </entry>
  <entry>
    <title>饿了么UI上传文件做文件大小限制</title>
    <url>/2019/03/12/2019-03-12-%E9%A5%BF%E4%BA%86%E4%B9%88UI%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%81%9A%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6/</url>
    <content><![CDATA[<h3 id="beforeUpload">beforeUpload</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- action为上传地址 multiple是否多选 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"upload-demo"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:action</span>=<span class="string">"url"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">multiple</span></span></span><br><span class="line"><span class="tag">  <span class="attr">ref</span>=<span class="string">"uploader"</span></span></span><br><span class="line">  &lt;!--</span><br><span class="line">  为了清空文件用</span><br><span class="line">  --</span><br><span class="line">&gt;</span><br><span class="line">  :limit="limitnum"</span><br><span class="line">  <span class="comment">&lt;!-- 允许上传的最大个数 --&gt;</span></span><br><span class="line">  :on-exceed="handleExceed"</span><br><span class="line">  <span class="comment">&lt;!-- 文件超出个数限制时的钩子 --&gt;</span></span><br><span class="line">  :file-list="fileList"</span><br><span class="line">  <span class="comment">&lt;!-- 上传的文件列表 --&gt;</span></span><br><span class="line">  :beforeUpload="beforeAvatarUpload"&gt;</span><br><span class="line">  <span class="comment">&lt;!-- 对文件大小做出限制 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">"mini"</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>点击上传<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="最主要的方法，在-methods-中写-beforeAvatarUpload-方法">最主要的方法，在 methods 中写 beforeAvatarUpload 方法</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">:beforeUpload="beforeAvatarUpload"</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对上传文件大小做出限制</span></span><br><span class="line">beforeAvatarUpload(file) &#123;</span><br><span class="line">    <span class="keyword">const</span> isLt50M = file.size / <span class="number">1024</span> / <span class="number">1024</span> &lt;= <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">if</span> (!isLt50M) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">            message: <span class="string">'上传文件大小不能超过50MB'</span>,</span><br><span class="line">            type: <span class="string">'warning'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 将文件选择清空,避免上传超过限制的文件</span></span><br><span class="line">        <span class="keyword">this</span>.$refs[<span class="string">'uploader'</span>].clearFiles();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>饿了么ui</tag>
        <tag>上传文件</tag>
        <tag>组件</tag>
      </tags>
  </entry>
  <entry>
    <title>几种应该避免使用箭头函数的情况</title>
    <url>/2019/04/25/2019-04-25-%E5%87%A0%E7%A7%8D%E5%BA%94%E8%AF%A5%E9%81%BF%E5%85%8D%E4%BD%BF%E7%94%A8%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84%E6%83%85%E5%86%B5/</url>
    <content><![CDATA[<h3 id="避免在定义对象方法时使用">避免在定义对象方法时使用</h3>
<h4 id="箭头函数的-this-指向是由其上下文决定的">箭头函数的 this 指向是由其上下文决定的</h4>
<p>此时 this 指向为函数的调用者 obj<br>
<img src="http://www.cc12210.xyz/usr/uploads/2019/04/267063489.png" alt="BaiduHi_2019-4-25_11-2-11.png"><br>
打印的 <a href="http://this.name" target="_blank" rel="noopener">this.name</a> 为 <a href="http://obj.name" target="_blank" rel="noopener">obj.name</a><br>
<img src="http://www.cc12210.xyz/usr/uploads/2019/04/2428173053.png" alt="BaiduHi_2019-4-25_11-2-22.png"></p>
<h4 id="箭头函数">箭头函数</h4>
<p><img src="http://www.cc12210.xyz/usr/uploads/2019/04/1844895864.png" alt="BaiduHi_2019-4-25_11-1-23.png"><br>
由于箭头函数自身没有 this 会自动继承外层的 this 导致打印出的变量出错<br>
<img src="http://www.cc12210.xyz/usr/uploads/2019/04/4019100955.png" alt="BaiduHi_2019-4-25_11-1-39.png"></p>
<h3 id="避免在-prototype-上使用">避免在 prototype 上使用</h3>
<h4 id="因为没有-this-导致-this-指向错误，所以在定义-prototype-方法上一定记得不要使用箭头函数">因为没有 this 导致 this 指向错误，所以在定义 prototype 方法上一定记得不要使用箭头函数</h4>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.name = <span class="string">"cc"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.say = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  <span class="comment">// 箭头函数中没有this，从外部继承会导致错误</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.say();</span><br></pre></td></tr></table></figure>
<h3 id="避免在动态上下文中的回调函数里使用">避免在动态上下文中的回调函数里使用</h3>
<h4 id="如果你需要你的上下文是可变的，动态的，那么不要使用箭头函数">如果你需要你的上下文是可变的，动态的，那么不要使用箭头函数</h4>
<p>比如在一个页面中，我们需要为每一个 p 元素增加一个事件处理函数，那么：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.querySelectorAll(&#39;p&#39;).forEach(elem &#x3D;&gt; &#123;</span><br><span class="line">    elem.addEventListener(&#39;click&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">        console.log(this.innerText.length) &#x2F;&#x2F; ❌ 这个时候 this 指向 window，因此会报错</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="改为普通函数才可以正确访问到预期的-this：">改为普通函数才可以正确访问到预期的 this：</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">"p"</span>).forEach(<span class="function">(<span class="params">elem</span>) =&gt;</span> &#123;</span><br><span class="line">  elem.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.innerText.length); <span class="comment">// ✅ 这个时候 this 指向 elem</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>箭头函数</tag>
      </tags>
  </entry>
  <entry>
    <title>发布订阅模式与观察者模式</title>
    <url>/2019/04/25/2019-04-25-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%E4%B8%8E%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="转载于思否">转载于思否</h3>
<p>作者：<a href="https://segmentfault.com/u/hfhan" target="_blank" rel="noopener">hfhan</a><br>
原文链接：<a href="发布订阅模式与观察者模式">发布订阅模式与观察者模式</a></p>
<p><strong>《JavaScript 设计模式与开发实践》一书中说了分辨模式的关键是意图而不是结构。</strong></p>
<h4 id="观察者模式（Observer-Pattern）">观察者模式（Observer Pattern）</h4>
<p>观察者模式定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知，并自动更新。观察者模式属于行为型模式，行为型模式关注的是对象之间的通讯，观察者模式就是观察者和被观察者之间的通讯。</p>
<p>观察者模式有一个别名叫“发布-订阅模式”，或者说是“订阅-发布模式”，订阅者和订阅目标是联系在一起的，当订阅目标发生改变时，逐个通知订阅者。我们可以用报纸期刊的订阅来形象的说明，当你订阅了一份报纸，每天都会有一份最新的报纸送到你手上，有多少人订阅报纸，报社就会发多少份报纸，报社和订报纸的客户就是上面文章开头所说的“一对多”的依赖关系。</p>
<h4 id="发布订阅模式（Pub-Sub-Pattern）">发布订阅模式（Pub-Sub Pattern）</h4>
<p>其实 24 种基本的设计模式中并没有发布订阅模式，上面也说了，他只是观察者模式的一个别称。</p>
<p>但是经过时间的沉淀，似乎他已经强大了起来，已经独立于观察者模式，成为另外一种不同的设计模式。</p>
<p>在现在的发布订阅模式中，称为发布者的消息发送者不会将消息直接发送给订阅者，这意味着发布者和订阅者不知道彼此的存在。在发布者和订阅者之间存在第三个组件，称为消息代理或调度中心或中间件，它维持着发布者和订阅者之间的联系，过滤所有发布者传入的消息并相应地分发它们给订阅者。</p>
<p>举一个例子，你在微博上关注了 A，同时其他很多人也关注了 A，那么当 A 发布动态的时候，微博就会为你们推送这条动态。A 就是发布者，你是订阅者，微博就是调度中心，你和 A 是没有直接的消息往来的，全是通过微博来协调的（你的关注，A 的发布动态）。</p>
<a id="more"></a>
<h3 id="观察者模式和发布订阅模式有什么区别？">观察者模式和发布订阅模式有什么区别？</h3>
<h4 id="我们先来看下这两个模式的实现结构：">我们先来看下这两个模式的实现结构：</h4>
<p>![实现结构][1]<br>
**观察者模式：**观察者（Observer）直接订阅（Subscribe）主题（Subject），而当主题被激活的时候，会触发（Fire Event）观察者里的事件。</p>
<p>**发布订阅模式：**订阅者（Subscriber）把自己想订阅的事件注册（Subscribe）到调度中心（Topic），当发布者（Publisher）发布该事件（Publish topic）到调度中心，也就是该事件触发时，由调度中心统一调度（Fire Event）订阅者注册到调度中心的处理代码。</p>
<p>我们再来看下这两个模式的代码案例：（猎人发布与订阅任务）</p>
<h4 id="观察者模式：">观察者模式：</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有一家猎人工会，其中每个猎人都具有发布任务(publish)，订阅任务(subscribe)的功能</span></span><br><span class="line"><span class="comment">//他们都有一个订阅列表来记录谁订阅了自己</span></span><br><span class="line"><span class="comment">//定义一个猎人类</span></span><br><span class="line"><span class="comment">//包括姓名，级别，订阅列表</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hunter</span>(<span class="params">name, level</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.level = level;</span><br><span class="line">  <span class="keyword">this</span>.list = [];</span><br><span class="line">&#125;</span><br><span class="line">Hunter.prototype.publish = <span class="function"><span class="keyword">function</span> (<span class="params">money</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.level + <span class="string">"猎人"</span> + <span class="keyword">this</span>.name + <span class="string">"寻求帮助"</span>);</span><br><span class="line">  <span class="keyword">this</span>.list.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">    item(money);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">Hunter.prototype.subscribe = <span class="function"><span class="keyword">function</span> (<span class="params">targrt, fn</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.level + <span class="string">"猎人"</span> + <span class="keyword">this</span>.name + <span class="string">"订阅了"</span> + targrt.name);</span><br><span class="line">  targrt.list.push(fn);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//猎人工会走来了几个猎人</span></span><br><span class="line"><span class="keyword">let</span> hunterMing = <span class="keyword">new</span> Hunter(<span class="string">"小明"</span>, <span class="string">"黄金"</span>);</span><br><span class="line"><span class="keyword">let</span> hunterJin = <span class="keyword">new</span> Hunter(<span class="string">"小金"</span>, <span class="string">"白银"</span>);</span><br><span class="line"><span class="keyword">let</span> hunterZhang = <span class="keyword">new</span> Hunter(<span class="string">"小张"</span>, <span class="string">"黄金"</span>);</span><br><span class="line"><span class="keyword">let</span> hunterPeter = <span class="keyword">new</span> Hunter(<span class="string">"Peter"</span>, <span class="string">"青铜"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Peter等级较低，可能需要帮助，所以小明，小金，小张都订阅了Peter</span></span><br><span class="line">hunterMing.subscribe(hunterPeter, <span class="function"><span class="keyword">function</span> (<span class="params">money</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">"小明表示："</span> + (money &gt; <span class="number">200</span> ? <span class="string">""</span> : <span class="string">"暂时很忙，不能"</span>) + <span class="string">"给予帮助"</span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line">hunterJin.subscribe(hunterPeter, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"小金表示：给予帮助"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">hunterZhang.subscribe(hunterPeter, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"小张表示：给予帮助"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Peter遇到困难，赏金198寻求帮助</span></span><br><span class="line">hunterPeter.publish(<span class="number">198</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//猎人们(观察者)关联他们感兴趣的猎人(目标对象)，如Peter，当Peter有困难时，会自动通知给他们（观察者）</span></span><br></pre></td></tr></table></figure>
<h4 id="发布订阅模式：">发布订阅模式：</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一家猎人工会</span></span><br><span class="line"><span class="comment">//主要功能包括任务发布大厅(topics)，以及订阅任务(subscribe)，发布任务(publish)</span></span><br><span class="line"><span class="keyword">let</span> HunterUnion = &#123;</span><br><span class="line">  type: <span class="string">"hunt"</span>,</span><br><span class="line">  topics: <span class="built_in">Object</span>.create(<span class="literal">null</span>),</span><br><span class="line">  subscribe: <span class="function"><span class="keyword">function</span> (<span class="params">topic, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.topics[topic]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.topics[topic] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.topics[topic].push(fn);</span><br><span class="line">  &#125;,</span><br><span class="line">  publish: <span class="function"><span class="keyword">function</span> (<span class="params">topic, money</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.topics[topic]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> fn <span class="keyword">of</span> <span class="keyword">this</span>.topics[topic]) &#123;</span><br><span class="line">      fn(money);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个猎人类</span></span><br><span class="line"><span class="comment">//包括姓名，级别</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hunter</span>(<span class="params">name, level</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.level = level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//猎人可在猎人工会发布订阅任务</span></span><br><span class="line">Hunter.prototype.subscribe = <span class="function"><span class="keyword">function</span> (<span class="params">topic, fn</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="keyword">this</span>.level + <span class="string">"猎人"</span> + <span class="keyword">this</span>.name + <span class="string">"订阅了狩猎"</span> + topic + <span class="string">"的任务"</span></span><br><span class="line">  );</span><br><span class="line">  HunterUnion.subscribe(topic, fn);</span><br><span class="line">&#125;;</span><br><span class="line">Hunter.prototype.publish = <span class="function"><span class="keyword">function</span> (<span class="params">topic, money</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="keyword">this</span>.level + <span class="string">"猎人"</span> + <span class="keyword">this</span>.name + <span class="string">"发布了狩猎"</span> + topic + <span class="string">"的任务"</span></span><br><span class="line">  );</span><br><span class="line">  HunterUnion.publish(topic, money);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//猎人工会走来了几个猎人</span></span><br><span class="line"><span class="keyword">let</span> hunterMing = <span class="keyword">new</span> Hunter(<span class="string">"小明"</span>, <span class="string">"黄金"</span>);</span><br><span class="line"><span class="keyword">let</span> hunterJin = <span class="keyword">new</span> Hunter(<span class="string">"小金"</span>, <span class="string">"白银"</span>);</span><br><span class="line"><span class="keyword">let</span> hunterZhang = <span class="keyword">new</span> Hunter(<span class="string">"小张"</span>, <span class="string">"黄金"</span>);</span><br><span class="line"><span class="keyword">let</span> hunterPeter = <span class="keyword">new</span> Hunter(<span class="string">"Peter"</span>, <span class="string">"青铜"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//小明，小金，小张分别订阅了狩猎tiger的任务</span></span><br><span class="line">hunterMing.subscribe(<span class="string">"tiger"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">money</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"小明表示："</span> + (money &gt; <span class="number">200</span> ? <span class="string">""</span> : <span class="string">"不"</span>) + <span class="string">"接取任务"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">hunterJin.subscribe(<span class="string">"tiger"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">money</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"小金表示：接取任务"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">hunterZhang.subscribe(<span class="string">"tiger"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">money</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"小张表示：接取任务"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//Peter订阅了狩猎sheep的任务</span></span><br><span class="line">hunterPeter.subscribe(<span class="string">"sheep"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">money</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Peter表示：接取任务"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Peter发布了狩猎tiger的任务</span></span><br><span class="line">hunterPeter.publish(<span class="string">"tiger"</span>, <span class="number">198</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//猎人们发布(发布者)或订阅(观察者/订阅者)任务都是通过猎人工会(调度中心)关联起来的，他们没有直接的交流。</span></span><br></pre></td></tr></table></figure>
<p>观察者模式和发布订阅模式最大的区别就是发布订阅模式有个事件调度中心。</p>
<p>观察者模式由具体目标调度，每个被订阅的目标里面都需要有对观察者的处理，这种处理方式比较直接粗暴，但是会造成代码的冗余。</p>
<p>而发布订阅模式中统一由调度中心进行处理，订阅者和发布者互不干扰，消除了发布者和订阅者之间的依赖。这样一方面实现了解耦，还有就是可以实现更细粒度的一些控制。比如发布者发布了很多消息，但是不想所有的订阅者都接收到，就可以在调度中心做一些处理，类似于权限控制之类的。还可以做一些节流操作。</p>
<p>如果以结构来分辨模式，发布订阅模式相比观察者模式多了一个中间件订阅器，所以发布订阅模式是不同于观察者模式的；如果以意图来分辨模式，他们都是实现了<strong>对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知，并自动更新</strong>，那么他们就是同一种模式，发布订阅模式是在观察者模式的基础上做的优化升级。<br>
[1]: <a href="http://www.cc12210.xyz/usr/uploads/2019/04/3266894173.png" target="_blank" rel="noopener">http://www.cc12210.xyz/usr/uploads/2019/04/3266894173.png</a></p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>发布订阅模式</tag>
        <tag>观察者模式</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>betterScroll踩坑记录</title>
    <url>/2019/05/07/2019-05-07-betterScroll%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h4 id="关于动态加载-dom">关于动态加载 dom</h4>
<p>在 vue 的 spa 单页面应用中，大多数 dom 都是通过 axios 请求数据后进行渲染的<br>
所以渲染和初始化 scroll 的的时机是不固定的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在数据获取成功之后触发一个自定义事件,$center不了解的翻我的博客，组件传值</span></span><br><span class="line"><span class="keyword">this</span>.$center.$emit(<span class="string">"initScroll"</span>);</span><br></pre></td></tr></table></figure>
<h4 id="在封装好的-betterscroll-组件的-mounted-中监听这个事件">在封装好的 betterscroll 组件的 mounted 中监听这个事件</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"horSlider"</span> <span class="attr">ref</span>=<span class="string">"horWrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hor-slide-content"</span> <span class="attr">ref</span>=<span class="string">"wrapperContent"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> BScroll <span class="keyword">from</span> <span class="string">"better-scroll"</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">"hor-slider"</span>,</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 监听axios数据赋值后进行初始化scroll操作</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$center.$on(<span class="string">"initScroll"</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.initScroll();</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      initScroll() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 获取元素下所有子节点</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">const</span> children = <span class="keyword">this</span>.$refs.wrapperContent.children;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> maxWidth = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 计算子节点全部宽度</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span></span><br><span class="line">            maxWidth += children[i].clientWidth;</span><br><span class="line">          &#125;</span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (maxWidth &gt;= <span class="built_in">document</span>.body.offsetWidth) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 赋值宽度</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$refs.wrapperContent.style.width = maxWidth + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.scroll = <span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$refs.horWrapper, &#123;</span></span><br><span class="line"><span class="actionscript">              scrollX: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">              scrollY: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">              tap: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">              click: <span class="literal">true</span>,</span></span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.horSlider</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 50px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.hor-slide-content</span> &#123;</span></span><br><span class="line">      &gt; p,</span><br><span class="line">      &gt; span &#123;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        width: 60px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        height: 100%;</span><br><span class="line">        line-height: 50px;</span><br><span class="line">      &#125;</span><br><span class="line">      &gt; span &#123;</span><br><span class="line">        width: 60px;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="这里我做的是一个横向滚动的-scroll-组件，所以需要计算横向的总宽度来进行初始化">这里我做的是一个横向滚动的 scroll 组件，所以需要计算横向的总宽度来进行初始化</h4>
<h4 id="如果是纵向就直接初始化即可">如果是纵向就直接初始化即可</h4>
<p><img src="http://www.cc12210.xyz/usr/uploads/2019/05/1381261571.png" alt="仿追书神器app"></p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>betterscroll</tag>
        <tag>动态加载</tag>
        <tag>初始化</tag>
      </tags>
  </entry>
  <entry>
    <title>统一的功能性代码</title>
    <url>/2019/05/15/2019-05-15-%E7%BB%9F%E4%B8%80%E7%9A%84%E5%8A%9F%E8%83%BD%E6%80%A7%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h3 id="整理一些常用的功能型代码">整理一些常用的功能型代码</h3>
<h4 id="将其绑定在-Vue-的原型链中-便于调用">将其绑定在 Vue 的原型链中,便于调用</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// this._.xxx调用</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> tool <span class="keyword">from</span> <span class="string">"./tool"</span>;</span><br><span class="line">Vue.prototype._ = tool;</span><br></pre></td></tr></table></figure>
<h4 id="类型判断函数">类型判断函数</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getType = <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="built_in">Object</span>.prototype.toString.call(v);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isArray = <span class="function">(<span class="params">v</span>) =&gt;</span> getType(v) === <span class="string">"[object Array]"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isObject = <span class="function">(<span class="params">v</span>) =&gt;</span> getType(v) === <span class="string">"[object Object]"</span>;</span><br></pre></td></tr></table></figure>
<h4 id="睡眠函数">睡眠函数</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sleep = <span class="function">(<span class="params">time</span>) =&gt;</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="拷贝函数">拷贝函数</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> merge = <span class="function">(<span class="params">...rest</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> target = rest[<span class="number">0</span>] || &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> src;</span><br><span class="line">  <span class="keyword">let</span> copy;</span><br><span class="line">  <span class="keyword">let</span> clone;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> deep = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">"boolean"</span>) &#123;</span><br><span class="line">    deep = target;</span><br><span class="line">    target = rest[<span class="number">1</span>] || &#123;&#125;;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; rest.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> option = rest[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> name <span class="keyword">in</span> option) &#123;</span><br><span class="line">      src = target[name];</span><br><span class="line">      copy = option[name];</span><br><span class="line">      <span class="keyword">if</span> (deep &amp;&amp; copy &amp;&amp; <span class="keyword">typeof</span> copy === <span class="string">"object"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isArray(copy)) &#123;</span><br><span class="line">          clone = src &amp;&amp; isArray(src) ? src : [];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          clone = src &amp;&amp; isObject(src) ? src : &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        target[name] = merge(clone, copy);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (copy !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        target[name] = copy;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="对象解析为请求字符串">对象解析为请求字符串</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> parseToUrl = <span class="function">(<span class="params">param</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> ret = <span class="string">""</span>;</span><br><span class="line">  <span class="built_in">Object</span>.keys(param).forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item) &#123;</span><br><span class="line">      <span class="keyword">let</span> val =</span><br><span class="line">        <span class="keyword">typeof</span> param[item] === <span class="string">"object"</span></span><br><span class="line">          ? <span class="built_in">JSON</span>.stringify(param[item])</span><br><span class="line">          : param[item];</span><br><span class="line">      ret += <span class="built_in">encodeURIComponent</span>(item) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(val) + <span class="string">"&amp;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> ret.slice(<span class="number">0</span>, ret.length - <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="节流函数">节流函数</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> throttle = <span class="function">(<span class="params">fn, delay</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      fn();</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="设备判断">设备判断</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isMobile = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> userAgentInfo = navigator.userAgent;</span><br><span class="line">  <span class="keyword">let</span> Agents = [</span><br><span class="line">    <span class="string">"Android"</span>,</span><br><span class="line">    <span class="string">"iPhone"</span>,</span><br><span class="line">    <span class="string">"SymbianOS"</span>,</span><br><span class="line">    <span class="string">"Windows Phone"</span>,</span><br><span class="line">    <span class="string">"iPad"</span>,</span><br><span class="line">    <span class="string">"iPod"</span>,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> v = <span class="number">0</span>; v &lt; Agents.length; v++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (userAgentInfo.indexOf(Agents[v]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="获取-cookie">获取 cookie</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getCookie = <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="built_in">document</span>.cookie.split(<span class="string">";"</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> temp = arr[i].split(<span class="string">"="</span>);</span><br><span class="line">    <span class="keyword">if</span> (temp[<span class="number">0</span>].trim() === name) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">unescape</span>(temp[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="验证">验证</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> validate = <span class="function">(<span class="params">val, name</span>) =&gt;</span> regexp[name].test(val);</span><br></pre></td></tr></table></figure>
<h4 id="将类数组对象转为数组">将类数组对象转为数组</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> toArray = <span class="function">(<span class="params">list, start</span>) =&gt;</span> &#123;</span><br><span class="line">  start = start || <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> i = list.length - start;</span><br><span class="line">  <span class="keyword">let</span> ret = <span class="keyword">new</span> <span class="built_in">Array</span>(i);</span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    ret[i] = list[i + start];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>常用</tag>
        <tag>功能</tag>
        <tag>封装</tag>
      </tags>
  </entry>
  <entry>
    <title>vue代码规范</title>
    <url>/2019/05/13/2019-05-13-vue%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h1>Vue 组件代码规范</h1>
<p><a href="#1">1 前言</a></p>
<p><a href="#2">2 代码风格</a></p>
<p><a href="#2.1">2.1 缩进</a></p>
<p><a href="#2.2">2.2 单行最长限制</a></p>
<p><a href="#2.3">2.3 模块书写顺序</a></p>
<p><a href="#3">3 template 部分</a></p>
<a id="more"></a>
<p><a href="#3.1">3.1 根节点</a></p>
<p><a href="#3.2">3.2 标签</a></p>
<p><a href="#3.3">3.3 属性</a></p>
<p><a href="#3.4">3.4 指令</a></p>
<p><a href="#3.5">3.5 插值（Mustache）</a></p>
<p><a href="#3.6">3.6 空格</a></p>
<p><a href="#3.7">3.7 变量</a></p>
<p><a href="#4">4 javascript 部分</a></p>
<p><a href="#4.1">4.1 props</a></p>
<p><a href="#4.2">4.2 data</a></p>
<p><a href="#4.3">4.3 变量</a></p>
<p><a href="#4.4">4.4 其他</a></p>
<p><a href="#5">5 style 部分</a></p>
<p><a href="#6">6 参考</a></p>
<h2 id="a-style-color-333-name-1-1-前言-a"><a style="color: #333" name="1">1 前言</a></h2>
<p>任何问题或建议，欢迎跟我们讨论: <a href="mailto:fe-styleguide@baidu.com">fe-styleguide@baidu.com</a></p>
<h2 id="a-style-color-333-name-2-2-代码风格-a"><a style="color: #333" name="2">2 代码风格</a></h2>
<h3 id="a-style-color-333-name-2-1-2-1-缩进-a"><a style="color: #333" name="2.1">2.1 缩进</a></h3>
<h4 id="强制-使用-4-个空格做为一个缩进层级，不允许使用-2-个空格或-tab-字符">[强制] 使用 <code>4</code> 个空格做为一个缩进层级，不允许使用 <code>2</code> 个空格或 <code>tab</code> 字符</h4>
<h3 id="a-style-color-333-name-2-2-2-2-单行最长限制-a"><a style="color: #333" name="2.2">2.2 单行最长限制</a></h3>
<h4 id="强制-每行不得超过-120-个字符">[强制] 每行不得超过 <code>120</code> 个字符</h4>
<h3 id="a-style-color-333-name-2-3-2-3-模块书写顺序-a"><a style="color: #333" name="2.3">2.3 模块书写顺序</a></h3>
<h4 id="建议-template-script-style">[建议] <code>template</code> -&gt; <code>script</code> -&gt; <code>style</code></h4>
<h2 id="a-style-color-333-name-3-3-template-部分-a"><a style="color: #333" name="3">3 template 部分</a></h2>
<h3 id="a-style-color-333-name-3-1-3-1-根节点-a"><a style="color: #333" name="3.1">3.1 根节点</a></h3>
<h4 id="强制-template-根节点只允许包含一个直接子节点，以下情况都是不允许的：">[强制] <code>template</code> 根节点只允许包含一个直接子节点，以下情况都是不允许的：</h4>
<ul>
<li>根结点为空；</li>
<li>根结点是文字；</li>
<li>根结点有多个元素；</li>
<li>在根结点使用循环；</li>
<li>在根结点使用 template 和 slot；</li>
<li>在根结点使用 v-if，但是没有 v-else；</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>one<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>two<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"x in list"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>one<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="a-style-color-333-name-3-2-3-2-标签-a"><a style="color: #333" name="3.2">3.2 标签</a></h3>
<h4 id="强制-自定义组件的标签名不得使用-HTML-中默认已定义的标签（reserved-HTML-elements），要求至少由两个单词组成，并且符合-kebab-case">[强制] 自定义组件的标签名不得使用 HTML 中默认已定义的标签（reserved HTML elements），要求至少由两个单词组成，并且符合 <code>kebab-case</code></h4>
<p>解释：</p>
<p>避免和 HTML 保留字段冲突导致错误。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">sub</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> OtherComponent <span class="keyword">from</span> <span class="string">"./OtherComponent.vue"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      sub: OtherComponent,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">other-component</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> OtherComponent <span class="keyword">from</span> <span class="string">"./OtherComponent.vue"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      OtherComponent,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycomponent</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">myComponent</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>预留的 html 标签包括：</p>
</blockquote>
<blockquote>
<p><code>html</code>,<code>body</code>,<code>base</code>,<code>head</code>,<code>link</code>,<code>meta</code>,<code>style</code>,<code>title</code>,<code>address</code>,<code>article</code>,<code>aside</code>,<code>footer</code>,<code>header</code>,<code>h1</code>,<code>h2</code>,<code>h3</code>,<code>h4</code>,<code>h5</code>,<code>h6</code>,<code>hgroup</code>,<code>nav</code>,<code>section</code>,<code>div</code>,<code>dd</code>,<code>dl</code>,<code>dt</code>,<code>figcaption</code>,<code>figure</code>,<code>picture</code>,<code>hr</code>,<code>img</code>,<code>li</code>,<code>main</code>,<code>ol</code>,<code>p</code>,<code>pre</code>,<code>ul</code>,<code>a</code>,<code>b</code>,<code>abbr</code>,<code>bdi</code>,<code>bdo</code>,<code>br</code>,<code>cite</code>,<code>code</code>,<code>data</code>,<code>dfn</code>,<code>em</code>,<code>i</code>,<code>kbd</code>,<code>mark</code>,<code>q</code>,<code>rp</code>,<code>rt</code>,<code>rtc</code>,<code>ruby</code>,<code>s</code>,<code>samp</code>,<code>small</code>,<code>span</code>,<code>strong</code>,<code>sub</code>,<code>sup</code>,<code>time</code>,<code>u</code>,<code>var</code>,<code>wbr</code>,<code>area</code>,<code>audio</code>,<code>map</code>,<code>track</code>,<code>video</code>,<code>embed</code>,<code>object</code>,<code>param</code>,<code>source</code>,<code>canvas</code>,<code>script</code>,<code>noscript</code>,<code>del</code>,<code>ins</code>,<code>caption</code>,<code>col</code>,<code>colgroup</code>,<code>table</code>,<code>thead</code>,<code>tbody</code>,<code>td</code>,<code>th</code>,<code>tr</code>,<code>button</code>,<code>datalist</code>,<code>fieldset</code>,<code>form</code>,<code>input</code>,<code>label</code>,<code>legend</code>,<code>meter</code>,<code>optgroup</code>,<code>option</code>,<code>output</code>,<code>progress</code>,<code>select</code>,<code>textarea</code>,<code>details</code>,<code>dialog</code>,<code>menu</code>,<code>menuitem</code>,<code>summary</code>,<code>content</code>,<code>element</code>,<code>shadow</code>,<code>template</code>,<code>blockquote</code>,<code>iframe</code>,<code>tfoot</code>；</p>
</blockquote>
<blockquote>
<p>预留的 SVG 标签包括：</p>
</blockquote>
<blockquote>
<p><code>svg</code>,<code>animate</code>,<code>circle</code>,<code>clippath</code>,<code>cursor</code>,<code>defs</code>,<code>desc</code>,<code>ellipse</code>,<code>filter</code>,<code>font-face</code>,<code>foreignObject</code>,<code>g</code>,<code>glyph</code>,<code>image</code>,<code>line</code>,<code>marker</code>,<code>mask</code>,<code>missing-glyph</code>,<code>path</code>,<code>pattern</code>,<code>polygon</code>,<code>polyline</code>,<code>rect</code>,<code>switch</code>,<code>symbol</code>,<code>text</code>,<code>textpath</code>,<code>tspan</code>,<code>use</code>,<code>view</code></p>
</blockquote>
<h4 id="强制-html-void-element-不需要闭合，其它类型标签都需要闭合">[强制]<a href="https://www.w3.org/TR/html51/syntax.html#void-elements" target="_blank" rel="noopener">html void element</a> 不需要闭合，其它类型标签都需要闭合</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="强制-非根结点的-template-标签里必须有一个以上的子结点">[强制] 非根结点的 <code>template</code> 标签里必须有一个以上的子结点</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="强制-template-标签上不能带有-key-属性">[强制] <code>template</code> 标签上不能带有 <code>key</code> 属性</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">key</span>=<span class="string">"x"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-bind:key</span>=<span class="string">"y"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">:key</span>=<span class="string">"z"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">"x"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="强制-如果自定义标签中没有内容，需要以自闭合标签形式出现">[强制] 如果自定义标签中没有内容，需要以自闭合标签形式出现</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">c-title</span> <span class="attr">:url</span>=<span class="string">"url"</span> <span class="attr">:label-type</span>=<span class="string">"type"</span>&gt;</span><span class="tag">&lt;/<span class="name">c-title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">c-title</span> <span class="attr">:url</span>=<span class="string">"url"</span> <span class="attr">:label-type</span>=<span class="string">"type"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="强制-标签右括号-的位置：">[强制] 标签右括号 <code>&gt;</code> 的位置：</h4>
<ul>
<li>元素只有一行时，右括号与元素保持在同一行。</li>
<li>多行元素（元素最后一个属性与左括号 <code>&lt;</code> 不在同一行）时，右括号 <code>&gt;</code> 需要另起一行，缩进与左括号 <code>&lt;</code> 保持对齐。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"foo"</span> <span class="attr">class</span>=<span class="string">"bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"foo"</span> <span class="attr">class</span>=<span class="string">"bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"foo"</span> <span class="attr">class</span>=<span class="string">"bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"foo"</span> <span class="attr">class</span>=<span class="string">"bar"</span>&gt;</span></span><br><span class="line">  some message</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">c-title</span> <span class="attr">:text</span>=<span class="string">"text"</span> <span class="attr">:url</span>=<span class="string">"url"</span> <span class="attr">:label-type</span>=<span class="string">"type"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">c-title</span> <span class="attr">:text</span>=<span class="string">"text"</span> <span class="attr">:url</span>=<span class="string">"url"</span> <span class="attr">:label-type</span>=<span class="string">"type"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="建议-自闭合标签的-前不用添加空格">[建议] 自闭合标签的 <code>/&gt;</code> 前不用添加空格</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">c-title</span> <span class="attr">:url</span>=<span class="string">"url"</span> <span class="attr">:label-type</span>=<span class="string">"type"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c-title</span> <span class="attr">:url</span>=<span class="string">"url"</span> <span class="attr">:label-type</span>=<span class="string">"type"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="a-style-color-333-name-3-3-3-3-属性-a"><a  style="color: #333" name="3.3">3.3 属性</a></h3>
<h4 id="强制-属性值必须用双引号包围">[强制] 属性值必须用双引号包围</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c-color"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c-color"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="强制-模板中的属性命名需要符合-kebab-case">[强制] 模板中的属性命名需要符合 <code>kebab-case</code></h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">greetingText</span>=<span class="string">"hi"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">greeting-text</span>=<span class="string">"hi"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="强制-class-style-属性值不能设置空字符串">[强制] <code>class</code> / <code>style</code> 属性值不能设置空字符串</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="建议-布尔类型的属性值为-true-时，建议不添加属性值">[建议] 布尔类型的属性值为 <code>true</code> 时，建议不添加属性值</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">c-title</span> <span class="attr">text</span>=<span class="string">"带箭头标题"</span> <span class="attr">:arrow</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">disabled</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c-title</span> <span class="attr">text</span>=<span class="string">"带箭头标题"</span> <span class="attr">arrow</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c-title</span> <span class="attr">text</span>=<span class="string">"带箭头标题"</span> <span class="attr">:arrow</span>=<span class="string">"false"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="强制-当组件的属性多于-2-个时，必须分成多行，每行写一个属性；只有属性个数小于或等于-2-个时，可以写在一行内">[强制] 当组件的属性多于 <code>2</code> 个时，必须分成多行，每行写一个属性；只有属性个数小于或等于 <code>2</code> 个时，可以写在一行内</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">c-title</span> <span class="attr">:text</span>=<span class="string">"text"</span> <span class="attr">:url</span>=<span class="string">"url"</span> <span class="attr">:label-type</span>=<span class="string">"type"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">c-title</span> <span class="attr">:text</span>=<span class="string">"text"</span> <span class="attr">:url</span>=<span class="string">"url"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c-title</span> <span class="attr">:text</span>=<span class="string">"text"</span> <span class="attr">:url</span>=<span class="string">"url"</span> <span class="attr">:label-type</span>=<span class="string">"type"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="建议-当元素有多个属性时，应该按照统一的顺序书写">[建议] 当元素有多个属性时，应该按照统一的顺序书写</h4>
<p>优先级顺序：</p>
<ol>
<li>定义（提供组件的选项）
<ul>
<li>is</li>
</ul>
</li>
<li>列表渲染（创建多个变化的相同元素）
<ul>
<li>v-for</li>
</ul>
</li>
<li>条件渲染（元素是否渲染/显示）
<ul>
<li>v-if</li>
<li>v-else-if</li>
<li>v-else</li>
<li>v-show</li>
<li>v-cloak</li>
</ul>
</li>
<li>渲染方式（改变元素的渲染方式）
<ul>
<li>v-pre/v-once</li>
</ul>
</li>
<li>全局感知（需要超越组件的知识）
<ul>
<li>id</li>
</ul>
</li>
<li>唯一的特性（需要唯一值的特性）
<ul>
<li>ref</li>
<li>key</li>
<li>slot</li>
</ul>
</li>
<li>双向绑定（把绑定和事件结合起来）
<ul>
<li>v-model</li>
</ul>
</li>
<li>未绑定的属性</li>
<li>其它绑定（所有普通的绑定）
<ul>
<li>v-bind</li>
</ul>
</li>
<li>事件（组件事件监听器）
<ul>
<li>v-on</li>
</ul>
</li>
<li>内容（覆写元素的内容）
<ul>
<li>v-html</li>
<li>v-text</li>
</ul>
</li>
</ol>
<h4 id="强制-不能有重复的属性，class-和-style-除外">[强制] 不能有重复的属性，<code>class</code> 和 <code>style</code> 除外</h4>
<p>解释：</p>
<p>这里重复的属性包括以下两种情况：</p>
<ol>
<li>属性名完全一样：如有多个 <code>foo</code> 或者有多个 <code>:foo</code></li>
<li>有一个普通属性和一个 <code>v-bind</code> 动态绑定的属性，动态绑定的属性名与普通属性名重复</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">c-title</span> <span class="attr">foo</span>=<span class="string">"abc"</span> <span class="attr">:foo</span>=<span class="string">"def"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c-title</span> <span class="attr">foo</span>=<span class="string">"def"</span> <span class="attr">foo</span>=<span class="string">"abc"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c-title</span> <span class="attr">class</span>=<span class="string">"def"</span> <span class="attr">class</span>=<span class="string">"abc"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c-title</span> <span class="attr">style</span>=<span class="string">"def"</span> <span class="attr">style</span>=<span class="string">"abc"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">c-title</span> <span class="attr">:foo</span>=<span class="string">"def"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c-title</span> <span class="attr">foo</span>=<span class="string">"abc"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c-title</span> <span class="attr">class</span>=<span class="string">"c-color"</span> <span class="attr">:class</span>=<span class="string">"&#123;'c-selected': selected&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c-title</span> <span class="attr">style</span>=<span class="string">"color: #000;"</span> <span class="attr">:style</span>=<span class="string">"&#123;width: '100px'&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="建议-slot-命名采用-kebab-case">[建议] <code>slot</code> 命名采用 <code>kebab-case</code></h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"header-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"header-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="建议-ref-命名采用-PascalCase">[建议] <code>ref</code> 命名采用 <code>PascalCase</code></h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"userInfo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="a-style-color-333-name-3-4-3-4-指令-a"><a style="color: #333" name="3.4">3.4 指令</a></h3>
<h4 id="强制-在使用-v-for-的元素上添加-key，以便维护内部组件及其子树的状态">[强制] 在使用 <code>v-for</code> 的元素上添加 <code>key</code>，以便维护内部组件及其子树的状态</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"todo in todos"</span> <span class="attr">:key</span>=<span class="string">"todo.id"</span>&gt;</span></span><br><span class="line">    &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="建议-不要把-v-if-和-v-for-同时用在同一个元素上">[建议] 不要把 <code>v-if</code> 和 <code>v-for</code> 同时用在同一个元素上</h4>
<p>解释：</p>
<p>当 Vue 处理指令时，<code>v-for</code> 比 <code>v-if</code> 具有更高的优先级。所以如果想要使用 <code>v-if</code> 判断 <code>v-for</code> 元素列表是否显示，将两个指令同时应用在同一个元素的方法就是错误的。引入这个规则是为了避免引起困惑。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"user in users"</span> <span class="attr">v-if</span>=<span class="string">"user.isActive"</span> <span class="attr">:key</span>=<span class="string">"user.id"</span>&gt;</span></span><br><span class="line">    &#123;&#123; user.name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"user in activeUsers"</span> <span class="attr">:key</span>=<span class="string">"user.id"</span>&gt;</span></span><br><span class="line">      &#123;&#123; user.name &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    computed: &#123;</span><br><span class="line"><span class="actionscript">      activeUsers: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">this</span>.users.filter(<span class="function"><span class="keyword">function</span> <span class="params">(user)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> user.isActive;</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="建议-以下指令统一使用缩写">[建议] 以下指令统一使用缩写</h4>
<ul>
<li>使用 <code>:</code> 表示 <code>v-bind:</code></li>
<li>使用 <code>@</code> 表示 <code>v-on:</code></li>
</ul>
<h3 id="a-style-color-333-name-3-5-3-5-插值（Mustache）-a"><a style="color: #333" name="3.5">3.5 插值（Mustache）</a></h3>
<h4 id="建议-插值左右添加一个空格">[建议] 插值左右添加一个空格</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="a-style-color-333-name-3-6-3-6-空格-a"><a style="color: #333" name="3.6">3.6 空格</a></h3>
<h4 id="强制-不能有多余空格">[强制] 不能有多余空格</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"foo"</span> <span class="attr">:style</span>=<span class="string">"bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"foo"</span> <span class="attr">:style</span>=<span class="string">"bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="a-style-color-333-name-3-7-3-7-变量-a"><a style="color: #333" name="3.7">3.7 变量</a></h3>
<h4 id="强制-不能有多余的变量">[强制] 不能有多余的变量</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- "i" is defined but never used. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"i in 5"</span>&gt;</span>item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"i in 5"</span>&gt;</span>&#123;&#123; i &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="强制-禁止在插值中使用-this">[强制] 禁止在插值中使用 <code>this</code></h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"this.url"</span>&gt;</span></span><br><span class="line">  &#123;&#123; this.text &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span></span><br><span class="line">  &#123;&#123; text &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="a-style-color-333-name-4-4-javascript-部分-a"><a style="color: #333" name="4">4 javascript 部分</a></h2>
<h3 id="a-style-color-333-name-4-1-4-1-props-a"><a style="color: #333" name="4.1">4.1 props</a></h3>
<h4 id="强制-指定-props-类型">[强制] 指定 <code>props</code> 类型</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    props: [<span class="string">'status'</span>]</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line"><span class="javascript">        status: <span class="built_in">String</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="强制-如果-props-没有指定为-required-或者-required-为-false，则需要指定默认值">[强制] 如果 <code>props</code> 没有指定为 <code>required</code> 或者 <code>required</code> 为 <code>false</code>，则需要指定默认值</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line"><span class="javascript">      a: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      b: [<span class="built_in">Number</span>, <span class="built_in">String</span>],</span></span><br><span class="line">      c: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span>,</span></span><br><span class="line">      &#125;,</span><br><span class="line">      d: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="actionscript">        required: <span class="literal">false</span>,</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      a: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="actionscript">        required: <span class="literal">true</span>,</span></span><br><span class="line">      &#125;,</span><br><span class="line">      b: &#123;</span><br><span class="line"><span class="javascript">        type: [<span class="built_in">Number</span>, <span class="built_in">String</span>],</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">default</span>: <span class="number">0</span>,</span></span><br><span class="line">      &#125;,</span><br><span class="line">      c: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">default</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="actionscript">        required: <span class="literal">false</span>,</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="强制-props-提供的默认值必须满足校验条件">[强制] <code>props</code> 提供的默认值必须满足校验条件</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">        propA: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">default</span>: &#123;&#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        propB: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">default</span>: []</span></span><br><span class="line">        &#125;,</span><br><span class="line">        propC: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">default</span>: []</span></span><br><span class="line">        &#125;,</span><br><span class="line">        propD: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">default</span>: []</span></span><br><span class="line">        &#125;,</span><br><span class="line">        propE: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">default</span>: &#123;</span></span><br><span class="line"><span class="actionscript">                message: <span class="string">'hello'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line"><span class="javascript">        propA: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">        propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span></span><br><span class="line">        propD: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">default</span>: <span class="number">100</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        propE: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">default</span>() &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    message: <span class="string">'hello'</span></span></span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="强制-在-props-中声明的属性，其属性名应该始终符合-camelCase">[强制] 在 <code>props</code> 中声明的属性，其属性名应该始终符合 <code>camelCase</code></h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line"><span class="javascript">      <span class="string">"greeting-text"</span>: <span class="built_in">String</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line"><span class="javascript">      greetingText: <span class="built_in">String</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="a-style-color-333-name-4-2-4-2-data-a"><a style="color: #333" name="4.2">4.2 data</a></h3>
<h4 id="强制-data-必须是一个函数">[强制] <code>data</code> 必须是一个函数</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      b: 1,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        b: 1,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="强制-data-中禁止使用-computed-中的变量">[强制] <code>data</code> 中禁止使用 <code>computed</code> 中的变量</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      a: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">default</span>: <span class="number">0</span>,</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        d: <span class="keyword">this</span>.f,</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      f() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">this</span>.a * <span class="number">10</span>;</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="强制-props-data-computed-methods-中不能有重复的-key">[强制] <code>props</code>, <code>data</code>, <code>computed</code>, <code>methods</code> 中不能有重复的 <code>key</code></h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line"><span class="javascript">      foo: <span class="built_in">String</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        foo: <span class="literal">null</span>,</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      foo() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="string">"foo"</span>;</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line"><span class="javascript">      foo: <span class="built_in">String</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        bar: <span class="literal">null</span>,</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      baz() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> foo + bar;</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="a-style-color-333-name-4-3-4-3-变量-a"><a style="color: #333" name="4.3">4.3 变量</a></h3>
<h4 id="强制-不能使用-Vue-中的保留字段命名变量">[强制] 不能使用 Vue 中的保留字段命名变量</h4>
<p>解释：</p>
<p>Vue 使用 <code>_</code> 前缀来定义其自身的私有属性，所以使用相同的前缀 (比如 <code>_update</code>) 有覆写实例属性的风险。即便你检查确认 Vue 当前版本没有用到这个属性名，也不能保证和将来的版本没有冲突。</p>
<p>对于 <code>$</code> 前缀来说，其在 Vue 生态系统中的目的是暴露给用户的一个特殊的实例属性，所以把它用于私有属性并不合适。</p>
<p>不过，我们推荐把这两个前缀结合为 <code>$_</code>，作为一个用户定义的私有属性的约定，以确保不会和 Vue 自身相冲突。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line"><span class="javascript">      $el: <span class="built_in">String</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        _foo: <span class="literal">null</span>,</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      $on() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="number">2</span>;</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      $nextTick() &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="a-style-color-333-name-4-4-4-4-其它-a"><a style="color: #333" name="4.4">4.4 其它</a></h3>
<h4 id="建议-组件中使用-emit-事件时携带的参数，个数不应该超过-2-个。建议将数据参数以-Object-形式传递，将事件参数-event-放在最后">[建议] 组件中使用 <code>$emit</code> 事件时携带的参数，个数不应该超过 <code>2</code> 个。建议将数据参数以 <code>Object</code> 形式传递，将事件参数 <code>event</code> 放在最后</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">onClick(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">'click'</span>, <span class="keyword">this</span>.value1, <span class="keyword">this</span>.value2, event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">onClick(event) &#123;</span><br><span class="line">   <span class="keyword">this</span>.$emit(</span><br><span class="line">       <span class="string">'click'</span>,</span><br><span class="line">       &#123;</span><br><span class="line">           value1: <span class="keyword">this</span>.value1,</span><br><span class="line">           value2: <span class="keyword">this</span>.value2</span><br><span class="line">       &#125;,</span><br><span class="line">       event</span><br><span class="line">   );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">onClick(event) &#123;</span><br><span class="line">   <span class="keyword">this</span>.$emit(<span class="string">'click'</span>, event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="a-style-color-333-name-5-5-style-部分-a"><a style="color: #333" name="5">5 style 部分</a></h2>
<h4 id="建议-为组件样式设置作用域">[建议] 为组件样式设置作用域</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.button</span> &#123;</span></span><br><span class="line">    border: none;</span><br><span class="line">    border-radius: 2px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="a-style-color-333-name-6-6-参考-a"><a style="color: #333" name="6">6 参考</a></h2>
<ul>
<li><a href="https://cn.vuejs.org/v2/style-guide/" target="_blank" rel="noopener">vue 代码风格指南</a></li>
<li><a href="https://github.com/ecomfe/spec/blob/master/html-style-guide.md" target="_blank" rel="noopener">ecomfe HTML 编码规范</a></li>
<li><a href="https://github.com/ecomfe/spec/blob/master/javascript-style-guide.md" target="_blank" rel="noopener">ecomfe JavaScript 编码规范</a></li>
<li><a href="https://github.com/ecomfe/spec/blob/master/es-next-style-guide.md" target="_blank" rel="noopener">ecomfe JavaScript 编码规范 - ESNext 补充篇（草案）</a></li>
<li><a href="https://github.com/ecomfe/spec/blob/master/css-style-guide.md" target="_blank" rel="noopener">ecomfe CSS 编码规范</a></li>
<li><a href="https://github.com/ecomfe/spec/blob/master/less-code-style.md" target="_blank" rel="noopener">ecomfe less 编码规范</a></li>
</ul>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>代码规范</tag>
        <tag>vue规范</tag>
      </tags>
  </entry>
  <entry>
    <title>axios下载文件流</title>
    <url>/2019/06/13/2019-06-13-axios%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E6%B5%81/</url>
    <content><![CDATA[<h3 id="在-main-js-中将常用的函数绑定到-vue-的原型上">在 main.js 中将常用的函数绑定到 vue 的原型上</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> tool <span class="keyword">from</span> <span class="string">"./tool"</span>;</span><br><span class="line"><span class="comment">// 将通用方法放入 Vue 的 _ 下，作为全局工具方法使用</span></span><br><span class="line">Vue.prototype._ = tool;</span><br></pre></td></tr></table></figure>
<h3 id="tool-js">tool.js</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> downloadFile = <span class="function">(<span class="params">params, api, Filename</span>) =&gt;</span> &#123;</span><br><span class="line">  axios(&#123;</span><br><span class="line">    method: <span class="string">"GET"</span>,</span><br><span class="line">    url: api,</span><br><span class="line">    params: params,</span><br><span class="line">    responseType: <span class="string">"blob"</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 表示xlsx类型</span></span><br><span class="line">      <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([res], &#123;</span><br><span class="line">        type:</span><br><span class="line">          <span class="string">"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8"</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">var</span> downloadElement = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span><br><span class="line">      <span class="keyword">var</span> href = <span class="built_in">window</span>.URL.createObjectURL(blob); <span class="comment">// 创建下载的链接</span></span><br><span class="line">      downloadElement.href = href;</span><br><span class="line">      downloadElement.download = Filename; <span class="comment">// 下载后文件名</span></span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(downloadElement);</span><br><span class="line">      downloadElement.click(); <span class="comment">// 点击下载</span></span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(downloadElement); <span class="comment">// 下载完成移除元素</span></span><br><span class="line">      <span class="built_in">window</span>.URL.revokeObjectURL(href); <span class="comment">// 释放掉blob对象</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="外部直接调用传入对应的-url，params，文件名即可">外部直接调用传入对应的 url，params，文件名即可</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this._.downloadFile(params, apiUrl.faqPublishedList, &#39;faq.csv&#39;);</span><br></pre></td></tr></table></figure>
<h3 id="最关键的是在-axios-发送时配置接收的类型">最关键的是在 axios 发送时配置接收的类型</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">responseType: <span class="string">"blob"</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>axios</tag>
        <tag>下载</tag>
      </tags>
  </entry>
  <entry>
    <title>vue拖拽上传功能开发</title>
    <url>/2019/06/13/2019-06-13-vue%E6%8B%96%E6%8B%BD%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h3 id="需要实现一个拖拽上传的功能">需要实现一个拖拽上传的功能</h3>
<p><img src="http://www.cc12210.xyz/usr/uploads/2019/06/2400392853.png" alt="拖拽上传UE稿"></p>
<a id="more"></a>
<h4 id="代码">代码</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"faqManage-upload"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">dragenter</span>=<span class="string">"handlePicDragEnter"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">dragover</span>=<span class="string">"handlePicDragOver"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">drop</span>=<span class="string">"handlePicDropInvalid"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dragbox-wrap"</span> @<span class="attr">drop</span>=<span class="string">"handlePicSubmit"</span> <span class="attr">v-if</span>=<span class="string">"onPicDrag"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">j-icon</span> <span class="attr">size</span>=<span class="string">"60"</span> <span class="attr">type</span>=<span class="string">"shangchuanwendang"</span>&gt;</span><span class="tag">&lt;/<span class="name">j-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>释放文档即可上传<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">j-form</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:model</span>=<span class="string">"form"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">ref</span>=<span class="string">"form"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:align</span>=<span class="string">"align"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">"width: 540px; margin: 100px auto;"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">j-form-item</span> <span class="attr">label</span>=<span class="string">"文档上传："</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"getFaqModel"</span>&gt;</span>下载模板<span class="tag">&lt;/<span class="name">a</span></span></span><br><span class="line"><span class="tag">          &gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span>按照模板格式填写文档信息后上传，文件不超过500K</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">j-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">j-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">j-upload</span></span></span><br><span class="line"><span class="tag">          <span class="attr">ref</span>=<span class="string">"upload"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">accept</span>=<span class="string">".xlsx"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:action</span>=<span class="string">"uploadFiles"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:on-success</span>=<span class="string">"handleSuccess"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:before-upload</span>=<span class="string">"beforeUpload"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:on-remove</span>=<span class="string">"handleRemove"</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">j-button</span> <span class="attr">size</span>=<span class="string">"large"</span> <span class="attr">icon</span>=<span class="string">"daochu"</span>&gt;</span>&#123;&#123;uploadName&#125;&#125;<span class="tag">&lt;/<span class="name">j-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">j-upload</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">j-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">j-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">j-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">style</span>=<span class="string">"marginRight:20px;"</span> @<span class="attr">click</span>=<span class="string">"submitUpload"</span></span></span><br><span class="line"><span class="tag">          &gt;</span>提交<span class="tag">&lt;/<span class="name">j-button</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">j-button</span> @<span class="attr">click</span>=<span class="string">"backUpload"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">j-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">j-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">j-form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">"@/store/actions"</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> apiUrl <span class="keyword">from</span> <span class="string">"@/constants/apiUrl"</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">"vuex"</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        uploadFiles: <span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">        uploadName: <span class="string">"上传文档"</span>,</span></span><br><span class="line">        fileList: [],</span><br><span class="line"><span class="actionscript">        onPicDrag: <span class="literal">false</span>,</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      ...mapState(&#123;</span><br><span class="line"><span class="javascript">        baseId: <span class="function">(<span class="params">state</span>) =&gt;</span> state.route.params.baseId,</span></span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.uploadFiles = apiUrl.uploadFiles;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 监听拖拽leave事件</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.addEventListener(<span class="string">"dragleave"</span>, <span class="keyword">this</span>.handlePicDragLeave);</span></span><br><span class="line">    &#125;,</span><br><span class="line">    destroyed() &#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 组件销毁前移除该事件</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.removeEventListener(<span class="string">"dragleave"</span>, <span class="keyword">this</span>.handlePicDragLeave);</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleSuccess(res) &#123;</span><br><span class="line">        if (!res.success) &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$Message.error(&#123;</span></span><br><span class="line">            content: res.message,</span><br><span class="line">          &#125;);</span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$refs.upload.clearFiles();</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.fileList = [res.data.name];</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// this.$Message.success(&#123;</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     content: '上传成功'</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// &#125;)</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      beforeUpload(file, fileList) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (<span class="keyword">this</span>.uploadName === <span class="string">"上传文档"</span>) &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.uploadName = <span class="string">"重新上传"</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        if (fileList.length) &#123;</span><br><span class="line">          fileList.shift();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(file);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">this</span>.beforeAvatarUpload(file);</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      <span class="comment">// 对上传文件大小做出限制</span></span></span><br><span class="line">      beforeAvatarUpload(file) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> isLt500K = file.size &lt;= <span class="number">512000</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span></span><br><span class="line">        if (!isLt500K) &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$Message.warning(&#123;</span></span><br><span class="line"><span class="actionscript">            content: <span class="string">"上传文件大小不能超过500k"</span>,</span></span><br><span class="line">            duration: 2000,</span><br><span class="line"><span class="actionscript">            closable: <span class="literal">true</span>,</span></span><br><span class="line">          &#125;);</span><br><span class="line"><span class="actionscript">          <span class="comment">// 清空文件</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// this.$refs['uploader'].clearFiles();</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> isLt500K;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      handleRemove() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.fileList = [];</span></span><br><span class="line">      &#125;,</span><br><span class="line">      getFaqModel() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.open(<span class="string">`<span class="subst">$&#123;apiUrl.download&#125;</span>?type=wordlibrary`</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      <span class="comment">// 提交文件 - upload</span></span></span><br><span class="line">      submitUpload() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (!<span class="keyword">this</span>.fileList) &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$Message.error(&#123;</span></span><br><span class="line"><span class="actionscript">            content: <span class="string">"上传文件为空文件"</span>,</span></span><br><span class="line">          &#125;);</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        actions</span><br><span class="line">          .wordlibraryUpload(&#123;</span><br><span class="line"><span class="actionscript">            baseId: <span class="keyword">this</span>.baseId,</span></span><br><span class="line"><span class="actionscript">            files: <span class="keyword">this</span>.fileList,</span></span><br><span class="line">          &#125;)</span><br><span class="line"><span class="javascript">          .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line">            if (res.success) &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.$Message.success(<span class="string">"上传成功"</span>);</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.$router.push(&#123;</span></span><br><span class="line"><span class="actionscript">                name: <span class="string">"faqThesaurus"</span>,</span></span><br><span class="line">              &#125;);</span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.fileList = [];</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.$refs.upload.clearFiles();</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      backUpload() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$router.go(<span class="number">-1</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">      changeRadio(val) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.form.type = val;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      handlePicDragEnter(e) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.onPicDrag = <span class="literal">true</span>;</span></span><br><span class="line">        e.preventDefault();</span><br><span class="line">        e.stopPropagation();</span><br><span class="line">      &#125;,</span><br><span class="line">      handlePicDragOver(e) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.onPicDrag = <span class="literal">true</span>;</span></span><br><span class="line">        e.preventDefault();</span><br><span class="line">        e.stopPropagation();</span><br><span class="line">      &#125;,</span><br><span class="line">      handlePicDragLeave(e) &#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        e.stopPropagation();</span><br><span class="line"><span class="handlebars"><span class="xml">        if (+e.offsetX <span class="tag">&lt;<span class="name">=</span> <span class="attr">0</span> &amp;&amp; +<span class="attr">e.offsetY</span> &lt;= <span class="string">0)</span> &#123;</span></span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.onPicDrag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.onPicDrag = <span class="literal">true</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      handlePicDropInvalid(e) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.onPicDrag = <span class="literal">false</span>;</span></span><br><span class="line">        e.preventDefault();</span><br><span class="line">        e.stopPropagation();</span><br><span class="line">      &#125;,</span><br><span class="line">      handlePicSubmit(e) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.onPicDrag = <span class="literal">false</span>;</span></span><br><span class="line">        e.preventDefault();</span><br><span class="line">        e.stopPropagation();</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> files = e.dataTransfer.files;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(files);</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> len = files.length; <span class="comment">//获取文件个数</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 只允许上传一个文件</span></span></span><br><span class="line">        if (len &gt; 1) &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$Message.error(<span class="string">"每次只能上传一个文件"</span>);</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> file = files[<span class="number">0</span>];</span></span><br><span class="line">        if (!file) &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$Message.warning(&#123;</span></span><br><span class="line"><span class="actionscript">            content: <span class="string">"请上传文件！"</span>,</span></span><br><span class="line">          &#125;);</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> type = file.type;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> xlsx = file.name.indexOf(<span class="string">".xlsx"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// if (!type || xlsx &lt;= -1) &#123;</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     this.$Message.error("请上传Excel文件！");</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     return;</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$refs.upload.clearFiles();</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$refs.upload.uploadFile(file);</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.faqManage-upload</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.dragbox-wrap</span> &#123;</span></span><br><span class="line">      position: fixed;</span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.5</span>);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">opacity</span>: 0<span class="selector-class">.8</span>;</span></span><br><span class="line">      z-index: 99;</span><br><span class="line">      left: 0;</span><br><span class="line">      top: 0;</span><br><span class="line">      bottom: 0;</span><br><span class="line">      right: 0;</span><br><span class="line">      user-select: none;</span><br><span class="line"><span class="css">      <span class="selector-class">.jimu-icon</span>,</span></span><br><span class="line">      p &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        bottom: 30%;</span><br><span class="line">        left: 50%;</span><br><span class="line">        transform: translate(-50%, -50%);</span><br><span class="line">      &#125;</span><br><span class="line">      p &#123;</span><br><span class="line">        font-size: 24px;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.jimu-upload</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.jimu-button-large</span> &#123;</span></span><br><span class="line">        line-height: 0px;</span><br><span class="line">        padding: 20px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ddd</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.dataTime</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.jimu-radio-group</span> &#123;</span></span><br><span class="line">        display: inline-block;</span><br><span class="line">        width: 45%;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.jimu-datepicker</span> &#123;</span></span><br><span class="line">        width: 54%;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="主要核心在需要拖进上传的页面加三个-touch-函数">主要核心在需要拖进上传的页面加三个 touch 函数</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@dragenter="handlePicDragEnter" @dragover="handlePicDragOver"</span><br><span class="line">@drop="handlePicDropInvalid"</span><br></pre></td></tr></table></figure>
<h3 id="然后在遮罩层松开鼠标触发上传">然后在遮罩层松开鼠标触发上传</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@drop="handlePicSubmit" 在drop函数中可以获得所拖拽的文件内容，进行操作即可</span><br></pre></td></tr></table></figure>
<h4 id="总结，在非-mvvm-框架下同理，同样使用-html5-的拖放-API-即可实现">总结，在非 mvvm 框架下同理，同样使用 html5 的拖放 API 即可实现</h4>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>拖拽上传</tag>
        <tag>upload</tag>
      </tags>
  </entry>
  <entry>
    <title>修改饿了么ui的table表格样式</title>
    <url>/2019/07/10/2019-07-10-%E4%BF%AE%E6%94%B9%E9%A5%BF%E4%BA%86%E4%B9%88ui%E7%9A%84table%E8%A1%A8%E6%A0%BC%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<p>有需求修改表格的颜色，但是发现通过 css 的权重关系无法修改成功<br>
文档中有给修改方法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:data</span>=<span class="string">"tableData"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:row-style</span>=<span class="string">"tableRowStyle"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:header-cell-style</span>=<span class="string">"tableHeaderColor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">      <span class="attr">property</span>=<span class="string">"id"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"序号"</span>"&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">      <span class="attr">property</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"名称"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">      <span class="attr">property</span>=<span class="string">"info"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"详情"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'table'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      tableData: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="string">'1'</span>,</span><br><span class="line">          name: <span class="string">'1'</span>,</span><br><span class="line">          info: <span class="string">'1'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="string">'2'</span>,</span><br><span class="line">          name: <span class="string">'2'</span>,</span><br><span class="line">          info: <span class="string">'2'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="string">'3'</span>,</span><br><span class="line">          name: <span class="string">'3'</span>,</span><br><span class="line">          name: <span class="string">'3'</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;&#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 修改table tr行的背景色</span></span><br><span class="line">    tableRowStyle(&#123; row, rowIndex &#125;) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'background-color: #2B2C3B;color: #fff;'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 修改table header的背景色</span></span><br><span class="line">    tableHeaderColor(&#123; row, column, rowIndex, columnIndex &#125;) &#123;</span><br><span class="line">      <span class="keyword">if</span> (rowIndex === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'background-color: #0E6AD7;color: #fff;font-weight: 500;'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://www.cc12210.xyz/usr/uploads/2019/07/4157981494.png" alt="效果图"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主要的是在el-table标签中配置的</span><br><span class="line">:row-style&#x3D;&quot;tableRowStyle&quot;</span><br><span class="line">:header-cell-style&#x3D;&quot;tableHeaderColor&quot;</span><br><span class="line">然后在methods中配置对应方法即可</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>ui</tag>
        <tag>e&#39;le&#39;m</tag>
        <tag>element</tag>
        <tag>table</tag>
        <tag>表格</tag>
      </tags>
  </entry>
  <entry>
    <title>壁纸</title>
    <url>/2019/08/14/2019-08-14-%E5%A3%81%E7%BA%B8/</url>
    <content><![CDATA[<p><img src="http://www.cc12210.xyz/usr/uploads/2019/08/1549291055.jpeg" alt="31D1CEB9-7358-47D6-BCDF-5AA63A087C9D.jpeg"></p>
]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
  </entry>
  <entry>
    <title>axios取消多次重复的请求，防止重复发送</title>
    <url>/2019/07/12/2019-07-12-axios%E5%8F%96%E6%B6%88%E5%A4%9A%E6%AC%A1%E9%87%8D%E5%A4%8D%E7%9A%84%E8%AF%B7%E6%B1%82%EF%BC%8C%E9%98%B2%E6%AD%A2%E9%87%8D%E5%A4%8D%E5%8F%91%E9%80%81/</url>
    <content><![CDATA[<h4 id="axios-取消多次重复的请求，防止重复发送">axios 取消多次重复的请求，防止重复发送</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> pending = []; <span class="comment">//声明一个数组用于存储每个ajax请求的取消函数和ajax标识</span></span><br><span class="line"><span class="keyword">let</span> cancelToken = axios.CancelToken;</span><br><span class="line"><span class="keyword">let</span> removePending = <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> p <span class="keyword">in</span> pending)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pending[p].u === config.url + <span class="string">'&amp;'</span> + config.method) &#123; <span class="comment">//当当前请求在数组中存在时执行函数体</span></span><br><span class="line">            pending[p].f(); <span class="comment">//执行取消操作</span></span><br><span class="line">            pending.splice(p, <span class="number">1</span>); <span class="comment">//把这条记录从数组中移除</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">     removePending(config); <span class="comment">//在一个ajax发送前执行一下取消操作</span></span><br><span class="line">     config.cancelToken = <span class="keyword">new</span> cancelToken(<span class="function">(<span class="params">c</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 这里的ajax标识我是用请求地址&amp;请求方式拼接的字符串，当然你可以选择其他的一些方式</span></span><br><span class="line">        pending.push(&#123; <span class="attr">u</span>: config.url + <span class="string">'&amp;'</span> + config.method, <span class="attr">f</span>: c &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">     <span class="keyword">return</span> config;</span><br><span class="line">   &#125;，error =&gt; &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">      removePending(response.config);  <span class="comment">//在一个ajax响应后再执行一下取消操作，把已经完成的请求从pending中移除</span></span><br><span class="line">      <span class="keyword">return</span> response;</span><br><span class="line">   &#125;，error =&gt;&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">data</span>: &#123; &#125; &#125;; 返回一个空对象，主要是防止控制台报错</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>axios</tag>
        <tag>取消</tag>
        <tag>请求</tag>
      </tags>
  </entry>
  <entry>
    <title>vue预览pdf，vue-pdf的简单使用</title>
    <url>/2019/07/16/2019-07-16-vue%E9%A2%84%E8%A7%88pdf%EF%BC%8Cvue-pdf%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save vue-pdf</span><br></pre></td></tr></table></figure>
<h4 id="属性">属性</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">:src 路径地址 相对绝对地址，pdf流文件都可以</span><br><span class="line">:page 需要展示pdf的第几页；一个pdf组件会显示pdf的一页，默认<span class="number">1</span></span><br><span class="line">:rotate 旋转角度  必须是<span class="number">90</span>°的倍数才有效，默认<span class="number">0</span></span><br></pre></td></tr></table></figure>
<h4 id="event-事件">event 事件</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Events回调</span><br><span class="line">@password (updatePassword,reason)</span><br><span class="line">updatePassword:函数提示需要输入的密码；</span><br><span class="line">reason:提示（<span class="string">'NEED_PASSWORD'</span> or <span class="string">'INCORRECT_PASSWORD'</span>）；</span><br><span class="line">----------------------------</span><br><span class="line"> @progress (<span class="built_in">Number</span>)</span><br><span class="line">pdf的页面的加载进度，Rang[<span class="number">0</span>,<span class="number">1</span>]；</span><br><span class="line">----------------------------</span><br><span class="line"> @page-loaded (<span class="built_in">Number</span>)</span><br><span class="line">pdf某个页面加载成功回调，number为页面索引值；</span><br><span class="line">----------------------------</span><br><span class="line"> @num-pages (<span class="built_in">Number</span>)</span><br><span class="line">监听pdf加载，获取pdf的页数；</span><br><span class="line">----------------------------</span><br><span class="line"> @error (<span class="built_in">Object</span>)</span><br><span class="line">pdf加载失败回调；</span><br><span class="line">----------------------------</span><br><span class="line"> @link-clicked (<span class="built_in">Number</span>)</span><br><span class="line">单机内部链接时触发；这个是pdf内部有目录之类的链接，通过此函数可以监测到pdf内部的点击</span><br></pre></td></tr></table></figure>
<h4 id="单个-pdf-的显示">单个 pdf 的显示</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pdf"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pdf</span> <span class="attr">ref</span>=<span class="string">"pdf"</span> <span class="attr">:src</span>=<span class="string">"pdfUrl"</span>&gt;</span> <span class="tag">&lt;/<span class="name">pdf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> pdf <span class="keyword">from</span> <span class="string">'vue-pdf'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'Pdf'</span>,</span></span><br><span class="line">    components:&#123;</span><br><span class="line">        pdf</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            pdfUrl:<span class="string">"需要放置的src地址"</span>,</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="这样会发现只能放一页的-pdf，而且-pdf-的大小也不是自己想要的">这样会发现只能放一页的 pdf，而且 pdf 的大小也不是自己想要的</h3>
<p>####可以在 pdf 组件的内部写 style 样式，如果需要更复杂的样式，可以将内部的 style 样式设置为宽高 100%，然后调整外部的 div</p>
<h3 id="多页面的-pdf-显示">多页面的 pdf 显示</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">templete</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pdf-div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">"(i, index) in numPages"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">ref</span>=<span class="string">"pdfCanvas"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:style</span>=<span class="string">"`display: inline-block; width: $&#123;width&#125;%;margin:20px 1% 0 0;`"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">"i"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pdf</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:src</span>=<span class="string">"src"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:page</span>=<span class="string">"i"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">link-clicked</span>=<span class="string">"getLinkIndex"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"display: inline-block; width: 100%;"</span></span></span><br><span class="line"><span class="tag">      &gt;</span><span class="tag">&lt;/<span class="name">pdf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">templete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> pdf <span class="keyword">from</span> <span class="string">'vue-pdf'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      pdf</span><br><span class="line">    &#125;,</span><br><span class="line">     data() &#123;</span><br><span class="line"><span class="actionscript">       src: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">       numPages: <span class="literal">null</span>,</span></span><br><span class="line">       width: 48</span><br><span class="line">     &#125;,</span><br><span class="line">     mounted() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.src = pdf.createLoadingTask(<span class="string">'放置图片地址'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.src.then(<span class="function"><span class="params">pdf</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.numPages = pdf.numPages;</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="上述多页面例子做了一个点击放大缩小的需求，通过控制-width-变量来实现-div-的宽度变化，就可以实现，还有一个需求是点击对应页面需要放大，并且滚动到对应页面，思路也比较简单，就是点击之后获取索引，然后在-nextTick-获取变大之后-div-的高度，然后再滚动相应个数量-div-的高度即可">上述多页面例子做了一个点击放大缩小的需求，通过控制 width 变量来实现 div 的宽度变化，就可以实现，还有一个需求是点击对应页面需要放大，并且滚动到对应页面，思路也比较简单，就是点击之后获取索引，然后在 nextTick 获取变大之后 div 的高度，然后再滚动相应个数量 div 的高度即可</h4>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>pdf</tag>
        <tag>vue-pdf</tag>
        <tag>预览pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>NVM node版本管理</title>
    <url>/2019/08/19/2019-08-19-NVM_node%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h4 id="对于维护多个版本的-node-将会是一件非常麻烦的事情，nvm-可以方便的在同一台设备上进行多个-node-版本之间切换">对于维护多个版本的 node 将会是一件非常麻烦的事情，nvm 可以方便的在同一台设备上进行多个 node 版本之间切换</h4>
<h3 id="如果电脑里已经安装了-node-环境可以进行删除，通过-NVM-来安装-node-指定版本">如果电脑里已经安装了 node 环境可以进行删除，通过 NVM 来安装 node 指定版本</h3>
<blockquote>
<p>安装包下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases%EF%BC%8C%E9%80%89%E6%8B%A9nvm-setup.zip" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows/releases，选择nvm-setup.zip</a><br>
安装完成之后打开 cmd 输入 nvm -v 如果出现 NVM 则表示安装成功</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">安装的命令</span><br><span class="line">nvm install &lt;version&gt; 命令下载需要的版本</span><br><span class="line">nvm use &lt;version&gt; 命令开始使用特定版本,版本切换也是使用该命令</span><br><span class="line">nvm uninstall &lt;version&gt; 卸载指定版本</span><br></pre></td></tr></table></figure>
<h4 id="其他不常用的就不写了">其他不常用的就不写了</h4>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>NVM</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌浏览器调试手机app内嵌页面</title>
    <url>/2019/09/11/2019-09-11-%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95%E6%89%8B%E6%9C%BAapp%E5%86%85%E5%B5%8C%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<blockquote>
<p>最近因为公司入职及新项目熟悉项目结构，项目上线测试之类的一堆事情比较忙，有一段时间没写过博客了</p>
</blockquote>
<h3 id="如何使用电脑调试手机-app-中的内嵌页面">如何使用电脑调试手机 app 中的内嵌页面</h3>
<p>现在很多页面都是使用 webview 将页面内嵌到手机 app 中的。</p>
<h4 id="优点的话我个人分析是觉得方便内部功能升级">优点的话我个人分析是觉得方便内部功能升级</h4>
<p>1.比如说一个页面需要增加新功能或者切换样式效果。如果是纯原生开发完之后可能需要用户更新 app 2.对于多种机型也可以通过客户端获取来进行对应的适配 3.这种混合开发的方式客户端可以对 h5 进行缓存处理，提升用户感知</p>
<p>闲话不多说，如果需要调试可以在谷歌浏览器输入以下</p>
<blockquote>
<p>chrome://inspect/#devices<br>
手机连接电脑 打开开发者模式及 usb 调试，并且还有一个最重要的 选择调试的应用<br>
这样手机端进入 app 页面之后谷歌浏览器就能抓取到页面，如果需要查看请求可能需要刷新一下</p>
</blockquote>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>调试</tag>
        <tag>webvie</tag>
        <tag>手机客户端</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE组件调试工具-storybook</title>
    <url>/2019/09/17/2019-09-17-VUE%E7%BB%84%E4%BB%B6%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7-storybook/</url>
    <content><![CDATA[<blockquote>
<p>公司大佬推荐学习的一个 vue 组件调试的库，该教程主要来源官网教程，再结合自己的思路细化了一下</p>
</blockquote>
<h4 id="vue-组件开发">vue 组件开发</h4>
<h5 id="之前在项目中开发组件都是边调试边开发，需要什么-props-就新增什么，写法比较凌乱">之前在项目中开发组件都是边调试边开发，需要什么 props 就新增什么，写法比较凌乱</h5>
<h3 id="1-闲话不多说，开始教程">1.闲话不多说，开始教程</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">首先在项目中安装对应组件（我用的是vue脚手架开发）</span><br><span class="line">npm install @storybook/vue --save-dev</span><br></pre></td></tr></table></figure>
<h4 id="2-该组件依赖以下组件">2.该组件依赖以下组件</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">这边我的提示是缺少babel-preset-vue，缺什么就安装，或者一次全部覆盖安装也可以</span><br><span class="line">npm install vue --save</span><br><span class="line">npm install vue-loader vue-template-compiler @babel/core babel-loader babel-preset-vue --save-dev</span><br></pre></td></tr></table></figure>
<h4 id="3-添加-npm-启动脚本">3.添加 npm 启动脚本</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">在package.json里面新增一个启动项</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"storybook"</span>: <span class="string">"start-storybook"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="4-创建配置文件">4.创建配置文件</h4>
<p>你需要在与 src 同级的目录下新建一个<code>.storybook</code>文件夹，有一个需要注意的点，直接新建该文件夹是无法成功的，会提示你需要键入文件名 ###解决办法是创建文件夹名为<code>.storybook.</code>，在后面多加一个点，然后直接回车即可<br>
<img src="http://www.cc12210.xyz/usr/uploads/2019/09/2196704259.png" alt="new_file.png"><br>
<img src="http://www.cc12210.xyz/usr/uploads/2019/09/204347884.png" alt="error.png"></p>
<h4 id="在该文件夹内再创建一个-config-js，写入以下内容，注意看组件-Mybutton-引入的路径，所以我们需要在对应路径写入我们的组件，该路径自行定义，主要是-code-loadStories-code-函数内-require-的路径">在该文件夹内再创建一个 config.js，写入以下内容，注意看组件 Mybutton 引入的路径，所以我们需要在对应路径写入我们的组件，该路径自行定义，主要是<code>loadStories</code>函数内 require 的路径</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configure &#125; <span class="keyword">from</span> <span class="string">"@storybook/vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">"vuex"</span>;</span><br><span class="line"><span class="keyword">import</span> Mybutton <span class="keyword">from</span> <span class="string">"../src/stories/Button.vue"</span>;</span><br><span class="line">Vue.use(Vuex);</span><br><span class="line">Vue.component(<span class="string">"my-button"</span>, Mybutton);</span><br><span class="line"><span class="comment">// 主要是这个路径，需要去加载你写的组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadStories</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">"../src/stories"</span>);</span><br><span class="line">&#125;</span><br><span class="line">configure(loadStories, <span class="built_in">module</span>);</span><br></pre></td></tr></table></figure>
<h4 id="Button-vue">Button.vue</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">这里面我只做一个简单接受slot</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my-button"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="写入你的-story">写入你的 story</h4>
<h5 id="code-…-stories-index-js-code-在文件夹内写入了一个-index-js"><code>…/stories/index.js</code>,在文件夹内写入了一个 index.js</h5>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">上面这个loadStories引入的index.js;</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; storiesOf &#125; <span class="keyword">from</span> <span class="string">"@storybook/vue"</span>;</span><br><span class="line"><span class="keyword">import</span> MyButton <span class="keyword">from</span> <span class="string">"./Button.vue"</span>;</span><br><span class="line"></span><br><span class="line">storiesOf(<span class="string">"Button"</span>, <span class="built_in">module</span>)</span><br><span class="line">  .add(</span><br><span class="line">    <span class="string">"with text"</span>,</span><br><span class="line">    () =&gt; <span class="string">'&lt;my-button&gt;&lt;span slot="text"&gt;插槽内容&lt;/span&gt;&lt;/my-button&gt;'</span></span><br><span class="line">  )</span><br><span class="line">  .add(</span><br><span class="line">    <span class="string">"with emoji"</span>,</span><br><span class="line">    () =&gt; <span class="string">'&lt;my-button&gt;&lt;span slot="text"&gt;???? ???? ???? ????&lt;/span&gt;&lt;/my-button&gt;'</span></span><br><span class="line">  )</span><br><span class="line">  .add(<span class="string">"as a component"</span>, () =&gt; (&#123;</span><br><span class="line">    components: &#123; MyButton &#125;,</span><br><span class="line">    template: <span class="string">"&lt;my-button&gt;会被slot覆盖&lt;/my-button&gt;"</span>,</span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure>
<h4 id="从上面可以看出来有两种组件的-add-方式，下面那种加-components-应该是可以同时使用多种组件组合进行测试">从上面可以看出来有两种组件的 add 方式，下面那种加 components 应该是可以同时使用多种组件组合进行测试</h4>
<blockquote>
<p>最后附上实际效果<br>
<img src="http://www.cc12210.xyz/usr/uploads/2019/09/1647383758.png" alt="效果图.png"></p>
</blockquote>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>组件</tag>
        <tag>storybook</tag>
        <tag>组件调试</tag>
      </tags>
  </entry>
  <entry>
    <title>js函数规范问题</title>
    <url>/2019/09/19/2019-09-19-js%E5%87%BD%E6%95%B0%E8%A7%84%E8%8C%83%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>老生常谈的一个话题，代码规范</p>
</blockquote>
<p>之前项目上用的比较多的规范是百度的规范，各种命名、缩进、还有一些关于三等防止隐士转换的问题</p>
<h4 id="还有一些需要注意的细节">还有一些需要注意的细节</h4>
<h5 id="一个函数中如果有完全不一样的操作进行隔行处理，如何定义完全不一样呢。比如赋值操作与条件语句，亦或是不同的条件语句-code-for-code-与-code-switch-code-之类的">一个函数中如果有完全不一样的操作进行隔行处理，如何定义完全不一样呢。比如赋值操作与条件语句，亦或是不同的条件语句<code>for</code>与<code>switch</code>之类的</h5>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeElement</span>(<span class="params">element, options</span>) </span>&#123;</span><br><span class="line">  element.parent.removeChild(element);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (options.removeEventListeners) &#123;</span><br><span class="line">    element.clearEventListeners();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="这样在项目中的代码如果一个函数操作太多也不容易出现臃肿的感觉，看的眼花缭乱的">这样在项目中的代码如果一个函数操作太多也不容易出现臃肿的感觉，看的眼花缭乱的</h5>
<p>最近了解的新的东西不是很多，一直在看<code>lodash</code>这个库，他拥有很多辅助函数来操作数组对象，在项目中用上它可以让代码量少很多。也避免一堆 for 循环冗在代码块中</p>
<h4 id="lodash-中文文档地址：-a-target-blank-href-https-www-lodashjs-com-docs-latest-lodash-文档，点我！-a">lodash 中文文档地址：<a target="blank" href="https://www.lodashjs.com/docs/latest">lodash 文档，点我！</a></h4>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>随笔</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>vue点击复制功能</title>
    <url>/2019/09/26/2019-09-26-vue%E7%82%B9%E5%87%BB%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h4 id="大家应该都用过-github-中的点击复制-git-仓库地址的功能">大家应该都用过 github 中的点击复制 git 仓库地址的功能</h4>
<p>在非 vue 项目中使用的是<code>clipboard.js</code>，vue 项目中使用<code>vue-clipboard2</code>这个插件即可 ####首先安装一下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install --save vue-clipboard2</span><br></pre></td></tr></table></figure>
<h4 id="然后就是在-vue-中引用这个插件了">然后就是在 vue 中引用这个插件了</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> VueClipboard <span class="keyword">from</span> <span class="string">"vue-clipboard2"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueClipboard);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="非脚手架用户可以引入打包好的-min-js">非脚手架用户可以引入打包好的 min.js</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入的顺序必须在vue.js之后 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/vue-clipboard.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="可以看到点击复制绑定的值为-message，然后点击时即可复制">可以看到点击复制绑定的值为 message，然后点击时即可复制</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"t"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"button"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-clipboard:copy</span>=<span class="string">"message"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-clipboard:success</span>=<span class="string">"onCopy"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-clipboard:error</span>=<span class="string">"onError"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      点击复制</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="actionscript">    template: <span class="string">"#t"</span>,</span></span><br><span class="line"><span class="actionscript">    data: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        message: <span class="string">"Copy These Text"</span>,</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="actionscript">      onCopy: <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">"You just copied: "</span> + e.text);</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      onError: <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">"Failed to copy texts"</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个插件的大小大概为 15kb，所以在项目中引入也是没有问题的，基于 MIT 协议是开源使用的</p>
</blockquote>
<h4 id="下次专门写一篇博客来介绍一下这些开源协议之间的区别。在项目中插件随便使用非开源插件是会被发律师函的，就和现在闹得沸沸腾腾的文字专利一样。因为一些文字个人使用是没有问题的，但是如果需要作为商业用途是需要支付版权费用的">下次专门写一篇博客来介绍一下这些开源协议之间的区别。在项目中插件随便使用非开源插件是会被发律师函的，就和现在闹得沸沸腾腾的文字专利一样。因为一些文字个人使用是没有问题的，但是如果需要作为商业用途是需要支付版权费用的</h4>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>点击复制</tag>
        <tag>clipboard</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt使用感受</title>
    <url>/2019/11/01/2019-11-01-Nuxt%E4%BD%BF%E7%94%A8%E6%84%9F%E5%8F%97/</url>
    <content><![CDATA[<blockquote>
<p>最近接触的项目框架由 VUE 脚手架变成了 Nuxt,之前看过官网文档有些地方不甚理解。果然还是实践出真知</p>
</blockquote>
<h4 id="nuxt-config-js">nuxt.config.js</h4>
<p>// 这个配置文件为项目的配置项</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">head标签</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  head: &#123;</span><br><span class="line">    titleTemplate: <span class="string">'%s - Nuxt.js'</span>,</span><br><span class="line">    meta: [</span><br><span class="line">      &#123; <span class="attr">charset</span>: <span class="string">'utf-8'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'viewport'</span>, <span class="attr">content</span>: <span class="string">'width=device-width, initial-scale=1'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">hid</span>: <span class="string">'description'</span>, <span class="attr">name</span>: <span class="string">'description'</span>, <span class="attr">content</span>: <span class="string">'Meta description'</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    link: [</span><br><span class="line">       &#123;</span><br><span class="line">        rel: <span class="string">''</span>,</span><br><span class="line">        type: <span class="string">''</span>,</span><br><span class="line">        href: <span class="string">''</span>,</span><br><span class="line">        &#125;</span><br><span class="line">     ],</span><br><span class="line">     script: [</span><br><span class="line">        &#123;</span><br><span class="line">         src: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">meta写入meta标签，link引入css，script可以引入一些需要提前注入的js文件</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// plugins插件的配置，该配置文件的配置会读取plugins下的文件夹下对应的js文件，读取的名字取决于你在plugins引入的文件名</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [<span class="string">"~plugins/demo"</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="demo-js">demo.js</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">"element-ui"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"element-ui/lib/theme-chalk/index.css"</span>;</span><br><span class="line">Vue.use(ElementUI);</span><br></pre></td></tr></table></figure>
<p>这样你本地就能使用到从 npm 下载下来的插件了，其他框架参考对应文档引入即可</p>
<h4 id="Window-或-Document-对象未定义？">Window 或 Document 对象未定义？</h4>
<p>这是因为一些只兼容客户端的脚本被打包进了服务端的执行脚本中去。 对于只适合在客户端运行的脚本，需要通过使用 process.client 变量来判断导入。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">举个例子， 在你的 .vue 文件中：</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.client) &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'external_library'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="生命周期一些需要注意的点">生命周期一些需要注意的点</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">需要注意的是，在任何 Vue 组件的生命周期内， 只有 beforeCreate 和 created 这两个方法会在 客户端和服务端被调用。其他生命周期函数仅在客户端被调用。</span><br></pre></td></tr></table></figure>
<h4 id="静态资源文件的引入方式">静态资源文件的引入方式</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">如果需要引入<span class="keyword">static</span>中的文件》》》》/<span class="keyword">static</span>/demoStatic.js 》》》》 等价于/demoStatic.js/</span><br><span class="line">assets文件下的文件引入方式 》》》》 &lt;img src=<span class="string">"~/assets/my-image-2.png"</span>/&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引用 static 目录下的图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/my-image.png"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/my-image.png"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引用 assets 目录下经过 webpack 构建处理后的图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"~/assets/my-image-2.png"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>有些情况下 window 和 document 还是不可使用，这个还需要再钻研一下</p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>nuxt</tag>
        <tag>服务端渲染</tag>
      </tags>
  </entry>
  <entry>
    <title>whistle代理请求，手机调试本地代码</title>
    <url>/2019/11/07/2019-11-07-whistle%E4%BB%A3%E7%90%86%E8%AF%B7%E6%B1%82%EF%BC%8C%E6%89%8B%E6%9C%BA%E8%B0%83%E8%AF%95%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<blockquote>
<p>开发移动端的时候在电脑上看到的实际效果并不等同于真机效果，这时候可以使用 whistle 让手机运行本地代码的效果</p>
</blockquote>
<h4 id="whistle">whistle</h4>
<blockquote>
<p>安装 Node =&gt; 安装 whistle =&gt; 启动 whistle =&gt; 配置代理。</p>
</blockquote>
<h4 id="1-安装-whistle">1.安装 whistle</h4>
<h5 id="需要注意的是-node-的版本尽量是最新的，防止出现一些意料之外的问题">需要注意的是 node 的版本尽量是最新的，防止出现一些意料之外的问题</h5>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">全局安装</span><br><span class="line">npm install -g whistle</span><br><span class="line">或者 指定淘宝源安装，国内服务器速度会快很多</span><br><span class="line">npm install whistle -g --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<h4 id="whistle-的常用指令">whistle 的常用指令</h4>
<blockquote>
<p>最新版本的 whistle 支持三种等价的命令<code>whistle</code>、<code>w2</code>、<code>wproxy</code> ##### 启动命令</p>
</blockquote>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">w2 <span class="built_in">start</span></span><br><span class="line">指定端口启动</span><br><span class="line">w2 <span class="built_in">start</span> -p <span class="number">8080</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="重启命令">重启命令</h5>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">w2 restart</span><br></pre></td></tr></table></figure>
<h5 id="停止-whistle">停止 whistle</h5>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">w2 stop</span><br></pre></td></tr></table></figure>
<h5 id="调试模式启动-whistle-主要用于查看-whistle-的异常及插件开发">调试模式启动 whistle(主要用于查看 whistle 的异常及插件开发)</h5>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">这个没怎么用过不太清楚，以后学会了再来补充</span><br><span class="line">// TODO</span><br><span class="line">w2 run</span><br></pre></td></tr></table></figure>
<h4 id="实例">实例</h4>
<p><img src="http://www.cc12210.xyz/usr/uploads/2019/11/1514924162.png" alt="whistle.png"><br>
<img src="http://www.cc12210.xyz/usr/uploads/2019/11/2459106566.png" alt="配置代理.png"> ####手机连接 wifi 配置 wifi 代理为当前 whistle 的启动地址，端口也一致</p>
<p>whistle 配置第一个为你想配置的网址，后面为对应的地址，比如本地开发的项目地址</p>
<h4 id="然后当你在配置好代理的手机上输入-baidu-com-就会帮你代理到你的项目地址，后面的路径参数一样">然后当你在配置好代理的手机上输入 <a href="http://baidu.com" target="_blank" rel="noopener">baidu.com</a> 就会帮你代理到你的项目地址，后面的路径参数一样</h4>
<h4 id="如果-baidu-com-不生效可以随便改点-baidutest-之类的都行，同时访问-whistle-的启动页面，就是启动之后给的网址的第一项可以进行抓包，具体自己动手看一下就清楚了，简单明了">如果 <a href="http://baidu.com" target="_blank" rel="noopener">baidu.com</a> 不生效可以随便改点 baidutest 之类的都行，同时访问 whistle 的启动页面，就是启动之后给的网址的第一项可以进行抓包，具体自己动手看一下就清楚了，简单明了</h4>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>whistle</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt打包html中有大量css样式问题</title>
    <url>/2019/11/04/2019-11-04-Nuxt%E6%89%93%E5%8C%85html%E4%B8%AD%E6%9C%89%E5%A4%A7%E9%87%8Fcss%E6%A0%B7%E5%BC%8F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>在使用 nuxt 配合一些 ui 组件库的时候有这样一个问题。</p>
</blockquote>
<h4 id="nuxt-elementUI">nuxt &amp;&amp; elementUI</h4>
<p>当我们全量引入 elementUI 的 css 样式，项目打包后会有许多的样式掺杂在 html 文件中，而我们页面实际的内容其实只占了一小部分</p>
<p><img src="http://www.cc12210.xyz/usr/uploads/2019/11/3949926116.png" alt="extractCSS.png"></p>
<h4 id="在配置项中的-build-选项配置该项为-true-即可">在配置项中的 build 选项配置该项为 true 即可</h4>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>nuxt</tag>
        <tag>打包</tag>
        <tag>build</tag>
        <tag>样式</tag>
      </tags>
  </entry>
  <entry>
    <title>网易云的API地址</title>
    <url>/2019/12/17/2019-12-17-%E7%BD%91%E6%98%93%E4%BA%91%E7%9A%84API%E5%9C%B0%E5%9D%80/</url>
    <content><![CDATA[<p><img src="http://www.cc12210.xyz/usr/uploads/2020/06/2319822823.jpeg" alt="A0FE1C7B-7645-42D4-909E-7183AFF083EB.jpeg"><a href="http://www.cc12210.xyz/usr/uploads/2019/12/2790282870.pdf" target="_blank" rel="noopener">lodash-doc-45.pdf</a><a href="https://binaryify.github.io/NeteaseCloudMusicApi/#/?id=neteasecloudmusicapi" target="_blank" rel="noopener">https://binaryify.github.io/NeteaseCloudMusicApi/#/?id=neteasecloudmusicapi</a></p>
<p>有时间自己做一个仿网易云的应用</p>
<p><a href="https://legacy.gitbook.com/book/wizardforcel/lodash-doc-45/details" target="_blank" rel="noopener">https://legacy.gitbook.com/book/wizardforcel/lodash-doc-45/details</a></p>
<p><a href="http://www.cc12210.xyz/usr/uploads/2019/12/2790282870.pdf" target="_blank" rel="noopener">lodash 4.5 文档</a></p>
]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
      <tags>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode自动格式化</title>
    <url>/2019/11/15/2019-11-15-vscode%E8%87%AA%E5%8A%A8%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    <content><![CDATA[<h4 id="开发工具前端用的比较多的是-vscode，开发过程中可以配置一个保存即自动格式化。团队合作的时候避免风格不一致">开发工具前端用的比较多的是 vscode，开发过程中可以配置一个保存即自动格式化。团队合作的时候避免风格不一致</h4>
<blockquote>
<p>ps:我上一家公司另一个前端同事 js 语句从来不加分号，间隔四空，我跟他是相反的</p>
</blockquote>
<h4 id="以下插件是必备的">以下插件是必备的</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Prettier - Code formatter</span><br><span class="line">Eslint</span><br><span class="line">styleLint</span><br></pre></td></tr></table></figure>
<p>剩下的就是在配置项中写入自己的配置 <code>setting.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"editor.tabSize"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span>, <span class="comment">//保存时候自动格式化</span></span><br><span class="line">  <span class="attr">"editor.formatOnType"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"[vue]"</span>: &#123;</span><br><span class="line">    <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"esbenp.prettier-vscode"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"files.associations"</span>: &#123;</span><br><span class="line">    <span class="attr">"*.vue"</span>: <span class="string">"vue"</span>,</span><br><span class="line">    <span class="attr">"*.stylus"</span>: <span class="string">"stylus"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"todohighlight.include"</span>: [],</span><br><span class="line">  <span class="attr">"todohighlight.keywords"</span>: [</span><br><span class="line">    <span class="string">"DEBUG:"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"text"</span>: <span class="string">"REVIEW:"</span>,</span><br><span class="line">      <span class="attr">"color"</span>: <span class="string">"white"</span>,</span><br><span class="line">      <span class="attr">"border"</span>: <span class="string">"1px solid red"</span>,</span><br><span class="line">      <span class="attr">"padding"</span>: <span class="string">"2px"</span>,</span><br><span class="line">      <span class="attr">"borderRadius"</span>: <span class="string">"2px"</span>, <span class="comment">//<span class="doctag">NOTE:</span> using borderRadius along with `border` or you will see nothing change</span></span><br><span class="line">      <span class="attr">"backgroundColor"</span>: <span class="string">"#c9302c"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"text"</span>: <span class="string">"NOTE:"</span>,</span><br><span class="line">      <span class="attr">"color"</span>: <span class="string">"white"</span>,</span><br><span class="line">      <span class="attr">"backgroundColor"</span>: <span class="string">"#5bc0de"</span>,</span><br><span class="line">      <span class="attr">"overviewRulerColor"</span>: <span class="string">"grey"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"text"</span>: <span class="string">"HACK:"</span>,</span><br><span class="line">      <span class="attr">"color"</span>: <span class="string">"#000"</span>,</span><br><span class="line">      <span class="attr">"isWholeLine"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"text"</span>: <span class="string">"TODO:"</span>,</span><br><span class="line">      <span class="attr">"color"</span>: <span class="string">"blue"</span>,</span><br><span class="line">      <span class="attr">"backgroundColor"</span>: <span class="string">"yellow"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"search.exclude"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"editor.formatOnSave"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"eslint.autoFixOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"eslint.validate"</span>: [</span><br><span class="line">    <span class="string">"javascript"</span>,</span><br><span class="line">    <span class="string">"javascriptreact"</span>,</span><br><span class="line">    <span class="string">"html"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">      <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"vetur.validation.template"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"vetur.format.defaultFormatter.html"</span>: <span class="string">"prettyhtml"</span>,</span><br><span class="line">  <span class="attr">"vetur.format.defaultFormatterOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"prettyhtml"</span>: &#123;</span><br><span class="line">      <span class="attr">"printWidth"</span>: <span class="number">100</span> <span class="comment">// No line exceeds 100 characters</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// stylelint配置</span></span><br><span class="line">  <span class="attr">"stylelint.enable"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"stylelint.autoFix"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"editor.codeActionsOnSave"</span>: &#123;</span><br><span class="line">    <span class="attr">"source.fixAll.eslint"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="如果不知道怎么打开这个-json-文件的，左下角齿轮点击选择设置，进入设置界面后看右上角">如果不知道怎么打开这个 json 文件的，左下角齿轮点击选择设置，进入设置界面后看右上角</h4>
<p>有些具体的设置可以搜索 prettier，比如 js 语句后面是否添加分号之类的<br>
<img src="http://www.cc12210.xyz/usr/uploads/2019/11/3632297205.png" alt="setting.png"></p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title>2020/0206 小记</title>
    <url>/2020/02/06/2020-02-06-2020_0206_%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p>原因我的嘴太笨，从来不会疼人哄人</p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>2019年的小总结</title>
    <url>/2020/01/10/2020-01-10-2019%E5%B9%B4%E7%9A%84%E5%B0%8F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>又是一年过去了，碰到了诸多挫折，但也有所收获。前半年熟练了基础业务代码规范以各种插件及可视化的能力，后半年掌握了 nuxt 服务端渲染及代码的 code review 和合并的规范，以及混合开发。</p>
<p>似乎这一年把前端涉及到的技术栈都做了一遍，不敢说精通但是多少能上手。后面的计划是学习一下 python，GO，向着后端看齐，这段时间真的是很忙，隔了快两月，一直想写点东西又没有时间，自我表达能力似乎有下降的感觉，总是词不达意。也许不该给予自己这么大的压力</p>
<p>2020 了，这一年的付出让我对未来有了更多的信心，回头望去尽是苦涩，继续加油</p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>谷歌浏览器调试利器Performance</title>
    <url>/2020/05/15/2020-05-15-%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95%E5%88%A9%E5%99%A8Performance/</url>
    <content><![CDATA[<p>工具点击控制台左上角录制，刷新页面，然后页面完成加载点击 stop，通过分析页面的渲染时间得出页面加载的性能。</p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>谷歌浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>正则匹配关键字符</title>
    <url>/2020/05/21/2020-05-21-%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D%E5%85%B3%E9%94%AE%E5%AD%97%E7%AC%A6/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">string.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(key, <span class="string">"g"</span>), <span class="string">"b"</span>);</span><br></pre></td></tr></table></figure>
<p>以前做百度智能纠错的时候写的，这段时间又有个类似的需求。写个文章记录一下这个方法</p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>随笔</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>GO语言中的map</title>
    <url>/2020/07/03/2020-07-03-GO%20map/</url>
    <content><![CDATA[<h3 id="map">map</h3>
<h4 id="map-是一种无序的基于-key-value-的数据结构，Go-语言中的-map-是引用类型，必须初始化才能使用。">map 是一种无序的基于 key-value 的数据结构，Go 语言中的 map 是引用类型，必须初始化才能使用。</h4>
<p>简单理解就是对象</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个map</span></span><br><span class="line"><span class="keyword">map</span>[KeyType]ValueType</span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">make</span>(<span class="keyword">map</span>[KeyType]ValueType, [<span class="built_in">cap</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// cap为map的容量，在定以前应该给与合适的大小</span></span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	userInfo := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">		<span class="string">"姓名"</span>: <span class="string">"曹小诚"</span>,</span><br><span class="line">		<span class="string">"性别"</span>: <span class="string">"男"</span>,</span><br><span class="line">	&#125;</span><br><span class="line">  fmt.Println(userInfo)</span><br><span class="line">  <span class="comment">// map[姓名:曹小诚 性别:男]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="判断-map-中是否有某值">判断 map 中是否有某值</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">value, ok := <span class="keyword">map</span>[key]</span><br></pre></td></tr></table></figure>
<h3 id="示例">示例</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">source := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">		<span class="string">"曹诚"</span>: <span class="string">"60"</span>,</span><br><span class="line">		<span class="string">"曹小诚"</span>: <span class="string">"100"</span>,</span><br><span class="line">		<span class="string">"cc"</span>: <span class="string">"99"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  value, ok := source[<span class="string">"曹小诚"</span>]</span><br><span class="line">  <span class="keyword">if</span> ok &#123;</span><br><span class="line">    fmt.Println(value)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"没有找到想找的人~"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//只需要取key值得时候</span></span><br><span class="line">  <span class="keyword">for</span> key := <span class="keyword">range</span> source &#123;</span><br><span class="line">		fmt.Println(key)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 只取value得时候前面的key用_接收不需要的值</span></span><br><span class="line">  <span class="keyword">for</span> _, value := <span class="keyword">range</span> source &#123;</span><br><span class="line">		fmt.Println(value)</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h3 id="delete-删除">delete 删除</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">delete</span>(<span class="keyword">map</span>, key)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>GO</tag>
      </tags>
  </entry>
  <entry>
    <title>GO语言闭包</title>
    <url>/2020/06/21/2020-06-21-GO%E8%AF%AD%E8%A8%80%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<p>私以为 GO 语言闭包与 JS 很相似，记录一下 GO 的学习过程</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(base <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">func</span>(<span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span>)</span> &#123;</span><br><span class="line">	add := <span class="function"><span class="keyword">func</span><span class="params">(addSum <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		base += addSum</span><br><span class="line">		<span class="keyword">return</span> base</span><br><span class="line">	&#125;</span><br><span class="line">	sub := <span class="function"><span class="keyword">func</span><span class="params">(subSum <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		base -= subSum</span><br><span class="line">		<span class="keyword">return</span> base</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> add, sub</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	add, sub := calc(<span class="number">100</span>)</span><br><span class="line">	fmt.Println(add(<span class="number">55</span>))</span><br><span class="line">	fmt.Println(sub(<span class="number">55</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>GO</tag>
      </tags>
  </entry>
  <entry>
    <title>Electron中的通信</title>
    <url>/2021/03/19/2020-08-29-Electron%E4%B8%AD%E7%9A%84%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h3 id="Electron-中的通信">Electron 中的通信</h3>
<p>首先看一下<code>Electron</code>提供的脚手架<code>electron-quick-start</code>的文件结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">main.js; <span class="comment">// 这个文件是electron可以用来调用系统能力的地方，比如创建新的window，ipcMain的通信</span></span><br><span class="line">HTML文件; <span class="comment">// 页面展示以及css等静态资源</span></span><br><span class="line">各个页面引入的js文件可以使用es6语法, node方法可以同时使用;</span><br></pre></td></tr></table></figure>
<h3 id="示例">示例:</h3>
<h4 id="home-页面">home 页面</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">"electron"</span>);</span><br><span class="line"><span class="comment">// 页面js引入ipcRenderer，调用send方法发送事件，第二个参数是想要传递的参数，不限格式</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>  test push</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">"add"</span>).addEventListener(<span class="string">"click"</span>, () =&gt; &#123;</span><br><span class="line">  ipcRenderer.send(<span class="string">"add-click"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="main-js">main.js</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意是只有main.js中才可以引入ipcMain</span></span><br><span class="line">ipcMain.on(<span class="string">"add-click"</span>, (event, arg) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 监听到方法，执行对应的操作</span></span><br><span class="line">  <span class="comment">// 其中event就是触发该方法的实例，如 我从home页面触发点击，那么这个event就能获取到实例并且给他返回对应的参数</span></span><br><span class="line">  event.sender.send(<span class="string">"get-msg"</span>, <span class="string">"i get your message"</span>);</span><br><span class="line">  <span class="comment">// 当然，你也可以直接使用该window窗口的实例，效果是一样的直接窗口实例名.send()方法调用即可</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="electron-中的窗口类-BrowserWindow">electron 中的窗口类 BrowserWindow</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  width: <span class="number">800</span>, <span class="comment">// 新建窗体的宽度</span></span><br><span class="line">  height: <span class="number">600</span>, <span class="comment">// 新建窗体的高度，此高宽可以设置最小高度及最大值，与ccs类似</span></span><br><span class="line">  webPreferences: &#123;</span><br><span class="line">    nodeIntegration: <span class="literal">true</span>, <span class="comment">// 创建的windows实例允许使用node方法</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>调用<code>new BrowserWindow(config)</code><br>
可以创建窗口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">获得窗口的实例;</span><br><span class="line"><span class="keyword">this</span>.loadFile(fileLocation); <span class="comment">// 使用loadFile加载本地html资源,也可以通过lodaUrl来加载网络页面，我们可以通过这个功能与其他h5框架做一个混合开发</span></span><br><span class="line"><span class="keyword">this</span>.once(<span class="string">"ready-to-show"</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 该方法是窗口初次展示的时候会触发该方法</span></span><br><span class="line">  <span class="keyword">this</span>.show();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Electron</tag>
      </tags>
  </entry>
  <entry>
    <title>GO语言中的defer</title>
    <url>/2020/07/05/2020-07-05-GO%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84defer/</url>
    <content><![CDATA[<h2 id="defer-的用法">defer 的用法</h2>
<h4 id="用途：">用途：</h4>
<p>含有 defer 语句的函数，会在该函数将要返回之前，调用另一个函数。</p>
<p>defer 后面的函数在 defer 语句所在的函数执行结束的时候会被调用。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//defer后面必须是函数调用语句或方法调用语句，不能是其他语句，否则编译器会出错。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">"1"</span>)</span><br><span class="line">	fmt.Println(<span class="string">"2"</span>)</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">"3"</span>)</span><br><span class="line">	fmt.Println(<span class="string">"4"</span>)</span><br><span class="line">	fmt.Println(<span class="string">"5"</span>)</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">"6"</span>)</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">"7"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="执行结果为：">执行结果为：</h3>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>大家可能会觉得这个结果有些奇怪，<code>defer</code>的功能是当代码执行到 <code>defer</code> 的语句时会将函数复制后放入队尾执行，并且将延迟处理的语句按 <code>defer</code> 的逆序进行执行，也就是说，先被 <code>defer</code> 的语句最后被执行，最后被 <code>defer</code> 的语句，最先被执行。</p>
<h4 id="类似于栈，后进先出">类似于栈，后进先出</h4>
<h3 id="defer-规则">defer 规则</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deferPrint</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="number">0</span></span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(a)</span><br><span class="line">	a++</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行的结果是0</span></span><br></pre></td></tr></table></figure>
<p>解释：<br>
defer 在声明时 a 的值就已经确定了，可以理解为执行到 defer 时后面的执行函数就已经是<br>
<code>fmt.Println(0)</code></p>
<h3 id="错误处理机制">错误处理机制</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deferError</span><span class="params">()</span> <span class="params">(err error)</span></span>&#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> e:=<span class="built_in">recover</span>(); e != <span class="literal">nil</span>&#123;</span><br><span class="line">             err = e.(error)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"发生异常"</span>)</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 直接发生异常</span></span><br></pre></td></tr></table></figure>
<h3 id="defer-加-panic">defer 加 panic</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"1"</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"2"</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"3"</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"panic"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果：</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// panic</span></span><br></pre></td></tr></table></figure>
<h3 id="defer-panic-和-recover">defer panic 和 recover</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"1"</span>)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"2"</span>)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> info := <span class="built_in">recover</span>(); info != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"catch: "</span>, info)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">"3"</span>)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"panic"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果：</span></span><br><span class="line"><span class="comment">// panic</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>解释：<br>
panic 触发错误，defer 依次出栈调用，直到被 recover 捕获，打印捕获的信息，之后会继续 defer 出栈</p>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>GO</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/2020/04/14/2020-04-14-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote prune origin</span><br></pre></td></tr></table></figure>
<p>有一些远程删除的分支，但是在本地还有记录，通过此命令删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure>
<p>同步远程分支到本地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git cherry-pick 后面接上需要提交的commitId即可</span><br><span class="line">通过git log查看提交的commitId  可以将A分支的某个或某些commit提交到B分支</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git stash 暂存当前的更改</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git stash pop</span><br><span class="line">恢复上次更改  （A 切换到---》B  可以实现A分支的更改stash到B分支去）</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>默认分类</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下升级node版本</title>
    <url>/2021/03/30/2021-03-30-linux%E4%B8%8B%E5%8D%87%E7%BA%A7node%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<h3 id="Linux下升级node版本">Linux下升级node版本</h3>
<h4 id="今天碰到一个问题，服务器上部署一个开源一言api项目，提示node版本过低，项目要求版本至少为14">今天碰到一个问题，服务器上部署一个开源一言api项目，提示node版本过低，项目要求版本至少为14</h4>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line"></span><br><span class="line">v12.<span class="number">16</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><img src="http://image.unknown-host.com/node-v.png" alt="node版本"></p>
<h4 id="windows下的node版本管理器叫NVM，之前的文章有介绍">windows下的node版本管理器叫NVM，之前的文章有介绍</h4>
<p>但是我们在linux下需要用到另一个版本管理工具</p>
<h1>n</h1>
<a id="more"></a>
<h4 id="1、首先我们需要全局安装n这个工具，使用npm包管理工具安装">1、首先我们需要全局安装n这个工具，使用npm包管理工具安装</h4>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install -g n</span><br></pre></td></tr></table></figure>
<h4 id="2、介绍一下n的常用命令">2、介绍一下n的常用命令</h4>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">n 列出所有已安装的版本（使用n安装过的node版本），可按上下键进行版本选择</span><br><span class="line">n latest 安装最新版本-当前为<span class="number">15</span>.<span class="number">12</span>.<span class="number">0</span></span><br><span class="line">n stable 安装最新稳定版-当前为<span class="number">12</span>.<span class="number">16</span>.<span class="number">1</span></span><br><span class="line">n lts 安装最新长期支持版本-未尝试</span><br><span class="line">n rm [版本号] 删除指定版本</span><br><span class="line">n [版本号] 安装指定版本node</span><br><span class="line">n -h 帮助命令</span><br></pre></td></tr></table></figure>
<h4 id="3、此时我选择使用-n-latest-安装最新的版本">3、此时我选择使用 n latest 安装最新的版本</h4>
<p><img src="http://image.unknown-host.com/n-latest.png" alt=" n latest"></p>
<h4 id="4、验证是否成功">4、验证是否成功</h4>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line"></span><br><span class="line">v12.<span class="number">16</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="发现还是失败了，主要原因是n这个插件模块安装node的路径与腾讯云服务器node的路径不一致">发现还是失败了，主要原因是n这个插件模块安装node的路径与腾讯云服务器node的路径不一致</h3>
<h4 id="5、那么我们需要修改系统的环境变量">5、那么我们需要修改系统的环境变量</h4>
<h5 id="5-1、查看当前node的位置">5.1、查看当前node的位置</h5>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">which node</span><br><span class="line"></span><br><span class="line">/usr/local/lighthouse/softwares/nodejs/node-v12.<span class="number">16</span>.<span class="number">1</span>-linux-x64/bin/node</span><br></pre></td></tr></table></figure>
<h5 id="5-2、编辑环境变量">5.2、编辑环境变量</h5>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">vim ~/.bash_profile   </span><br><span class="line"></span><br><span class="line">// 提示：按 i 键进入编辑模式，vim的操作后续我也出一篇文章</span><br></pre></td></tr></table></figure>
<p>添加配置语句</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">export N_PREFIX=/usr/local/lighthouse/softwares/nodejs/node-v12.<span class="number">16</span>.<span class="number">1</span>-linux-x64 #node实际安装位置，保留bin之前的文件路径即可</span><br><span class="line">export <span class="built_in">PATH</span>=$N_PREFIX/bin:$<span class="built_in">PATH</span></span><br><span class="line"></span><br><span class="line">// 提示：按 esc 退出编辑模式，然后按 :wq 保存并退出</span><br></pre></td></tr></table></figure>
<p>执行source使修改生效</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure>
<p>检查一下系统变量生效了没</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> $N_PREFIX</span><br></pre></td></tr></table></figure>
<p><img src="http://image.unknown-host.com/node-source.png" alt=" n source"></p>
<h4 id="6、最后重新执行3、4步骤即可">6、最后重新执行3、4步骤即可</h4>
<p><img src="http://image.unknown-host.com/node-update-success.png" alt=" n success"></p>
]]></content>
  </entry>
  <entry>
    <title>如何拥有BTC</title>
    <url>/2021/04/20/2021-04-20-%E5%A6%82%E4%BD%95%E6%8B%A5%E6%9C%89BTC/</url>
    <content><![CDATA[<blockquote>
<p>强调说明，一定不要将大量资金投入虚拟币，在自己承受范围内合理投资，虚拟币的风险比基金股票要大得多 😓</p>
</blockquote>
<p>1、首先我们需要选择购买虚拟币的平台，这里我以火币做示例</p>
<p>2、通过以下二维码（我的推荐下载），安卓直接下载安装包，IOS需要安装testflight来测试app，进入下载页就知道了</p>
<p><img src="http://image.unknown-host.com/btc_platform_erweima.png" alt="二维码"></p>
<p>3、安装完成之后按照注册步骤进行账号注册及实名认证，下方tab选择到行情页面</p>
<a id="more"></a>
<div align="center" style="display: flex;">
  <img src="http://image.unknown-host.com/huobi-bought.jpeg" width="50%" >
</div>
<p>4、上面有三个选项，<b>自选</b>、<b>现货</b>、<b>行情</b>。</p>
<p>​	自选的意思是自己关注的币种，可以进行某个币的详情页点击收藏，然后在自选页快速查看</p>
<p>​	现货则是现在平台出售的币种，比如 BTC/USDT，这个意思就是使用USDT购买BTC，USDT为泰达币，可以理解为虚拟币中的稳定币，对标的是美金，1美金等于1USDT</p>
<h5 id="我们的购买方式如下-👇">我们的购买方式如下 👇</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">人民币 ---- &gt; USDT ----- &gt; （你想买的虚拟币）</span><br></pre></td></tr></table></figure>
<h5 id="售卖方式：-👇">售卖方式： 👇</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">虚拟币 ---- &gt; USDT ------ &gt; 人民币</span><br></pre></td></tr></table></figure>
<h4 id="合约就是赌博，简单可以理解为买大买小，可以做多或者做空，千万不要碰！！！-😈">合约就是赌博，简单可以理解为买大买小，可以做多或者做空，千万不要碰！！！ 😈</h4>
<h4 id="看完文字介绍我们可以看下现货的详情页">看完文字介绍我们可以看下现货的详情页</h4>
<div align="center" style="display: flex;">
  <img src="http://image.unknown-host.com/huobi-btc-k.jpeg" width="50%" >
</div>
<h4 id="此时我们可以点击买卖，记住，合约和杠杆是赌博不能碰-😈">此时我们可以点击买卖，记住，合约和杠杆是赌博不能碰 😈</h4>
<div align="center" style="display: flex;">
  <img src="http://image.unknown-host.com/huobi-pay.jpeg" width="50%" >
</div>
<p>页面我们可以看到三个选项<b>币币</b>，<b>全仓杠杆</b>，<b>法币</b></p>
<p>​	币币的意思就是用虚拟币购买虚拟币，上面的图是BTC/USDT，那么买入就是用USDT去兑换BTC，卖出则是相反。</p>
<p>​	全仓杠杆，是赌博，不能碰。 😈</p>
<p>​	法币就是法定货币兑换虚拟币，就是我们购买虚拟币的筹码，或者将虚拟币交易成人民币，目前最通用交易用的虚拟币是USDT</p>
<h4 id="看下图">看下图</h4>
<div align="center" style="display: flex;">
  <img src="http://image.unknown-host.com/huobi-choose.jpeg" width="50%" >
</div>
<h5 id="可以选择自己想要的支付方式及交易金额，这种自选区是与商家交易，也可以借助平台点击右上角的便捷区">可以选择自己想要的支付方式及交易金额，这种自选区是与商家交易，也可以借助平台点击右上角的便捷区</h5>
<div align="center" style="display: flex;">
  <img src="http://image.unknown-host.com/huobi-convint.jpeg" width="50%" >
  <img src="http://image.unknown-host.com/huobi-bought-info.jpg" width="50%" >
</div>
<h4 id="进行完以下操作你就购买成功了">进行完以下操作你就购买成功了</h4>
<p>你的账户有两种，一个是币币账户，一个是法币账户</p>
<p>购买完成后是在法币账户，我们提取到币币账户就可以进行交易了 🎉 🎉 🎉</p>
<h5 id="购买的USDT就可以去看那些-XXX-USDT的币都是可以买的">购买的USDT就可以去看那些 XXX/USDT的币都是可以买的</h5>
<p>山寨币不是特别推荐，目前主流的币有 💵</p>
<p><b>BTC</b>、<b>ETH</b>、<b>LTC</b>、<b>BCH</b></p>
<p>购买什么币种在这不做推荐，建议先了解虚拟币的概念且深思熟虑后再投入资金 👻</p>
]]></content>
  </entry>
  <entry>
    <title>小程序暗色模式适配</title>
    <url>/2021/04/01/2021-03-31-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%9A%97%E8%89%B2%E6%A8%A1%E5%BC%8F%E9%80%82%E9%85%8D/</url>
    <content><![CDATA[<h4 id="小程序暗色模式适配">小程序暗色模式适配</h4>
<p>小程序的暗色模式适配可以直接在工具直接点击生成wxss文件，非常的方便<br>
<img src="http://image.unknown-host.com/wx-darkmode-init.png" alt="darkmode"></p>
<h4 id="1、点击生成darkmode适配">1、点击生成darkmode适配</h4>
<p>编辑器会为你当前的页面生成一份wxss文件，并且在当前page下面的wxss的最下方引入</p>
<h5 id="文件示例：主要是通过媒体查询进行样式覆盖">文件示例：主要是通过媒体查询进行样式覆盖</h5>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">prefers-color-scheme:</span> dark) &#123;</span><br><span class="line">  <span class="selector-class">.article-search-page</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">33</span>, <span class="number">33</span>, <span class="number">34</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>此时我们完成了一个页面的适配，但是有一个问题存在，tabBar的样式并未被页面的所影响，所以没有适配成功</p>
<div align="center" style="display: flex;">
<img src="http://image.unknown-host.com/wx-darkmode-half.png" width="50%" >
 </div>
<h5 id="那么我们需要去适配一下tabBar">那么我们需要去适配一下tabBar</h5>
<h4 id="2、配置tabBar暗色模式">2、配置tabBar暗色模式</h4>
<h5 id="2-1、新建一个theme-json（这里我放在了app-json的同级）">2.1、新建一个theme.json（这里我放在了app.json的同级）</h5>
<p>文件示例：<br>
light代表浅色模式下的颜色值，dark表示暗色模式下的值</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"light"</span>: &#123;</span><br><span class="line">    <span class="attr">"navigationBarTextStyle"</span>: <span class="string">"black"</span>,</span><br><span class="line">    <span class="attr">"navBackgroundColor"</span>: <span class="string">"#ffffff"</span>,</span><br><span class="line">    <span class="attr">"backgroundColor"</span>: <span class="string">"#ebeaef"</span>,</span><br><span class="line">    <span class="attr">"backgroundTextStyle"</span>: <span class="string">"dark"</span>,</span><br><span class="line">    <span class="attr">"tabFontColor"</span>:<span class="string">"#bfbfbf"</span>,</span><br><span class="line">    <span class="attr">"tabSelectedColor"</span>:<span class="string">"#515151"</span>,</span><br><span class="line">    <span class="attr">"tabBgColor"</span>:<span class="string">"#ffffff"</span>,</span><br><span class="line">    <span class="attr">"tabBorderStyle"</span>:<span class="string">"black"</span>,</span><br><span class="line">    <span class="attr">"iconPath1"</span>: <span class="string">"images/ghome.png"</span>,</span><br><span class="line">    <span class="attr">"iconPath2"</span>: <span class="string">"images/gzb.png"</span>,</span><br><span class="line">    <span class="attr">"iconPath3"</span>: <span class="string">"images/guser.png"</span>,</span><br><span class="line">    <span class="attr">"selectedIconPath1"</span>: <span class="string">"images/bhome.png"</span>,</span><br><span class="line">    <span class="attr">"selectedIconPath2"</span>: <span class="string">"images/bzb.png"</span>,</span><br><span class="line">    <span class="attr">"selectedIconPath3"</span>: <span class="string">"images/buser.png"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dark"</span>: &#123;</span><br><span class="line">    <span class="attr">"navigationBarTextStyle"</span>: <span class="string">"white"</span>,</span><br><span class="line">    <span class="attr">"navBackgroundColor"</span>: <span class="string">"#000000"</span>,</span><br><span class="line">    <span class="attr">"backgroundColor"</span>: <span class="string">"#000000"</span>,</span><br><span class="line">    <span class="attr">"backgroundTextStyle"</span>: <span class="string">"light"</span>,</span><br><span class="line">    <span class="attr">"tabFontColor"</span>:<span class="string">"#bfbfbf"</span>,</span><br><span class="line">    <span class="attr">"tabSelectedColor"</span>:<span class="string">"#ffffff"</span>,</span><br><span class="line">    <span class="attr">"tabBgColor"</span>:<span class="string">"#191919"</span>,</span><br><span class="line">    <span class="attr">"tabBorderStyle"</span>:<span class="string">"white"</span>,</span><br><span class="line">    <span class="attr">"iconPath1"</span>: <span class="string">"images/ghome.png"</span>,</span><br><span class="line">    <span class="attr">"iconPath2"</span>: <span class="string">"images/gzb.png"</span>,</span><br><span class="line">    <span class="attr">"iconPath3"</span>: <span class="string">"images/guser.png"</span>,</span><br><span class="line">    <span class="attr">"selectedIconPath1"</span>: <span class="string">"images/whome.png"</span>,</span><br><span class="line">    <span class="attr">"selectedIconPath2"</span>: <span class="string">"images/wzb.png"</span>,</span><br><span class="line">    <span class="attr">"selectedIconPath3"</span>: <span class="string">"images/wuser.png"</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h5 id="2-2、app-json进行配置">2.2、app.json进行配置</h5>
<p>开启darkmode，并且tabBar内配置颜色使用@的形式，变量，具体的色值根据需求在<code>theme.json</code>中修改</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"darkmode": true,</span><br><span class="line"> "tabBar": &#123;</span><br><span class="line">  "color": "@tabFontColor",</span><br><span class="line">  "selectedColor": "@tabSelectedColor",</span><br><span class="line">  "backgroundColor": "@tabBgColor",</span><br><span class="line">  "borderStyle": "@tabBorderStyle",</span><br><span class="line">   <span class="comment">// 页面配置</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h4 id="微信开发者工具的暗色模式可以在-模拟器的右上角有个小手机图标，点击选项切换浅色深色查看效果">微信开发者工具的暗色模式可以在 模拟器的右上角有个小手机图标，点击选项切换浅色深色查看效果</h4>
<h4 id="最后来看下最终效果吧">最后来看下最终效果吧~</h4>
<h5 id="浅色模式">浅色模式</h5>
<div align="center" style="display: flex;">
<img src="http://image.unknown-host.com/wx-home-light.jpg" width="50%" >
<img src="http://image.unknown-host.com/wx-details-light.jpg" width="50%" >
 </div>
<!-- ![首页浅色模式][3]  ![详情页浅色模式][4] -->
<h5 id="深色模式-darkmode">深色模式 darkmode</h5>
<div align="center" style="display: flex;">
<img src="http://image.unknown-host.com/wx-home.jpg" width="50%" >
<img src="http://image.unknown-host.com/wx-details.jpg" width="50%" >
 </div>
<!-- ![首页深色模式][5]  ![详情页深色模式][6] -->
]]></content>
  </entry>
  <entry>
    <title>清空Redis的缓存</title>
    <url>/2021/05/17/2021-05-17-%E6%B8%85%E7%A9%BARedis%E7%9A%84%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h5 id="1、首先查找到Redis的安装位置">1、首先查找到Redis的安装位置</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef|grep redis</span><br></pre></td></tr></table></figure>
<p>得到结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis     6301     1  0 Apr13 ?        00:42:42 &#x2F;usr&#x2F;bin&#x2F;redis-server 127.0.0.1:6379</span><br><span class="line">root     32195 30473  0 09:12 pts&#x2F;0    00:00:00 grep --color&#x3D;auto redis</span><br></pre></td></tr></table></figure>
<p>得到进程位置  <strong>6301</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -l &#x2F;proc&#x2F;6301&#x2F;cwd</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM-8-2-centos hitokoto-api]# ls -l &#x2F;proc&#x2F;6301&#x2F;cwd</span><br><span class="line">lrwxrwxrwx 1 redis redis 0 Apr 13 17:47 &#x2F;proc&#x2F;6301&#x2F;cwd -&gt; &#x2F;var&#x2F;lib&#x2F;redis</span><br></pre></td></tr></table></figure>
<h5 id="2、进入对应文件夹">2、进入对应文件夹</h5>
<p>打开对应端口号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;bin&#x2F;</span><br><span class="line">.&#x2F;redis-cli</span><br></pre></td></tr></table></figure>
<p>此时会进入redis的控制台</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AUTH 你的密码</span><br></pre></td></tr></table></figure>
<p>验证通过后就可以进行操作了</p>
<a id="more"></a>
<h5 id="3、Redis的常用命令">3、Redis的常用命令</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看所有key值：keys *</span><br><span class="line">删除指定索引的值：del key</span><br><span class="line">清空整个 Redis 服务器的数据：flushall </span><br><span class="line">清空当前库中的所有的 key：flushdb</span><br></pre></td></tr></table></figure>
<h5 id="4、部分异常信息">4、部分异常信息</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有时候会碰到一些异常信息</span><br><span class="line">(error) ERR unknown command &#39;flushall&#39;</span><br></pre></td></tr></table></figure>
<p>这个可能的原因是Redis禁用了清除缓存的危险操作</p>
<h5 id="4-1、需要生效则需要配置Redis的config文件，然后重启">4.1、需要生效则需要配置Redis的config文件，然后重启</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vim &#x2F;etc&#x2F;redis&#x2F;redis.conf</span><br><span class="line"># 如果上面没有，配置文件可能会在 &#x2F;etc&#x2F;redis.conf</span><br></pre></td></tr></table></figure>
<p><strong>redis.conf</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rename-command FLUSHALL &quot;&quot;  </span><br><span class="line">rename-command FLUSHDB &quot;&quot;  </span><br><span class="line">rename-command KEYS &quot;</span><br></pre></td></tr></table></figure>
<p>重启Redis</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart redis</span><br></pre></td></tr></table></figure>
<h4 id="5、再次走2、3步骤即可生效">5、再次走2、3步骤即可生效</h4>
<p><img src="http://image.unknown-host.com/blog_male_0517.jpg" alt="麻了"></p>
]]></content>
  </entry>
  <entry>
    <title>如何在markdown中使用emoji</title>
    <url>/2021/04/27/2021-04-27-markdown%E4%B8%AD%E4%BD%BF%E7%94%A8emoji/</url>
    <content><![CDATA[<p>纯文字的文案看的不如带一些表情信息表达的更加生动😆</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//www.webfx.com/tools/emoji-cheat-sheet/</span></span><br></pre></td></tr></table></figure>
<p>在markdown中添加<code>emoji</code>目前找到的有<b>三种方案</b></p>
<h4 id="推荐使用第三种">推荐使用第三种</h4>
<h4 id="1、数据库存储emoji-—-百度的😋">1、数据库存储emoji — 百度的😋</h4>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 修改my.ini [mysqld] character-<span class="built_in">set</span>-server=utf8mb4</span><br><span class="line"><span class="number">2</span>. 在Connector/J的连接参数中，不要加characterEncoding参数。 不加这个参数时，默认值就时autodetect。</span><br><span class="line"><span class="number">3</span>. 将已经建好的表也转换成utf8mb4 </span><br><span class="line">   命令：ALTER TABLE `TABLE_NAME` <span class="built_in">CONVERT</span> TO CHARACTER <span class="built_in">SET</span> utf8mb4 COLLATE utf8mb4_general_ci; （将TABLE_NAME替换成你的表名）</span><br><span class="line"><span class="number">4</span>. 将需要使用emoji的字段设置类型为： </span><br><span class="line">   命令：ALTER TABLE `TABLE_NAME`MODIFY COLUMN `COLUMN_NAME`  text CHARACTER <span class="built_in">SET</span> utf8mb4 COLLATE utf8mb4_general_ci;</span><br></pre></td></tr></table></figure>
<h5 id="我这边修改成功了，但是接口返回的emoji还是为一个">我这边修改成功了，但是接口返回的emoji还是为一个 ?</h5>
<p>说明对接口还要进行对应的改造，成本较高，放弃</p>
<h4 id="2、转义emoji后存入数据库">2、转义emoji后存入数据库</h4>
<blockquote>
<p>转义成字符串放入到数据库，使用的时候反转义可以直接转义成表情<br>
比较复杂，还要对应的函数支持</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对emoji表情转义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emoji_encode</span>(<span class="params">$str</span>)</span>&#123;</span><br><span class="line">    $strEncode = <span class="string">''</span>;</span><br><span class="line">    $length = mb_strlen($str,<span class="string">'utf-8'</span>);</span><br><span class="line">    <span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; $length; $i++) &#123;</span><br><span class="line">        $_tmpStr = mb_substr($str,$i,<span class="number">1</span>,<span class="string">'utf-8'</span>);    </span><br><span class="line">        <span class="keyword">if</span> (strlen($_tmpStr) &gt;= <span class="number">4</span>)&#123;</span><br><span class="line">            $strEncode .= <span class="string">'[[EMOJI:'</span>.rawurlencode($_tmpStr).<span class="string">']]'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $strEncode .= $_tmpStr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $strEncode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对emoji表情转反义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emoji_decode</span>(<span class="params">$str</span>)</span>&#123;</span><br><span class="line">    $strDecode = preg_replace_callback(<span class="string">'|\[\[EMOJI:(.*?)\]\]|'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$matches</span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> rawurldecode($matches[<span class="number">1</span>]);</span><br><span class="line">    &#125;, $str);</span><br><span class="line">    <span class="keyword">return</span> $strDecode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3、直接使用markdown支持的字符，该方法支持绝大多数emoji，仅极少数不支持">3、直接使用markdown支持的字符，该方法支持绝大多数emoji，仅极少数不支持</h4>
<h5 id="emoji字符对照网址，这个地址里面的比较全面">emoji字符对照网址，这个地址里面的比较全面</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.webfx.com&#x2F;tools&#x2F;emoji-cheat-sheet&#x2F;</span><br></pre></td></tr></table></figure>
<p>字符的拼接规则是</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">:emoji_name:</span><br><span class="line">两个冒号（英文半角）中间写上指定的emoji名称</span><br><span class="line">下面我列举一些常用的</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<table>
<thead>
<tr>
<th style="text-align:center">示例</th>
<th style="text-align:center">字符</th>
<th style="text-align:center">示例</th>
<th style="text-align:center">字符</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">😄</td>
<td style="text-align:center">smile</td>
<td style="text-align:center">😃</td>
<td style="text-align:center">smiley​</td>
</tr>
<tr>
<td style="text-align:center">☺️</td>
<td style="text-align:center">relaxed​</td>
<td style="text-align:center">😍</td>
<td style="text-align:center">heart_eyes​</td>
</tr>
<tr>
<td style="text-align:center">😳</td>
<td style="text-align:center">flushed​</td>
<td style="text-align:center">😜</td>
<td style="text-align:center">stuck_out_tongue_winking_eye​</td>
</tr>
<tr>
<td style="text-align:center">😏</td>
<td style="text-align:center">smirk</td>
<td style="text-align:center">😌</td>
<td style="text-align:center">relieved</td>
</tr>
<tr>
<td style="text-align:center">😟</td>
<td style="text-align:center">worried​</td>
<td style="text-align:center">😓</td>
<td style="text-align:center">sweat</td>
</tr>
<tr>
<td style="text-align:center">😂</td>
<td style="text-align:center">joy​</td>
<td style="text-align:center">😎</td>
<td style="text-align:center">sunglasses​</td>
</tr>
<tr>
<td style="text-align:center">👿</td>
<td style="text-align:center">imp​</td>
<td style="text-align:center">😋</td>
<td style="text-align:center">yum​</td>
</tr>
<tr>
<td style="text-align:center">💙</td>
<td style="text-align:center">blue_heart​</td>
<td style="text-align:center">💔</td>
<td style="text-align:center">broken_heart​</td>
</tr>
<tr>
<td style="text-align:center">❤️</td>
<td style="text-align:center">heart​</td>
<td style="text-align:center">💖</td>
<td style="text-align:center">sparkling_heart​</td>
</tr>
<tr>
<td style="text-align:center">👍</td>
<td style="text-align:center">+1​</td>
<td style="text-align:center">👌</td>
<td style="text-align:center">ok_hand:</td>
</tr>
<tr>
<td style="text-align:center">🙈</td>
<td style="text-align:center">see_no_evil​</td>
<td style="text-align:center">👀</td>
<td style="text-align:center">eyes​</td>
</tr>
<tr>
<td style="text-align:center">💩</td>
<td style="text-align:center">poop</td>
<td style="text-align:center">🙏</td>
<td style="text-align:center">pray​</td>
</tr>
<tr>
<td style="text-align:center">❓</td>
<td style="text-align:center">question​</td>
<td style="text-align:center">❗️</td>
<td style="text-align:center">exclamation​</td>
</tr>
<tr>
<td style="text-align:center">😹</td>
<td style="text-align:center">joy_cat​</td>
<td style="text-align:center">😺</td>
<td style="text-align:center">smiley_cat​</td>
</tr>
<tr>
<td style="text-align:center">🙈</td>
<td style="text-align:center">see_no_evil​</td>
<td style="text-align:center">🙊</td>
<td style="text-align:center">speak_no_evil​</td>
</tr>
<tr>
<td style="text-align:center">🐮</td>
<td style="text-align:center">cow​</td>
<td style="text-align:center">🅱️</td>
<td style="text-align:center">b</td>
</tr>
<tr>
<td style="text-align:center">🐟</td>
<td style="text-align:center">fish​</td>
<td style="text-align:center">🏧</td>
<td style="text-align:center">atm​</td>
</tr>
<tr>
<td style="text-align:center">1️⃣</td>
<td style="text-align:center">one​</td>
<td style="text-align:center">2️⃣</td>
<td style="text-align:center">two​</td>
</tr>
<tr>
<td style="text-align:center">◀️</td>
<td style="text-align:center">arrow_backward​</td>
<td style="text-align:center">▶️</td>
<td style="text-align:center">arrow_forward:</td>
</tr>
<tr>
<td style="text-align:center">🐴</td>
<td style="text-align:center">horse</td>
<td style="text-align:center">🐒</td>
<td style="text-align:center">monkey​</td>
</tr>
</tbody>
</table>
<h5 id="还有很多就不一一举例了，很多都是有一定规律的，比如1234就是英文对应">还有很多就不一一举例了，很多都是有一定规律的，比如1234就是英文对应</h5>
<p>可以去上面的网站查看对应的emoji的字符</p>
<h5 id="比较有意思的是emoji也可以配置斜体标签或者加粗字体的标签使用">比较有意思的是emoji也可以配置斜体标签或者加粗字体的标签使用</h5>
<p>💩<i>💩</i> 😃<b>😃</b></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:poop:</span><br><span class="line">&lt;i&gt;:poop:&lt;&#x2F;i&gt; </span><br><span class="line">:smiley:</span><br><span class="line">&lt;b&gt;:smiley:&lt;&#x2F;b&gt;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
</search>
